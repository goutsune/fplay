code:0000 ;
code:0000 ; +-------------------------------------------------------------------------+
code:0000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
code:0000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
code:0000 ; |                      License info: 74-1C25-4997-EA                      |
code:0000 ; |                      <error retrieving user info>                       |
code:0000 ; +-------------------------------------------------------------------------+
code:0000 ;
code:0000 ; Input SHA256 : 8004B53936793170AF03B628837F972D949FD43DA6E2BFA0626A7B403382DE08
code:0000 ; Input MD5    : 13C2681E36CC3A2780C4E458A96C8693
code:0000 ; Input CRC32  : DB2A2FF1
code:0000 ; Compiler     : Borland C++
code:0000                 Ideal
code:0000                 p286n
code:0000                 model tiny
code:0000 ; ===========================================================================
code:0000 ; Segment type: Pure code
code:0000 ; Segment permissions: Read/Write/Execute
code:0000 segment         code byte public 'CODE'
code:0000                 assume cs:code
code:0000                 assume es:nothing, ss:nothing, ds:code
code:0000 PSP             db 2 dup(?)                                 ; int20_stub
code:0002                 dw ?                                        ; last_para
code:0004                 db 6 dup(?)                                 ; reserved_04_09
code:000A                 dw ?                                        ; int22_off
code:000C                 dw ?                                        ; int22_seg
code:000E                 dw ?                                        ; int23_off
code:0010                 dw ?                                        ; int23_seg
code:0012                 dw ?                                        ; int24_off
code:0014                 dw ?                                        ; int24_seg
code:0016                 db 16h dup(?)                               ; reserved_16_2B
code:002C                 dw ?                                        ; env_seg
code:002E                 db 2Eh dup(?)                               ; reserved_2E_5B
code:005C                 db 10h dup(?)                               ; fcb1
code:006C                 db 10h dup(?)                               ; fcb2
code:007C                 db 4 dup(?)                                 ; reserved_7C_7F
code:0080                 db ?                                        ; cmdlen
code:0081                 db 7Fh dup(?)                               ; cmd
code:0100 ; ---------------------------------------------------------------------------
code:0100 ; File Name   : I:\Stuff\mus_disasm\frs00play\fplay.com
code:0100 ; Format      : MS-DOS COM-file
code:0100 ; Base Address: 0h Range: 100h-400Ah Loaded length: 3F0Ah
code:0100                 jmp     ENTRYPOINT
code:0100 ; ---------------------------------------------------------------------------
code:0103 byte_0103       db 1                                        ; DATA XREF: SYSINI+5F↓w
code:0103                                                             ; PLAY_INTERRUPT:loc_1072↓r
code:0104 byte_0104       db 1                                        ; DATA XREF: INT_FUNC+1DC↓w
code:0105 word_0105       dw 0                                        ; DATA XREF: ENTRYPOINT+ED↓w
code:0105                                                             ; ENTRYPOINT+20F↓r
code:0107 word_0107       dw 0                                        ; DATA XREF: ENTRYPOINT+F4↓w
code:0107                                                             ; ENTRYPOINT+216↓r
code:0109 word_0109       dw 0                                        ; DATA XREF: ENTRYPOINT+109↓w
code:0109                                                             ; ENTRYPOINT+201↓r
code:010B word_010B       dw 0                                        ; DATA XREF: ENTRYPOINT+110↓w
code:010B                                                             ; ENTRYPOINT+208↓r
code:010D word_010D       dw 0                                        ; DATA XREF: ENTRYPOINT+FB↓w
code:010D                                                             ; ENTRYPOINT+21D↓r
code:010F word_010F       dw 0                                        ; DATA XREF: ENTRYPOINT+102↓w
code:010F                                                             ; ENTRYPOINT+224↓r
code:0111 byte_0111       db 0                                        ; DATA XREF: ENTRYPOINT:loc_28AA↓w
code:0111                                                             ; ENTRYPOINT+119↓r
code:0111                                                             ; ENTRYPOINT+144↓r
code:0111                                                             ; ENTRYPOINT+199↓r
code:0112 DATA_BUF_SIZE   dw 0                                        ; DATA XREF: PARSE_ARGS+C↓w
code:0112                                                             ; code:loc_2491↓w
code:0112                                                             ; ENTRYPOINT+C9↓r
code:0112                                                             ; ENTRYPOINT+1B0↓r
code:0114 CMD_INT_ARG     db 0                                        ; DATA XREF: PARSE_INT↓w
code:0114                                                             ; PARSE_INT:loc_24FD↓w
code:0114                                                             ; PARSE_INT+1F↓r
code:0114                                                             ; PARSE_INT+28↓r
code:0114                                                             ; PARSE_INT+2E↓w
code:0114                                                             ; PARSE_INT+38↓r
code:0114                                                             ; PARSE_INT+41↓r
code:0115                 align 2
code:0116 ORIG_DS         dw 0                                        ; DATA XREF: PARSE_ARGS↓w
code:0116                                                             ; sub_2495:loc_249D↓r
code:0116                                                             ; sub_2495:loc_24A1↓r
code:0118 CMD_FLAGS       db 0                                        ; DATA XREF: PARSE_ARGS+4↓w
code:0118                                                             ; PARSE_ARGS+40↓w
code:0118                                                             ; code:cmdSetQuiet↓w
code:0118                                                             ; code:cmdSetTestMode↓w
code:0118                                                             ; code:loc_246B↓w
code:0118                                                             ; code:2489↓w
code:0118                                                             ; PRINT_STRING↓r
code:0118                                                             ; ENTRYPOINT:loc_29C4↓r
code:0119 byte_0119       db 0                                        ; DATA XREF: sub_2495+10↓w
code:0119                                                             ; sub_2495+2F↓w
code:0119                                                             ; sub_2495+3E↓r
code:011A                 align 8
code:0120 aFplay20a       db 'FPLAY       2.0A',0
code:0131                 db 0CBh dup(0)
code:01FC INT_HAND_OFFSET dw 0                                        ; DATA XREF: ENTRYPOINT+1E↓r
code:01FC                                                             ; ENTRYPOINT+105↓r
code:01FC                                                             ; ENTRYPOINT+12D↓w
code:01FC                                                             ; ENTRYPOINT+204↓w
code:01FE INT_HAND_SEGMENT dw 0                                       ; DATA XREF: ENTRYPOINT+2B↓r
code:01FE                                                             ; ENTRYPOINT+10C↓r
code:01FE                                                             ; ENTRYPOINT+134↓w
code:01FE                                                             ; ENTRYPOINT+1D3↓r
code:01FE                                                             ; ENTRYPOINT+20B↓w
code:0200 CUR_FNUM_OFFSET dw 0                                        ; DATA XREF: SYSINI+6E↓w
code:0200                                                             ; FMFRQ+B↓r
code:0202 SONG_NUMBER_OFFSETS db    0,   0,   0,   0                  ; DATA XREF: PLAY_INTERRUPT:loc_11B4↓o
code:0202                                                             ; PLAY+50A↓o
code:0206                 db 0
code:0207 ENGINE_FLAGS    db 0                                        ; DATA XREF: INT_FUNC+152↓r
code:0207                                                             ; INT_FUNC+157↓w
code:0207                                                             ; INT_FUNC+16C↓r
code:0207                                                             ; INT_FUNC+171↓w
code:0207                                                             ; INT_FUNC+186↓r
code:0207                                                             ; INT_FUNC+18B↓w
code:0207                                                             ; INT_FUNC:setStatus↓r
code:0207                                                             ; INT_FUNC+241↓r
code:0207                                                             ; INT_FUNC+246↓w
code:0207                                                             ; INT_FUNC+251↓r
code:0207                                                             ; INT_FUNC+256↓w
code:0207                                                             ; SYSINI+A↓w
code:0207                                                             ; PLAY_INTERRUPT+20↓r
code:0207                                                             ; PLAY_INTERRUPT+25↓w
code:0207                                                             ; PLAY_INTERRUPT+42↓r
code:0207                                                             ; PLAY_INTERRUPT+47↓w
code:0207                                                             ; PLAY_INTERRUPT+57↓r
code:0207                                                             ; PLAY_INTERRUPT+5C↓w
code:0207                                                             ; PLAY_INTERRUPT+CC↓r
code:0207                                                             ; PLAY_INTERRUPT+D1↓w
code:0208 FM_ATTENUATION  db 0                                        ; DATA XREF: SYSINI+32↓w
code:0208                                                             ; CALVOL+48↓r
code:0209 SSG_VOL_MOD     db 0                                        ; DATA XREF: INT_FUNC:getFmVol↓r
code:0209                                                             ; INT_FUNC:setFmVol↓w
code:0209                                                             ; SYSINI+2D↓w
code:0209                                                             ; CALVOL+3B↓r
code:020A BGM_VOL_MOD     db 0                                        ; DATA XREF: INT_FUNC:getBgmVol↓r
code:020A                                                             ; INT_FUNC:setBgmVol↓w
code:020A                                                             ; SYSINI+28↓w
code:020A                                                             ; CALVOL+24↓r
code:020B SFX_VOL_MOD     db 0                                        ; DATA XREF: SYSINI+23↓w
code:020B                                                             ; CALVOL:is_sfx↓r
code:020C ; This byte gets reported by interrupt and can be set
code:020C ; up via vcmd. I assume this is used for synchronized
code:020C ; movie/music mechanics. Although, PLAY sets this to
code:020C ; FEh upon entry
code:020C SEQ_CUSTOM      db 0                                        ; DATA XREF: INT_FUNC+195↓r
code:020C                                                             ; INT_FUNC:resetSeqFeedback↓w
code:020C                                                             ; SYSINI+F↓w
code:020C                                                             ; PLAY+29C↓w
code:020C                                                             ; PLAY+3E0↓w
code:020C                                                             ; PLAY+3F1↓w
code:020D FADE_IN_PROGRESS db 0                                       ; DATA XREF: INT_FUNC+81↓w
code:020D                                                             ; INT_FUNC+14D↓w
code:020D                                                             ; SYSINI+14↓w
code:020D                                                             ; PLAY_INTERRUPT+96↓r
code:020D                                                             ; PLAY_INTERRUPT:loc_10BF↓w
code:020E FADE_SPEED      db 0                                        ; DATA XREF: INT_FUNC:fade↓w
code:020E                                                             ; SYSINI+19↓w
code:020E                                                             ; PLAY_INTERRUPT+A3↓r
code:020F FADE_DONE       db 0                                        ; DATA XREF: INT_FUNC+148↓w
code:020F                                                             ; PLAY_INTERRUPT:loc_10A0↓r
code:020F                                                             ; PLAY_INTERRUPT+A7↓w
code:0210 FADE_VOL_MOD    db 0                                        ; DATA XREF: INT_FUNC+86↓w
code:0210                                                             ; SYSINI+1E↓w
code:0210                                                             ; PLAY_INTERRUPT:loc_10B1↓w
code:0210                                                             ; PLAY_INTERRUPT+B5↓r
code:0210                                                             ; PLAY_INTERRUPT+C7↓w
code:0210                                                             ; CALVOL+1E↓r
code:0211 FETCH_LOOP_FINISHED db 0                                    ; DATA XREF: PLAY+182↓w
code:0211                                                             ; PLAY+189↓r
code:0211                                                             ; PLAY+297↓w
code:0211                                                             ; PLAY+2FF↓w
code:0212                 db 38h dup(   0)
code:024A SEQ_CUSTOM_IS_SET db FALSE                                  ; DATA XREF: PLAY_INTERRUPT:loc_10D4↓w
code:024A                                                             ; PLAY:vcmdSetCallbackVal↓r
code:024A                                                             ; PLAY+3E4↓w
code:024A                                                             ; PLAY:vcmdSetfeedbackFF↓r
code:024A                                                             ; PLAY:skip_0↓w
code:024B                 db 3 dup(0)
code:024E DRUM_TRACK_FLAGS db 0                                       ; DATA XREF: PLAY_INTERRUPT+10B↓w
code:024E                                                             ; PLAY_INTERRUPT:_is_fm↓r
code:024E                                                             ; PLAY_INTERRUPT+191↓w
code:024E                                                             ; PLAY_INTERRUPT+19A↓r
code:024F                 db 4 dup(0)
code:0253 INT_CALL_COUNT  db 0                                        ; DATA XREF: INT_FUNC:getTickStatus↓r
code:0253                                                             ; PLAY_INTERRUPT:loc_105F↓w
code:0254                 db 8 dup(0)
code:025C CUR_INSTS       db    0,   0,   0,   0,   0,   0            ; DATA XREF: INIT_TRACKS+62↓o
code:025C                                                             ; SYSINI+37↓w
code:025C                                                             ; PLAY+61↓o
code:025C                                                             ; PLAY+103↓o
code:025C                                                             ; PLAY+2D5↓o
code:025C                                                             ; PLAY+450↓o
code:025C                                                             ; AKEYOF+56↓w
code:025C                                                             ; ALLCLR↓w
code:025C                                                             ; SYSINI+3C↓w
code:025C                                                             ; AKEYOF+5B↓w
code:025C                                                             ; ALLCLR+5↓w
code:025C                                                             ; SYSINI+41↓w
code:025C                                                             ; AKEYOF+60↓w
code:025C                                                             ; ALLCLR+A↓w
code:025C                                                             ; SYSINI+46↓w
code:025C                                                             ; AKEYOF+65↓w
code:025C                                                             ; ALLCLR+F↓w
code:0262                 align 4
code:0264                 db 4 dup(   0)
code:0268 SSG_STATS       db    0,   0,   0,   0                      ; DATA XREF: PLAY_INTERRUPT+115↓w
code:0268                                                             ; PLAY_INTERRUPT+13F↓o
code:0268                                                             ; PLAY_INTERRUPT+11A↓w
code:0268                                                             ; PLAY_INTERRUPT+11F↓w
code:0268                                                             ; FRQCHK+14↓o
code:0268                                                             ; FRQCHK_NEG+14↓o
code:0268                                                             ; PLAY_INTERRUPT+124↓w
code:026C                 db 8 dup(0)
code:0274 CHAN_STATS      db    0,   0,   0,   0,   0,   0            ; DATA XREF: PLAY_INTERRUPT:loc_107E↓w
code:0274                                                             ; PLAY+10↓o
code:0274                                                             ; PLAY_INTERRUPT+84↓w
code:0274                                                             ; PLAY_INTERRUPT+8A↓w
code:027A word_027A       dw 0                                        ; DATA XREF: PLAY_INTERRUPT+90↓w
code:027C PROC_DISABLED   db 0                                        ; DATA XREF: INIT_TRACKS+77↓w
code:027C                                                             ; SYSINI+55↓w
code:027C                                                             ; PLAY+15↓r
code:027C                                                             ; PLAY+283↓w
code:027C                                                             ; PLAY+2E7↓w
code:027D PAUSED          db 0                                        ; DATA XREF: INT_FUNC:pause↓r
code:027D                                                             ; INT_FUNC+167↓w
code:027D                                                             ; INT_FUNC:unpause↓r
code:027D                                                             ; INT_FUNC+181↓w
code:027D                                                             ; SYSINI+5A↓w
code:027D                                                             ; PLAY_INTERRUPT+75↓r
code:027E SSG_MIXER_REG   db 0                                        ; DATA XREF: INT_FUNC:get27e↓r
code:027E                                                             ; SYSINI+69↓w
code:027E                                                             ; PLAY_INTERRUPT+1A1↓r
code:027E                                                             ; PLAY_INTERRUPT+1A7↓w
code:027E                                                             ; AKEYOF↓w
code:027F                 align 2
code:0280 TOTAL_SONGS     db 0                                        ; DATA XREF: INT_FUNC:playBgm↓r
code:0280                                                             ; INT_FUNC:playSfx↓r
code:0280                                                             ; SYSINI+84↓w
code:0281 NEED_VOL_UPDATE db 0                                        ; DATA XREF: PLAY_INTERRUPT+EB↓w
code:0281                                                             ; SOFTEV↓r
code:0281                                                             ; KEYON:shoud_process↓w
code:0281                                                             ; KEYON:finish↓w
code:0282 DRUM_MASK_SEQ_PTR dw 0                                      ; DATA XREF: SGDRUM:not_blocked↓r
code:0282                                                             ; SGDRUM+22↓w
code:0282                                                             ; PLAY+152↓w
code:0284 NOISE_PERIOD_SEQ_PTR dw 0                                   ; DATA XREF: SGDRUM+33↓r
code:0284                                                             ; SGDRUM+41↓w
code:0284                                                             ; PLAY+15A↓w
code:0286 IS_SFX_PLAYING  db 0                                        ; DATA XREF: PLAY_INTERRUPT+110↓w
code:0286                                                             ; PLAY_INTERRUPT+152↓r
code:0286                                                             ; PLAY_INTERRUPT:loc_115C↓w
code:0287 TIMER_PERIOD    dw 0                                        ; DATA XREF: INT_FUNC:loc_0869↓r
code:0287                                                             ; INT_FUNC:speedUp↓r
code:0287                                                             ; INT_FUNC+225↓w
code:0287                                                             ; INT_FUNC:slowDown↓r
code:0287                                                             ; INT_FUNC+233↓w
code:0287                                                             ; SYSINI+4↓w
code:0289 DEBUG           db 0                                        ; DATA XREF: INT_FUNC:setDebug↓w
code:0289                                                             ; INT_FUNC:unsetDebug↓w
code:0289                                                             ; INT_FUNC+25F↓r
code:0289                                                             ; SYSINI+50↓w
code:0289                                                             ; PLAY_INTERRUPT+63↓r
code:0289                                                             ; PLAY_INTERRUPT:loc_11F9↓r
code:028A                 db 4 dup(0)
code:028E FM3EX_ENABLED   db 0                                        ; DATA XREF: SYSINI+64↓w
code:028E                                                             ; PLAY_INTERRUPT+31↓r
code:028E                                                             ; PLAY_INTERRUPT+D9↓w
code:028E                                                             ; PLAY+54↓w
code:028E                                                             ; PLAY:_arg_is_enable↓w
code:028F FM3_OP2         db 0                                        ; DATA XREF: PLAY+4C4↓w
code:028F                                                             ; POLYON+1F↓r
code:0290 FM3_OP3         db 0                                        ; DATA XREF: PLAY+4CA↓w
code:0290                                                             ; POLYON+39↓r
code:0291 FM3_OP1         db 0                                        ; DATA XREF: PLAY+4D0↓w
code:0291                                                             ; POLYON+53↓r
code:0292 CUR_NOTE        db 0                                        ; DATA XREF: POLYON+1C↓w
code:0292                                                             ; GET_FNUM↓r
code:0293 FM3_OP2_FNUM    dw 0                                        ; DATA XREF: PLAY+544↓w
code:0295 FM3_OP3_FNUM    dw 0                                        ; DATA XREF: PLAY+54C↓w
code:0297 FM3_OP1_FNUM    db 0                                        ; DATA XREF: SYSINI+4B↓w
code:0297                                                             ; PLAY+554↓w
code:0298                 db 0
code:0299 CALL_COUNTDOWN  db 0                                        ; DATA XREF: PLAY_INTERRUPT+2C↓o
code:029A                 db 166h dup(   0)
code:0400 TRACK16         trackState <0>                              ; DATA XREF: INT_FUNC:findEmptyTrack↓o
code:0400                                                             ; INT_FUNC:setTempo↓o
code:0400                                                             ; INIT_TRACKS+17↓o
code:0400                                                             ; PLAY_INTERRUPT+DE↓o
code:0400                                                             ; PLAY_INTERRUPT+129↓o
code:0440 TRACK15         trackState <0>
code:0480 TRACK14         trackState <0>
code:04C0 TRACK13         trackState <0>
code:0500 TRACK12         trackState <0>
code:0540 TRACK11         trackState <0>
code:0580 TRACK10         trackState <0>
code:05C0 TRACK09         trackState <0>
code:0600 TRACK08         trackState <0>
code:0640 TRACK07         trackState <0>
code:0680 TRACK06         trackState <0>
code:06C0 TRACK05         trackState <0>
code:0700 TRACK04         trackState <0>
code:0740 TRACK03         trackState <0>
code:0780 TRACK02         trackState <0>
code:07C0 TRACK01         trackState <0>                              ; DATA XREF: STPBGM+2↓o
code:07C0                                                             ; STPALL+2↓o
code:0800 ; =============== S U B R O U T I N E =======================================
code:0800 proc            INT_FUNC far                                ; DATA XREF: ENTRYPOINT+1E↓o
code:0800                                                             ; ENTRYPOINT+12D↓o
code:0800 ; FUNCTION CHUNK AT code:0869 SIZE 00000041 BYTES
code:0800 ; FUNCTION CHUNK AT code:08AF SIZE 0000001E BYTES
code:0800 ; FUNCTION CHUNK AT code:08D5 SIZE 00000116 BYTES
code:0800 ; FUNCTION CHUNK AT code:09F3 SIZE 00000013 BYTES
code:0800 ; FUNCTION CHUNK AT code:0A08 SIZE 0000006A BYTES
code:0800                 cli
code:0801                 push    di
code:0802                 push    si
code:0803                 push    es
code:0804                 push    bx
code:0805                 push    cx
code:0806                 push    dx
code:0807                 push    ds
code:0808                 push    ax
code:0809                 and     ah, 00011111b
code:080C                 rol     ah, 1
code:080E                 mov     al, ah
code:0810                 mov     ah, 0
code:0812                 mov     si, offset funcJumpTable            ; switch 32 cases
code:0815                 add     si, ax
code:0817                 mov     ax, cs
code:0819                 mov     ds, ax
code:081B                 mov     es, ax
code:081D                 assume es:code
code:081D                 pop     ax
code:081E                 jmp     [word ptr si]
code:0820 ; ---------------------------------------------------------------------------
code:0820 INT_FUNC_END:                                               ; CODE XREF: INT_FUNC+6F↓j
code:0820                                                             ; INT_FUNC+74↓j
code:0820                                                             ; INT_FUNC+7E↓j
code:0820                                                             ; INT_FUNC+A7↓j
code:0820                                                             ; INT_FUNC+B7↓j
code:0820                                                             ; code:08D2↓j
code:0820                                                             ; INT_FUNC+F4↓j
code:0820                                                             ; INT_FUNC+10C↓j
code:0820                                                             ; INT_FUNC+127↓j
code:0820                                                             ; INT_FUNC+142↓j
code:0820                                                             ; INT_FUNC+15A↓j
code:0820                                                             ; INT_FUNC:dummy↓j
code:0820                                                             ; INT_FUNC:__pause_skip↓j
code:0820                                                             ; INT_FUNC:__unpause_skip↓j
code:0820                                                             ; INT_FUNC+198↓j
code:0820                                                             ; INT_FUNC+19E↓j
code:0820                                                             ; INT_FUNC+1A6↓j
code:0820                                                             ; INT_FUNC+1E8↓j
code:0820                                                             ; INT_FUNC+203↓j
code:0820                                                             ; INT_FUNC+20B↓j
code:0820                                                             ; INT_FUNC+211↓j
code:0820                                                             ; INT_FUNC+217↓j
code:0820                                                             ; INT_FUNC+21D↓j
code:0820                                                             ; INT_FUNC+22B↓j
code:0820                                                             ; INT_FUNC+239↓j
code:0820                                                             ; INT_FUNC+249↓j
code:0820                                                             ; INT_FUNC+259↓j
code:0820                                                             ; INT_FUNC+263↓j
code:0820                                                             ; INT_FUNC+269↓j
code:0820                                                             ; INT_FUNC+26F↓j
code:0820                 pop     ds
code:0821                 pop     dx
code:0822                 pop     cx
code:0823                 pop     bx
code:0824                 pop     es
code:0825                 assume es:nothing
code:0825                 pop     si
code:0826                 pop     di
code:0827                 sti
code:0828                 iret
code:0828 endp            INT_FUNC ; sp-analysis failed
code:0828 ; ---------------------------------------------------------------------------
code:0829 funcJumpTable   dw offset playBgm                           ; DATA XREF: INT_FUNC+12↑o
code:082B                 dw offset playSfx                           ; jump table for switch statement
code:082D                 dw offset stopBgm
code:082F                 dw offset stopAll
code:0831                 dw offset fade
code:0833                 dw offset dummy
code:0835                 dw offset pause
code:0837                 dw offset unpause
code:0839                 dw offset setStatus
code:083B                 dw offset loadData
code:083D                 dw offset getBgmVol
code:083F                 dw offset setBgmVol
code:0841                 dw offset getFmVol
code:0843                 dw offset setFmVol
code:0845                 dw offset speedUp
code:0847                 dw offset slowDown
code:0849                 dw offset setDebug
code:084B                 dw offset unsetDebug
code:084D                 dw offset getTickStatus
code:084F                 dw offset setStatus
code:0851                 dw offset resetSeqFeedback
code:0853                 dw offset get27e
code:0855                 dw offset findEmptyTrack
code:0857                 dw offset setTempo
code:0859                 dw offset getTrack13NoteOffset
code:085B                 dw offset setTrack13NoteOffset
code:085D                 dw offset loc_0871
code:085F                 dw offset setStatus
code:0861                 dw offset loc_0869
code:0863                 dw offset setStatus
code:0865                 dw offset setStatus
code:0867                 dw offset setStatus
code:0869 ; ---------------------------------------------------------------------------
code:0869 ; START OF FUNCTION CHUNK FOR INT_FUNC
code:0869 loc_0869:                                                   ; CODE XREF: INT_FUNC+12↑j
code:0869                                                             ; DATA XREF: code:funcJumpTable↑o
code:0869                 mov     ax, [TIMER_PERIOD]                  ; jumptable 0000000000000812 case 28
code:086C                 call    SETTIM
code:086F                 jmp     short INT_FUNC_END
code:0871 ; ---------------------------------------------------------------------------
code:0871 loc_0871:                                                   ; CODE XREF: INT_FUNC+12↑j
code:0871                                                             ; DATA XREF: code:funcJumpTable↑o
code:0871                 mov     ax, 2                               ; jumptable 0000000000000812 case 26
code:0874                 jmp     short INT_FUNC_END
code:0876 ; ---------------------------------------------------------------------------
code:0876 playBgm:                                                    ; CODE XREF: INT_FUNC+12↑j
code:0876                                                             ; DATA XREF: code:funcJumpTable↑o
code:0876                 cmp     al, [TOTAL_SONGS]                   ; jumptable 0000000000000812 case 0
code:087A                 jb      short loc_0880
code:087C playFail:                                                   ; CODE XREF: INT_FUNC+A0↓j
code:087C                                                             ; INT_FUNC+CB↓j
code:087C                 mov     al, 0FFh
code:087E                 jmp     short INT_FUNC_END
code:0880 ; ---------------------------------------------------------------------------
code:0880 loc_0880:                                                   ; CODE XREF: INT_FUNC+7A↑j
code:0880                 push    ax
code:0881                 mov     [FADE_IN_PROGRESS], 0
code:0886                 mov     [FADE_VOL_MOD], 0
code:088B                 call    STPBGM
code:088E                 pop     ax
code:088F                 rol     al, 1
code:0891                 mov     ah, 0
code:0893                 mov     si, [ptrSNG_TBL_PTR]
code:0897                 add     si, ax
code:0899                 mov     ax, [si]
code:089B                 mov     si, ax
code:089D                 inc     ax
code:089E ; Check if track track_ptr is set to FFFFh
code:089E                 jnz     short _do_init
code:08A0                 jmp     short playFail
code:08A2 ; ---------------------------------------------------------------------------
code:08A2 _do_init:                                                   ; CODE XREF: INT_FUNC+9E↑j
code:08A2                                                             ; INT_FUNC+C9↓j
code:08A2                 call    INIT_TRACKS
code:08A5                 mov     al, 0
code:08A7                 jmp     INT_FUNC_END
code:08A7 ; END OF FUNCTION CHUNK FOR INT_FUNC
code:08A7 ; ---------------------------------------------------------------------------
code:08AA                 db 0AFh, 87h, 00h, 00h, 82h                 ; Assembly garbage?
code:08AF ; ---------------------------------------------------------------------------
code:08AF ; START OF FUNCTION CHUNK FOR INT_FUNC
code:08AF playSfx:                                                    ; CODE XREF: INT_FUNC+12↑j
code:08AF                                                             ; DATA XREF: code:funcJumpTable↑o
code:08AF                 cmp     al, [TOTAL_SONGS]                   ; jumptable 0000000000000812 case 1
code:08B3                 jb      short loc_08BA
code:08B5                 mov     al, 0FFh
code:08B7                 jmp     INT_FUNC_END
code:08BA ; ---------------------------------------------------------------------------
code:08BA loc_08BA:                                                   ; CODE XREF: INT_FUNC+B3↑j
code:08BA                 rol     al, 1
code:08BC                 mov     ah, 0
code:08BE                 mov     si, [ptrSNG_TBL_PTR]
code:08C2                 add     si, ax
code:08C4                 mov     ax, [si]
code:08C6                 mov     si, ax
code:08C8                 inc     ax
code:08C9                 jnz     short _do_init
code:08CB                 jmp     short playFail
code:08CB ; END OF FUNCTION CHUNK FOR INT_FUNC
code:08CD ; ---------------------------------------------------------------------------
code:08CD                 call    INIT_TRACKS
code:08D0                 mov     al, 0
code:08D2                 jmp     INT_FUNC_END
code:08D5 ; ---------------------------------------------------------------------------
code:08D5 ; START OF FUNCTION CHUNK FOR INT_FUNC
code:08D5 findEmptyTrack:                                             ; CODE XREF: INT_FUNC+12↑j
code:08D5                                                             ; DATA XREF: code:funcJumpTable↑o
code:08D5                 mov     di, offset TRACK16                  ; jumptable 0000000000000812 case 22
code:08D8                 mov     cx, 10h
code:08DB                 mov     ah, 0
code:08DD loop:                                                       ; CODE XREF: INT_FUNC+ED↓j
code:08DD                 mov     al, [di+trackState.output_channel]
code:08DF                 and     al, al
code:08E1                 js      short loc_08EF                      ; If track is disabled it will be FF
code:08E3                 mov     al, [di+trackState.is_bgm_track]
code:08E6                 and     al, al
code:08E8                 jnz     short loc_08F1
code:08EA                 add     di, trackStateSize
code:08ED                 loop    loop
code:08EF loc_08EF:                                                   ; CODE XREF: INT_FUNC+E1↑j
code:08EF                 mov     ah, 0FFh
code:08F1 loc_08F1:                                                   ; CODE XREF: INT_FUNC+E8↑j
code:08F1                 mov     al, [di+trackState.tempo]
code:08F4                 jmp     INT_FUNC_END
code:08F7 ; ---------------------------------------------------------------------------
code:08F7 setTempo:                                                   ; CODE XREF: INT_FUNC+12↑j
code:08F7                                                             ; DATA XREF: code:funcJumpTable↑o
code:08F7                 mov     di, offset TRACK16                  ; jumptable 0000000000000812 case 23
code:08FA                 mov     cx, 10h
code:08FD _loop:                                                      ; CODE XREF: INT_FUNC+10A↓j
code:08FD                 mov     ah, [di+trackState.is_bgm_track]
code:0900                 and     al, al
code:0902                 jz      short loc_0907
code:0904                 mov     [di+trackState.tempo], al
code:0907 loc_0907:                                                   ; CODE XREF: INT_FUNC+102↑j
code:0907                 add     di, trackStateSize
code:090A                 loop    _loop
code:090C                 jmp     INT_FUNC_END
code:090F ; ---------------------------------------------------------------------------
code:090F stopBgm:                                                    ; CODE XREF: INT_FUNC+12↑j
code:090F                                                             ; DATA XREF: code:funcJumpTable↑o
code:090F                 mov     [word ptr cs:CHAN_VOLUMES], 0       ; jumptable 0000000000000812 case 2
code:0916                 mov     [word ptr cs:CHAN_VOLUMES+2], 0
code:091D                 mov     [word ptr cs:CHAN_VOLUMES+4], 0
code:0924                 call    STPBGM
code:0927                 jmp     INT_FUNC_END
code:092A ; ---------------------------------------------------------------------------
code:092A stopAll:                                                    ; CODE XREF: INT_FUNC+12↑j
code:092A                                                             ; DATA XREF: code:funcJumpTable↑o
code:092A                 mov     [word ptr cs:CHAN_VOLUMES], 0       ; jumptable 0000000000000812 case 3
code:0931                 mov     [word ptr cs:CHAN_VOLUMES+2], 0
code:0938                 mov     [word ptr cs:CHAN_VOLUMES+4], 0
code:093F                 call    STPALL
code:0942                 jmp     INT_FUNC_END
code:0945 ; ---------------------------------------------------------------------------
code:0945 fade:                                                       ; CODE XREF: INT_FUNC+12↑j
code:0945                                                             ; DATA XREF: code:funcJumpTable↑o
code:0945                 mov     [FADE_SPEED], al                    ; jumptable 0000000000000812 case 4
code:0948                 mov     [FADE_DONE], 0
code:094D                 mov     [FADE_IN_PROGRESS], 0FFh
code:0952                 mov     al, [ENGINE_FLAGS]
code:0955                 or      al, e_fade
code:0957                 mov     [ENGINE_FLAGS], al
code:095A                 jmp     INT_FUNC_END
code:095D ; ---------------------------------------------------------------------------
code:095D dummy:                                                      ; CODE XREF: INT_FUNC+12↑j
code:095D                                                             ; DATA XREF: code:funcJumpTable↑o
code:095D                 jmp     INT_FUNC_END                        ; jumptable 0000000000000812 case 5
code:0960 ; ---------------------------------------------------------------------------
code:0960 pause:                                                      ; CODE XREF: INT_FUNC+12↑j
code:0960                                                             ; DATA XREF: code:funcJumpTable↑o
code:0960                 mov     al, [PAUSED]                        ; jumptable 0000000000000812 case 6
code:0963                 and     al, al
code:0965                 jnz     short __pause_skip
code:0967                 mov     [PAUSED], TRUE
code:096C                 mov     al, [ENGINE_FLAGS]
code:096F                 or      al, e_paused
code:0971                 mov     [ENGINE_FLAGS], al
code:0974                 call    AKEYOF
code:0977 __pause_skip:                                               ; CODE XREF: INT_FUNC+165↑j
code:0977                 jmp     INT_FUNC_END
code:097A ; ---------------------------------------------------------------------------
code:097A unpause:                                                    ; CODE XREF: INT_FUNC+12↑j
code:097A                                                             ; DATA XREF: code:funcJumpTable↑o
code:097A                 mov     al, [PAUSED]                        ; jumptable 0000000000000812 case 7
code:097D                 and     al, al
code:097F                 jz      short __unpause_skip
code:0981                 mov     [PAUSED], 0
code:0986                 mov     al, [ENGINE_FLAGS]
code:0989                 and     al, not (e_paused)
code:098B                 mov     [ENGINE_FLAGS], al
code:098E __unpause_skip:                                             ; CODE XREF: INT_FUNC+17F↑j
code:098E                 jmp     INT_FUNC_END
code:0991 ; ---------------------------------------------------------------------------
code:0991 setStatus:                                                  ; CODE XREF: INT_FUNC+12↑j
code:0991                                                             ; DATA XREF: code:funcJumpTable↑o
code:0991                 mov     ah, [ENGINE_FLAGS]                  ; jumptable 0000000000000812 cases 8,19,27,29-31
code:0995                 mov     al, [SEQ_CUSTOM]
code:0998                 jmp     INT_FUNC_END
code:099B ; ---------------------------------------------------------------------------
code:099B get27e:                                                     ; CODE XREF: INT_FUNC+12↑j
code:099B                                                             ; DATA XREF: code:funcJumpTable↑o
code:099B                 mov     al, [SSG_MIXER_REG]                 ; jumptable 0000000000000812 case 21
code:099E                 jmp     INT_FUNC_END
code:09A1 ; ---------------------------------------------------------------------------
code:09A1 resetSeqFeedback:                                           ; CODE XREF: INT_FUNC+12↑j
code:09A1                                                             ; DATA XREF: code:funcJumpTable↑o
code:09A1                 mov     [SEQ_CUSTOM], 0                     ; jumptable 0000000000000812 case 20
code:09A6                 jmp     INT_FUNC_END
code:09A9 ; ---------------------------------------------------------------------------
code:09A9 loadData:                                                   ; CODE XREF: INT_FUNC+12↑j
code:09A9                                                             ; DATA XREF: code:funcJumpTable↑o
code:09A9                 push    dx                                  ; jumptable 0000000000000812 case 9
code:09AA                 call    AKEYOF
code:09AD                 pop     dx
code:09AE                 pop     ds
code:09AF                 push    ds
code:09B0                 mov     ax, 3D00h
code:09B3                 int     21h                                 ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
code:09B3                                                             ; DS:DX -> ASCIZ filename
code:09B3                                                             ; AL = access mode
code:09B3                                                             ; 0 - read
code:09B5                 jb      short loc_09FE
code:09B7                 mov     [cs:DATA_HANDLE], ax
code:09BB                 mov     bx, ax
code:09BD                 mov     dx, offset ptrFM_TONE_TBL
code:09C0                 mov     cx, 0C000h
code:09C3                 mov     ax, cs
code:09C5                 mov     ds, ax
code:09C7                 mov     ah, 3Fh
code:09C9                 int     21h                                 ; DOS - 2+ - READ FROM FILE WITH HANDLE
code:09C9                                                             ; BX = file handle, CX = number of bytes to read
code:09C9                                                             ; DS:DX -> buffer
code:09CB                 jb      short loc_09F3
code:09CD                 push    ax
code:09CE                 mov     ah, 3Eh
code:09D0                 mov     bx, [cs:DATA_HANDLE]
code:09D5                 int     21h                                 ; DOS - 2+ - CLOSE A FILE WITH HANDLE
code:09D5                                                             ; BX = file handle
code:09D7                 pop     ax
code:09D8                 push    ax
code:09D9                 call    SYSINI
code:09DC                 mov     [cs:byte_0104], 0
code:09E2                 pop     ax
code:09E3                 mov     ah, al
code:09E5                 mov     al, 0
code:09E7                 clc
code:09E8                 jmp     INT_FUNC_END
code:09E8 ; END OF FUNCTION CHUNK FOR INT_FUNC
code:09E8 ; ---------------------------------------------------------------------------
code:09EB                 db  8Ah,0E0h,0B0h, 02h,0F9h,0E9h, 2Dh,0FEh
code:09F3 ; ---------------------------------------------------------------------------
code:09F3 ; START OF FUNCTION CHUNK FOR INT_FUNC
code:09F3 loc_09F3:                                                   ; CODE XREF: INT_FUNC+1CB↑j
code:09F3                 push    ax
code:09F4                 mov     ah, 3Eh
code:09F6                 mov     bx, [cs:DATA_HANDLE]
code:09FB                 int     21h                                 ; DOS - 2+ - CLOSE A FILE WITH HANDLE
code:09FB                                                             ; BX = file handle
code:09FD                 pop     ax
code:09FE loc_09FE:                                                   ; CODE XREF: INT_FUNC+1B5↑j
code:09FE                 mov     ah, al
code:0A00                 mov     al, 1
code:0A02                 stc
code:0A03                 jmp     INT_FUNC_END
code:0A03 ; END OF FUNCTION CHUNK FOR INT_FUNC
code:0A03 ; ---------------------------------------------------------------------------
code:0A06 DATA_HANDLE     dw 0                                        ; DATA XREF: INT_FUNC+1B7↑w
code:0A06                                                             ; INT_FUNC+1D0↑r
code:0A06                                                             ; INT_FUNC+1F6↑r
code:0A08 ; ---------------------------------------------------------------------------
code:0A08 ; START OF FUNCTION CHUNK FOR INT_FUNC
code:0A08 getBgmVol:                                                  ; CODE XREF: INT_FUNC+12↑j
code:0A08                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A08                 mov     al, [BGM_VOL_MOD]                   ; jumptable 0000000000000812 case 10
code:0A0B                 jmp     INT_FUNC_END
code:0A0E ; ---------------------------------------------------------------------------
code:0A0E setBgmVol:                                                  ; CODE XREF: INT_FUNC+12↑j
code:0A0E                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A0E                 mov     [BGM_VOL_MOD], al                   ; jumptable 0000000000000812 case 11
code:0A11                 jmp     INT_FUNC_END
code:0A14 ; ---------------------------------------------------------------------------
code:0A14 getFmVol:                                                   ; CODE XREF: INT_FUNC+12↑j
code:0A14                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A14                 mov     al, [SSG_VOL_MOD]                   ; jumptable 0000000000000812 case 12
code:0A17                 jmp     INT_FUNC_END
code:0A1A ; ---------------------------------------------------------------------------
code:0A1A setFmVol:                                                   ; CODE XREF: INT_FUNC+12↑j
code:0A1A                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A1A                 mov     [SSG_VOL_MOD], al                   ; jumptable 0000000000000812 case 13
code:0A1D                 jmp     INT_FUNC_END
code:0A20 ; ---------------------------------------------------------------------------
code:0A20 ; Affects timer itself, see setTempo
code:0A20 ; for adjusting music speed
code:0A20 speedUp:                                                    ; CODE XREF: INT_FUNC+12↑j
code:0A20                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A20                 mov     ax, [TIMER_PERIOD]                  ; jumptable 0000000000000812 case 14
code:0A20
code:0A20
code:0A23                 rol     ax, 1
code:0A25                 mov     [TIMER_PERIOD], ax
code:0A28                 call    SETTIM
code:0A2B                 jmp     INT_FUNC_END
code:0A2E ; ---------------------------------------------------------------------------
code:0A2E slowDown:                                                   ; CODE XREF: INT_FUNC+12↑j
code:0A2E                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A2E                 mov     ax, [TIMER_PERIOD]                  ; jumptable 0000000000000812 case 15
code:0A31                 ror     ax, 1
code:0A33                 mov     [TIMER_PERIOD], ax
code:0A36                 call    SETTIM
code:0A39                 jmp     INT_FUNC_END
code:0A3C ; ---------------------------------------------------------------------------
code:0A3C setDebug:                                                   ; CODE XREF: INT_FUNC+12↑j
code:0A3C                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A3C                 mov     [DEBUG], TRUE                       ; jumptable 0000000000000812 case 16
code:0A41                 mov     al, [ENGINE_FLAGS]
code:0A44                 or      al, e_debug
code:0A46                 mov     [ENGINE_FLAGS], al
code:0A49                 jmp     INT_FUNC_END
code:0A4C ; ---------------------------------------------------------------------------
code:0A4C unsetDebug:                                                 ; CODE XREF: INT_FUNC+12↑j
code:0A4C                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A4C                 mov     [DEBUG], FALSE                      ; jumptable 0000000000000812 case 17
code:0A51                 mov     al, [ENGINE_FLAGS]
code:0A54                 and     al, not (e_debug)
code:0A56                 mov     [ENGINE_FLAGS], al
code:0A59                 jmp     INT_FUNC_END
code:0A5C ; ---------------------------------------------------------------------------
code:0A5C getTickStatus:                                              ; CODE XREF: INT_FUNC+12↑j
code:0A5C                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A5C                 mov     al, [INT_CALL_COUNT]                ; jumptable 0000000000000812 case 18
code:0A5F                 mov     ah, [DEBUG]
code:0A63                 jmp     INT_FUNC_END
code:0A66 ; ---------------------------------------------------------------------------
code:0A66 getTrack13NoteOffset:                                       ; CODE XREF: INT_FUNC+12↑j
code:0A66                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A66                 mov     al, [TRACK13.n_offset_abs]          ; jumptable 0000000000000812 case 24
code:0A69                 jmp     INT_FUNC_END
code:0A6C ; ---------------------------------------------------------------------------
code:0A6C setTrack13NoteOffset:                                       ; CODE XREF: INT_FUNC+12↑j
code:0A6C                                                             ; DATA XREF: code:funcJumpTable↑o
code:0A6C                 mov     [TRACK13.n_offset_abs], al          ; jumptable 0000000000000812 case 25
code:0A6F                 jmp     INT_FUNC_END
code:0A6F ; END OF FUNCTION CHUNK FOR INT_FUNC
code:0A72 ; =============== S U B R O U T I N E =======================================
code:0A72 proc            INIT_TRACKS near                            ; CODE XREF: INT_FUNC:_do_init↑p
code:0A72                                                             ; code:08CD↑p
code:0A72                                                             ; PLAY_INTERRUPT+1D0↓p
code:0A72                                                             ; STPBGM+3A↓p
code:0A72                                                             ; STPALL+2E↓p
code:0A72                 mov     cl, [si]
code:0A74                 mov     ch, cl
code:0A76                 and     cl, 01111111b
code:0A79                 and     ch, 10000000b
code:0A7C                 inc     si
code:0A7D loop:                                                       ; CODE XREF: INIT_TRACKS+150↓j
code:0A7D                 push    cx
code:0A7E                 push    cx
code:0A7F                 mov     al, 0Fh
code:0A81                 sub     al, [si]
code:0A83                 inc     si
code:0A84                 mov     cl, trackStateSize
code:0A86                 mul     cl
code:0A88                 pop     cx
code:0A89                 add     ax, offset TRACK16
code:0A8C                 mov     di, ax
code:0A8E                 mov     al, [si]
code:0A90                 rol     al, 1
code:0A92                 jnb     short loc_0A97
code:0A94                 jmp     short loc_0AE1
code:0A96 ; ---------------------------------------------------------------------------
code:0A96                 nop
code:0A97 loc_0A97:                                                   ; CODE XREF: INIT_TRACKS+20↑j
code:0A97                 cmp     [di+trackState.output_channel], 7
code:0A9A                 jnb     short loc_0AE1
code:0A9C                 mov     al, [di+trackState.track_flags]
code:0A9F                 and     al, t_ssg_ioA or t_ssg_ioB
code:0AA1                 jz      short loc_0AA9
code:0AA3                 add     si, 0Bh
code:0AA6                 jmp     loc_0BBD
code:0AA9 ; ---------------------------------------------------------------------------
code:0AA9 loc_0AA9:                                                   ; CODE XREF: INIT_TRACKS+2F↑j
code:0AA9                 push    si
code:0AAA                 push    cx
code:0AAB                 cmp     [di+trackState.is_blocked], FALSE
code:0AAF                 jz      short loc_0AB4
code:0AB1                 jmp     short loc_0AD0
code:0AB3 ; ---------------------------------------------------------------------------
code:0AB3                 nop
code:0AB4 loc_0AB4:                                                   ; CODE XREF: INIT_TRACKS+3D↑j
code:0AB4                 cmp     [di+trackState.output_channel], 3
code:0AB7                 jb      short loc_0AC1
code:0AB9                 mov     al, 0
code:0ABB                 call    SETVOL
code:0ABE                 jmp     short loc_0AD0
code:0AC0 ; ---------------------------------------------------------------------------
code:0AC0                 nop
code:0AC1 loc_0AC1:                                                   ; CODE XREF: INIT_TRACKS+45↑j
code:0AC1                 mov     al, 0
code:0AC3                 call    SETTL
code:0AC6                 mov     al, OPN_KEY_ON_OFF
code:0AC8                 call    SFMADR                              ; AL=OPN_REG
code:0ACB                 mov     al, [di]
code:0ACD                 call    SFMDAT
code:0AD0 loc_0AD0:                                                   ; CODE XREF: INIT_TRACKS+3F↑j
code:0AD0                                                             ; INIT_TRACKS+4C↑j
code:0AD0                 mov     al, [di+trackState.output_channel]
code:0AD2                 mov     ah, 0
code:0AD4                 mov     si, offset CUR_INSTS
code:0AD7                 add     si, ax
code:0AD9                 mov     [byte ptr si], 0FFh
code:0ADC                 jmp     short loc_0ADF
code:0ADE ; ---------------------------------------------------------------------------
code:0ADE                 nop
code:0ADF loc_0ADF:                                                   ; CODE XREF: INIT_TRACKS+6A↑j
code:0ADF                 pop     cx
code:0AE0                 pop     si
code:0AE1 loc_0AE1:                                                   ; CODE XREF: INIT_TRACKS+22↑j
code:0AE1                                                             ; INIT_TRACKS+28↑j
code:0AE1                 mov     al, [si]
code:0AE3                 mov     [di+trackState.track_flags], al
code:0AE6                 inc     si
code:0AE7                 and     al, TrackFlags_20
code:0AE9                 mov     [PROC_DISABLED], al
code:0AEC                 mov     [di+trackState.is_bgm_track], ch
code:0AEF                 mov     al, [si]
code:0AF1                 mov     [di+trackState.volume], al
code:0AF4                 mov     [di+trackState.vcmd_volume], al
code:0AF7                 mov     [di+trackState.volume2], al
code:0AFA                 inc     si
code:0AFB                 mov     al, [si]
code:0AFD                 inc     si
code:0AFE                 push    si
code:0AFF                 rol     al, 1
code:0B01                 mov     ah, 0
code:0B03                 add     ax, [ptrVOL_ENV_TBL]
code:0B07                 mov     si, ax
code:0B09                 mov     ax, [si]
code:0B0B                 mov     [di+trackState.volume_env_ptr], ax
code:0B0E                 mov     [di+trackState.volume_env_pos], ax
code:0B11                 pop     si
code:0B12                 mov     al, [si]
code:0B14                 inc     si
code:0B15                 push    si
code:0B16                 rol     al, 1
code:0B18                 mov     ah, 0
code:0B1A                 add     ax, [ptrPITCH_ENV_TBL]
code:0B1E                 mov     si, ax
code:0B20                 mov     ax, [si]
code:0B22                 mov     [di+trackState.pitch_env_ptr], ax
code:0B25                 mov     [di+trackState.pitch_env_pos], ax
code:0B28                 pop     si
code:0B29                 mov     al, [si]
code:0B2B                 mov     [di+trackState.n_offset_abs], al
code:0B2E                 inc     si
code:0B2F                 mov     al, [si]
code:0B31                 mov     [di+trackState.tempo], al
code:0B34                 inc     si
code:0B35                 mov     al, [si]
code:0B37                 mov     [di], al
code:0B39                 inc     si
code:0B3A                 mov     ax, [si]
code:0B3C                 mov     [di+trackState.data_offset], ax
code:0B3F                 inc     si
code:0B40                 inc     si
code:0B41                 mov     ax, [si]
code:0B43                 mov     [di+trackState.instrument], al
code:0B46                 inc     si
code:0B47                 mov     ax, [si]
code:0B49                 inc     al
code:0B4B                 mov     [di+trackState.cycles_per_cmd], al
code:0B4E                 inc     si
code:0B4F                 mov     [di+trackState.flags], 0
code:0B53                 mov     [di+trackState.is_blocked], FALSE
code:0B57                 mov     [di+trackState.unused_1], 0
code:0B5B                 mov     [di+trackState.unused_0], 0
code:0B5F                 mov     [di+trackState.tempo_tick], 0
code:0B63                 mov     [di+trackState.tick_cycled], FALSE
code:0B67                 mov     [di+trackState.cycles_left], 1
code:0B6B                 mov     [di+trackState.koff_cycle], 2
code:0B6F                 mov     [di+trackState.n_offset_abs_vcmd], 0
code:0B73                 mov     [di+trackState.legato_enabled], FALSE
code:0B77                 mov     [di+trackState.fm3_enabled], FALSE
code:0B7B                 mov     [di+trackState.fade_in_progess], 0
code:0B7F                 mov     [di+trackState.note], 0
code:0B83                 mov     [di+trackState.fine_tune], 0
code:0B87                 mov     [di+trackState.unused_4], 0
code:0B8B                 mov     [di+trackState.porta_speed], 0
code:0B8F                 mov     [di+trackState.note_offset_rel], 0
code:0B93                 mov     [di+trackState.note_played_once], 0
code:0B97                 mov     [di+trackState.pitch_env_mult], 0
code:0B9B                 mov     [di+trackState.porta_finished], 0FFh
code:0B9F                 mov     [di+trackState.frequency], 0
code:0BA4                 mov     [di+trackState.porta_target_freq], 0
code:0BA9                 mov     [di+trackState.noise_env_val], 0
code:0BAD                 mov     [di+trackState.soft_drum_enabled], 0
code:0BB1                 mov     [di+trackState.drum_enabled], FALSE
code:0BB5                 mov     [di+trackState.ssg_drum_mode], 0
code:0BB9                 mov     [di+trackState.volume_env_restart_pos], 0
code:0BBD loc_0BBD:                                                   ; CODE XREF: INIT_TRACKS+34↑j
code:0BBD                 pop     cx
code:0BBE                 dec     cl
code:0BC0                 jz      short break
code:0BC2                 jmp     loop
code:0BC5 ; ---------------------------------------------------------------------------
code:0BC5 break:                                                      ; CODE XREF: INIT_TRACKS+14E↑j
code:0BC5                 retn
code:0BC5 endp            INIT_TRACKS
code:0BC5 ; ---------------------------------------------------------------------------
code:0BC6 aSysini         db '  SYSINI  '
code:0BD0 ; =============== S U B R O U T I N E =======================================
code:0BD0 proc            SYSINI near                                 ; CODE XREF: INT_FUNC+1D9↑p
code:0BD0                                                             ; ENTRYPOINT+138↓p
code:0BD0                                                             ; ENTRYPOINT+1CA↓p
code:0BD0                 cli
code:0BD1                 mov     ax, 52h
code:0BD4                 mov     [TIMER_PERIOD], ax
code:0BD7                 call    SETTIM
code:0BDA                 mov     [ENGINE_FLAGS], 00000000b
code:0BDF                 mov     [SEQ_CUSTOM], 0
code:0BE4                 mov     [FADE_IN_PROGRESS], FALSE
code:0BE9                 mov     [FADE_SPEED], 40h
code:0BEE                 mov     [FADE_VOL_MOD], 0
code:0BF3                 mov     [SFX_VOL_MOD], 0
code:0BF8                 mov     [BGM_VOL_MOD], 0
code:0BFD                 mov     [SSG_VOL_MOD], 0
code:0C02                 mov     [FM_ATTENUATION], 3
code:0C07                 mov     [CUR_INSTS], 0FFh
code:0C0C                 mov     [CUR_INSTS+1], 0FFh
code:0C11                 mov     [CUR_INSTS+2], 0FFh
code:0C16                 mov     [CUR_INSTS+3], 0FFh
code:0C1B                 mov     [FM3_OP1_FNUM], 0
code:0C20                 mov     [DEBUG], FALSE
code:0C25                 mov     [PROC_DISABLED], FALSE
code:0C2A                 mov     [PAUSED], FALSE
code:0C2F                 mov     [byte_0103], 0
code:0C34                 mov     [FM3EX_ENABLED], FALSE
code:0C39                 mov     [SSG_MIXER_REG], 0BFh
code:0C3E                 mov     [CUR_FNUM_OFFSET], 0FFFFh
code:0C44                 mov     si, [ptrSNG_TBL_PTR]
code:0C48                 mov     cl, 0FFh
code:0C4A loop:                                                       ; CODE XREF: SYSINI+82↓j
code:0C4A                 mov     ax, [si]
code:0C4C                 inc     si
code:0C4D                 inc     si
code:0C4E                 inc     cl
code:0C50                 and     ax, ax
code:0C52                 jnz     short loop
code:0C54                 mov     [TOTAL_SONGS], cl
code:0C58                 call    ALLCLR
code:0C5B                 retn
code:0C5B endp            SYSINI
code:0C5B ; ---------------------------------------------------------------------------
code:0C5C                 db 38Bh dup(   0)
code:0FE7 aBreak          db '  BREAK  '
code:0FF0 ; =============== S U B R O U T I N E =======================================
code:0FF0 proc            BREAK near
code:0FF0                 nop
code:0FF1                 retn
code:0FF1 endp            BREAK
code:0FF1 ; ---------------------------------------------------------------------------
code:0FF2                 align 10h
code:1000 ; =============== S U B R O U T I N E =======================================
code:1000 proc            PLAY_INTERRUPT far                          ; DATA XREF: ENTRYPOINT+AF↓o
code:1000                                                             ; ENTRYPOINT+BB↓o
code:1000                                                             ; ENTRYPOINT:loc_292A↓o
code:1000                 cli
code:1001                 mov     [cs:OLD_SP], sp
code:1006                 mov     [cs:OLD_SS], ss
code:100B                 mov     sp, cs
code:100D                 mov     ss, sp
code:100F                 mov     sp, (offset STACK+3Ch)
code:1012                 pushf
code:1013                 push    ax
code:1014                 push    bx
code:1015                 push    cx
code:1016                 push    dx
code:1017                 push    si
code:1018                 push    di
code:1019                 push    bp
code:101A                 push    ds
code:101B                 push    es
code:101C                 mov     ax, cs
code:101E                 mov     ds, ax
code:1020                 mov     al, [ENGINE_FLAGS]
code:1023                 and     al, e_unkb0 or e_unkb1 or e_fm3_disabled or e_debug or e_fade or e_paused
code:1025                 mov     [ENGINE_FLAGS], al
code:1028                 mov     dx, PC98_OPN_P0_ADDR
code:102B                 in      al, dx
code:102C                 mov     si, offset CALL_COUNTDOWN
code:102F                 inc     [byte ptr si]
code:1031                 cmp     [FM3EX_ENABLED], FALSE
code:1036                 jz      short _fm3_enabled
code:1038 _fm3_disabled:
code:1038                 mov     al, OPN_TIMER_CTRL
code:103A                 call    SFMADR                              ; AL=OPN_REG
code:103D                 mov     al, TIMERA_RUN or TIMERA_IRQ_EN or TIMERA_FLAG_CLR or TIMERB_FLAG_CLR or CH3_MODE_CSM
code:103F                 call    SFMDAT
code:1042                 mov     al, [ENGINE_FLAGS]
code:1045                 or      al, e_fm3_disabled
code:1047                 mov     [ENGINE_FLAGS], al
code:104A                 jmp     short loc_105F
code:104C ; ---------------------------------------------------------------------------
code:104C                 nop
code:104D _fm3_enabled:                                               ; CODE XREF: PLAY_INTERRUPT+36↑j
code:104D                 mov     al, OPN_TIMER_CTRL
code:104F                 call    SFMADR                              ; AL=OPN_REG
code:1052                 mov     al, TIMERA_RUN or TIMERA_IRQ_EN or TIMERA_FLAG_CLR or TIMERB_FLAG_CLR
code:1054                 call    SFMDAT
code:1057                 mov     al, [ENGINE_FLAGS]
code:105A                 and     al, not (e_fm3_disabled)
code:105C                 mov     [ENGINE_FLAGS], al
code:105F loc_105F:                                                   ; CODE XREF: PLAY_INTERRUPT+4A↑j
code:105F                 dec     [INT_CALL_COUNT]
code:1063                 cmp     [DEBUG], FALSE
code:1068                 jz      short loc_1072
code:106A                 mov     al, 0
code:106C                 out     PC98_GDC_PAL_INDEX, al              ; Interrupt Controller #2, 8259A
code:106E                 mov     al, 5
code:1070                 out     PC98_GDC_PAL_B, al                  ; Interrupt Controller #2, 8259A
code:1072 loc_1072:                                                   ; CODE XREF: PLAY_INTERRUPT+68↑j
code:1072                 mov     al, [byte_0103]
code:1075                 or      al, [PAUSED]
code:1079                 jz      short loc_107E
code:107B                 jmp     loc_11D8
code:107E ; ---------------------------------------------------------------------------
code:107E loc_107E:                                                   ; CODE XREF: PLAY_INTERRUPT+79↑j
code:107E                 mov     [word ptr CHAN_STATS], 0
code:1084                 mov     [word ptr CHAN_STATS+2], 0
code:108A                 mov     [word ptr CHAN_STATS+4], 0
code:1090                 mov     [word_027A], 0
code:1096                 mov     al, [FADE_IN_PROGRESS]
code:1099                 and     al, al
code:109B                 jnz     short loc_10A0
code:109D                 jmp     short loc_10D4
code:109F ; ---------------------------------------------------------------------------
code:109F                 nop
code:10A0 loc_10A0:                                                   ; CODE XREF: PLAY_INTERRUPT+9B↑j
code:10A0                 mov     al, [FADE_DONE]
code:10A3                 add     al, [FADE_SPEED]
code:10A7                 mov     [FADE_DONE], al
code:10AA                 jz      short loc_10B1
code:10AC                 jb      short loc_10B1
code:10AE                 jmp     short loc_10D4
code:10B0 ; ---------------------------------------------------------------------------
code:10B0                 nop
code:10B1 loc_10B1:                                                   ; CODE XREF: PLAY_INTERRUPT+AA↑j
code:10B1                                                             ; PLAY_INTERRUPT+AC↑j
code:10B1                 inc     [FADE_VOL_MOD]
code:10B5                 cmp     [FADE_VOL_MOD], 0Fh
code:10BA                 jz      short loc_10BF
code:10BC                 jmp     short loc_10D4
code:10BE ; ---------------------------------------------------------------------------
code:10BE                 nop
code:10BF loc_10BF:                                                   ; CODE XREF: PLAY_INTERRUPT+BA↑j
code:10BF                 mov     [FADE_IN_PROGRESS], FALSE
code:10C4                 call    STPBGM
code:10C7                 mov     [FADE_VOL_MOD], FALSE
code:10CC                 mov     al, [ENGINE_FLAGS]
code:10CF                 and     al, not (e_fade)
code:10D1                 mov     [ENGINE_FLAGS], al
code:10D4 loc_10D4:                                                   ; CODE XREF: PLAY_INTERRUPT+9D↑j
code:10D4                                                             ; PLAY_INTERRUPT+AE↑j
code:10D4                                                             ; PLAY_INTERRUPT+BC↑j
code:10D4                 mov     [SEQ_CUSTOM_IS_SET], FALSE
code:10D9                 mov     [FM3EX_ENABLED], FALSE
code:10DE                 mov     di, offset TRACK16
code:10E1                 mov     cx, 10h
code:10E4 loop:                                                       ; CODE XREF: PLAY_INTERRUPT+109↓j
code:10E4                 push    cx
code:10E5                 mov     al, [di+trackState.output_channel]
code:10E7                 and     al, al
code:10E9                 js      short track_no_chan
code:10EB                 mov     [NEED_VOL_UPDATE], FALSE
code:10F0                 call    PFADE
code:10F3                 call    PLAY
code:10F6                 call    SGDRUM
code:10F9                 call    NOIADD                              ; Sets noise period
code:10FC                 call    PPORT                               ; Processes portamento
code:10FF                 call    SOFTVB
code:1102                 call    SOFTEV
code:1105 track_no_chan:                                              ; CODE XREF: PLAY_INTERRUPT+E9↑j
code:1105                 pop     cx
code:1106                 add     di, trackStateSize
code:1109                 loop    loop
code:110B                 mov     [DRUM_TRACK_FLAGS], not (t_ssg_ioA)
code:1110                 mov     [IS_SFX_PLAYING], FALSE
code:1115                 mov     [SSG_STATS], 0FFh
code:111A                 mov     [SSG_STATS+1], 0FFh
code:111F                 mov     [SSG_STATS+2], 0FFh
code:1124                 mov     [SSG_STATS+3], 0FFh
code:1129                 mov     di, offset TRACK16
code:112C                 mov     cx, 10h
code:112F loop_112F:                                                  ; CODE XREF: PLAY_INTERRUPT+198↓j
code:112F                 push    cx
code:1130                 mov     al, [di+trackState.output_channel]
code:1132                 and     al, al
code:1134                 js      short _is_ssg
code:1136                 cmp     al, 3
code:1138                 jb      short _is_ssg
code:113A                 push    ax
code:113B                 sub     al, 3
code:113D                 mov     ah, 0
code:113F                 add     ax, offset SSG_STATS
code:1142                 mov     si, ax
code:1144                 pop     ax
code:1145                 cmp     [byte ptr si], 0FFh
code:1148                 jnz     short _is_ssg
code:114A                 mov     ah, [di+trackState.track_flags]
code:114D                 and     ah, t_noise
code:1150                 jz      short loc_1161
code:1152                 cmp     [IS_SFX_PLAYING], FALSE
code:1157                 jz      short loc_115C
code:1159                 jmp     short _is_ssg
code:115B ; ---------------------------------------------------------------------------
code:115B                 nop
code:115C loc_115C:                                                   ; CODE XREF: PLAY_INTERRUPT+157↑j
code:115C                 mov     [IS_SFX_PLAYING], TRUE
code:1161 loc_1161:                                                   ; CODE XREF: PLAY_INTERRUPT+150↑j
code:1161                 mov     [si], al
code:1163                 cmp     [di+trackState.note], 0
code:1167                 jz      short _is_ssg
code:1169                 cmp     [di+trackState.vcmd_volume], 0
code:116D                 jz      short _is_ssg
code:116F                 mov     ah, [di+trackState.track_flags]
code:1172                 mov     al, 11111111b
code:1174                 ror     ah, 1                               ; checks t.tone, b0
code:1176                 jnb     short _no_tone                      ; checks t.noise, b1
code:1178                 and     al, not (t_tone)
code:117A _no_tone:                                                   ; CODE XREF: PLAY_INTERRUPT+176↑j
code:117A                 ror     ah, 1                               ; checks t.noise, b1
code:117C                 jnb     short _no_noise
code:117E                 and     al, not (TrackFlags_8)
code:1180 _no_noise:                                                  ; CODE XREF: PLAY_INTERRUPT+17C↑j
code:1180                 mov     ah, [di+trackState.output_channel]
code:1182                 sub     ah, 3
code:1185                 jz      short _is_fm
code:1187 loc_1187:                                                   ; CODE XREF: PLAY_INTERRUPT+18B↓j
code:1187                 rol     al, 1
code:1189                 dec     ah
code:118B                 jnz     short loc_1187
code:118D _is_fm:                                                     ; CODE XREF: PLAY_INTERRUPT+185↑j
code:118D                 and     al, [DRUM_TRACK_FLAGS]
code:1191                 mov     [DRUM_TRACK_FLAGS], al
code:1194 _is_ssg:                                                    ; CODE XREF: PLAY_INTERRUPT+134↑j
code:1194                                                             ; PLAY_INTERRUPT+138↑j
code:1194                                                             ; PLAY_INTERRUPT+148↑j
code:1194                                                             ; PLAY_INTERRUPT+159↑j
code:1194                                                             ; PLAY_INTERRUPT+167↑j
code:1194                                                             ; PLAY_INTERRUPT+16D↑j
code:1194                 pop     cx
code:1195                 add     di, trackStateSize
code:1198                 loop    loop_112F
code:119A                 mov     al, [DRUM_TRACK_FLAGS]
code:119D                 and     al, not (t_ssg_ioA or t_ssg_ioB)
code:119F                 or      al, t_ssg_ioB
code:11A1                 cmp     al, [SSG_MIXER_REG]
code:11A5                 jz      short loc_11B4
code:11A7                 mov     [SSG_MIXER_REG], al
code:11AA                 push    ax
code:11AB                 mov     al, SSG_MIXER_ENABLE
code:11AD                 call    SGADR
code:11B0                 pop     ax
code:11B1                 call    SGDAT
code:11B4 loc_11B4:                                                   ; CODE XREF: PLAY_INTERRUPT+1A5↑j
code:11B4                 mov     si, offset SONG_NUMBER_OFFSETS
code:11B7                 mov     cx, 4
code:11BA _loop_11ba:                                                 ; CODE XREF: PLAY_INTERRUPT+1D6↓j
code:11BA                 push    cx
code:11BB                 push    si
code:11BC                 mov     al, [si]
code:11BE                 and     al, al
code:11C0                 jz      short _skip_init
code:11C2                 rol     al, 1
code:11C4                 mov     ah, 0
code:11C6                 mov     si, [ptrSNG_TBL_PTR]
code:11CA                 add     si, ax
code:11CC                 mov     ax, [si]
code:11CE                 mov     si, ax
code:11D0                 call    INIT_TRACKS
code:11D3 _skip_init:                                                 ; CODE XREF: PLAY_INTERRUPT+1C0↑j
code:11D3                 pop     si
code:11D4                 pop     cx
code:11D5                 inc     si
code:11D6                 loop    _loop_11ba
code:11D8 loc_11D8:                                                   ; CODE XREF: PLAY_INTERRUPT+7B↑j
code:11D8                 mov     al, PIC_IR0 or PIC_IR1 or PIC_IR3
code:11DA                 out     PC98_PIC_MASTER_CMD, al
code:11DC                 nop
code:11DD                 in      al, PC98_PIC_MASTER_CMD
code:11DF                 test    al, PIC_POLL_PENDING
code:11E1                 jnz     short loc_11EA
code:11E3 loc_11E3:                                                   ; CODE XREF: PLAY_INTERRUPT+1F7↓j
code:11E3                 mov     al, PIC_IR5
code:11E5                 out     PC98_PIC_MASTER_CMD, al
code:11E7                 jmp     short loc_11F9
code:11E9 ; ---------------------------------------------------------------------------
code:11E9                 nop
code:11EA loc_11EA:                                                   ; CODE XREF: PLAY_INTERRUPT+1E1↑j
code:11EA                 mov     al, PIC_IR5
code:11EC                 out     PC98_PIC_SLAVE_CMD, al              ; We are done with int5
code:11EE                 mov     al, PIC_IR0 or PIC_IR1 or PIC_IR3
code:11F0                 out     PC98_PIC_SLAVE_CMD, al              ; Actually, with Int 0, 1, 3 too
code:11F2                 nop
code:11F3                 in      al, PC98_PIC_SLAVE_CMD              ; ;;;
code:11F5                 or      al, al
code:11F7                 jz      short loc_11E3
code:11F9 loc_11F9:                                                   ; CODE XREF: PLAY_INTERRUPT+1E7↑j
code:11F9                 cmp     [DEBUG], FALSE
code:11FE                 jz      short loc_1207
code:1200                 mov     al, 00h
code:1202                 out     PC98_GDC_PAL_INDEX, al
code:1204                 nop
code:1205                 out     PC98_GDC_PAL_B, al
code:1207 loc_1207:                                                   ; CODE XREF: PLAY_INTERRUPT+1FE↑j
code:1207                 pop     es
code:1208                 pop     ds
code:1209                 pop     bp
code:120A                 pop     di
code:120B                 pop     si
code:120C                 pop     dx
code:120D                 pop     cx
code:120E                 pop     bx
code:120F                 pop     ax
code:1210                 popf
code:1211                 mov     sp, [cs:OLD_SP]
code:1216                 mov     ss, [cs:OLD_SS]
code:121B                 iret
code:121B endp            PLAY_INTERRUPT
code:121B ; ---------------------------------------------------------------------------
code:121C                 dw 0
code:121E OLD_SP          dw 0                                        ; DATA XREF: PLAY_INTERRUPT+1↑w
code:121E                                                             ; PLAY_INTERRUPT+211↑r
code:1220 OLD_SS          dw 0                                        ; DATA XREF: PLAY_INTERRUPT+6↑w
code:1220                                                             ; PLAY_INTERRUPT+216↑r
code:1222 STACK           dw 1Fh dup(     0)
code:1260                 dw 0
code:1262 aSgdrum         db '  SGDRUM  '
code:126C ; =============== S U B R O U T I N E =======================================
code:126C proc            SGDRUM near                                 ; CODE XREF: PLAY_INTERRUPT+F6↑p
code:126C seq_buf = si
code:126C                 cmp     [di+trackState.ssg_drum_mode], 0
code:1270                 jnz     short is_enabled
code:1272                 retn
code:1273 ; ---------------------------------------------------------------------------
code:1273 is_enabled:                                                 ; CODE XREF: SGDRUM+4↑j
code:1273                 cmp     [di+trackState.output_channel], 3
code:1276                 jnb     short is_ssg
code:1278                 retn
code:1279 ; ---------------------------------------------------------------------------
code:1279 is_ssg:                                                     ; CODE XREF: SGDRUM+A↑j
code:1279                 cmp     [di+trackState.is_blocked], 0
code:127D                 jz      short not_blocked
code:127F                 retn
code:1280 ; ---------------------------------------------------------------------------
code:1280 not_blocked:                                                ; CODE XREF: SGDRUM+11↑j
code:1280                 mov     seq_buf, [DRUM_MASK_SEQ_PTR]
code:1284 loop:                                                       ; CODE XREF: SGDRUM+1F↓j
code:1284                 mov     al, [seq_buf]
code:1286                 cmp     al, 0FFh
code:1288                 jnz     short seq_not_finished
code:128A                 dec     seq_buf
code:128B                 jmp     short loop
code:128D ; ---------------------------------------------------------------------------
code:128D seq_not_finished:                                           ; CODE XREF: SGDRUM+1C↑j
code:128D                 inc     seq_buf
code:128E                 mov     [DRUM_MASK_SEQ_PTR], seq_buf
code:1292 ; Read track flags, only least 2 bits are interesting
code:1292 ; b0 defines melodic tone and b1 for noise period
code:1292 ; Mask sequence determines if we are going to play
code:1292 ; tone or nose.
code:1292                 mov     ah, [di+trackState.track_flags]
code:1295                 and     ah, not (t_tone or t_noise)
code:1298                 and     al, t_tone or t_noise
code:129A                 or      al, ah
code:129C                 mov     [di+trackState.track_flags], al
code:129F                 mov     seq_buf, [NOISE_PERIOD_SEQ_PTR]
code:12A3 loop_:                                                      ; CODE XREF: SGDRUM+3E↓j
code:12A3                 mov     al, [seq_buf]
code:12A5                 cmp     al, 0FFh                            ; Find last sequence value
code:12A7                 jnz     short loc_12AC
code:12A9                 dec     seq_buf
code:12AA                 jmp     short loop_
code:12AC ; ---------------------------------------------------------------------------
code:12AC loc_12AC:                                                   ; CODE XREF: SGDRUM+3B↑j
code:12AC                 inc     seq_buf
code:12AD                 mov     [NOISE_PERIOD_SEQ_PTR], seq_buf
code:12B1                 mov     [di+trackState.noise_env_val], al
code:12B4                 mov     [di+trackState.soft_drum_enabled], 0
code:12B8                 push    ax
code:12B9                 mov     al, SSG_NOISE_PERIOD
code:12BB                 call    SGADR
code:12BE                 pop     ax
code:12BF                 call    SGDAT
code:12C2                 retn
code:12C2 endp            SGDRUM
code:12C2 ; ---------------------------------------------------------------------------
code:12C3 aNoiadd         db '  NOIADD  '
code:12CD ; =============== S U B R O U T I N E =======================================
code:12CD ; Sets noise period
code:12CD proc            NOIADD near                                 ; CODE XREF: PLAY_INTERRUPT+F9↑p
code:12CD                 cmp     [di+trackState.output_channel], 3
code:12D0                 jnb     short is_ssg
code:12D2                 retn
code:12D3 ; ---------------------------------------------------------------------------
code:12D3 is_ssg:                                                     ; CODE XREF: NOIADD+3↑j
code:12D3                 cmp     [di+trackState.is_blocked], 0
code:12D7                 jz      short is_enabled
code:12D9                 retn
code:12DA ; ---------------------------------------------------------------------------
code:12DA is_enabled:                                                 ; CODE XREF: NOIADD+A↑j
code:12DA                 mov     ah, [di+trackState.soft_drum_enabled]
code:12DD                 and     ah, ah
code:12DF                 jnz     short loc_12E2
code:12E1                 retn
code:12E2 ; ---------------------------------------------------------------------------
code:12E2 loc_12E2:                                                   ; CODE XREF: NOIADD+12↑j
code:12E2                 mov     al, SSG_NOISE_PERIOD
code:12E4                 call    SGADR
code:12E7                 mov     al, ah
code:12E9                 add     al, [di+trackState.noise_env_val]
code:12EC                 and     al, 00011111b
code:12EE                 mov     [di+trackState.noise_env_val], al
code:12F1                 call    SGDAT
code:12F4                 retn
code:12F4 endp            NOIADD
code:12F4 ; ---------------------------------------------------------------------------
code:12F5 aPport          db '  PPORT  '
code:12FE ; =============== S U B R O U T I N E =======================================
code:12FE ; Processes portamento
code:12FE proc            PPORT near                                  ; CODE XREF: PLAY_INTERRUPT+FC↑p
code:12FE                 cmp     [di+trackState.porta_finished], FALSE
code:1302                 jz      short need_processing
code:1304                 retn
code:1305 ; ---------------------------------------------------------------------------
code:1305 need_processing:                                            ; CODE XREF: PPORT+4↑j
code:1305                 cmp     [di+trackState.note], 0
code:1309                 jnz     short note_nonzero
code:130B                 retn
code:130C ; ---------------------------------------------------------------------------
code:130C note_nonzero:                                               ; CODE XREF: PPORT+B↑j
code:130C                 mov     dl, [di+trackState.porta_speed]
code:130F                 mov     dh, 0
code:1311                 and     dl, dl
code:1313                 jnz     short speed_nonzero
code:1315                 retn
code:1316 ; ---------------------------------------------------------------------------
code:1316 speed_nonzero:                                              ; CODE XREF: PPORT+15↑j
code:1316                 mov     ax, [di+trackState.frequency]
code:1319                 cmp     ax, [di+trackState.porta_target_freq]
code:131C                 jnz     short not_finished
code:131E                 mov     [di+trackState.porta_finished], TRUE
code:1322                 retn
code:1323 ; ---------------------------------------------------------------------------
code:1323 not_finished:                                               ; CODE XREF: PPORT+1E↑j
code:1323                 jnb     short negative
code:1325                 call    FRQCHK
code:1328                 cmp     ax, [di+trackState.porta_target_freq]
code:132B                 jb      short _porta_not_done_neg
code:132D                 mov     ax, [di+trackState.porta_target_freq]
code:1330                 mov     [di+trackState.porta_finished], TRUE
code:1334 _porta_not_done_neg:                                        ; CODE XREF: PPORT+2D↑j
code:1334                 mov     [di+trackState.frequency], ax
code:1337                 retn
code:1338 ; ---------------------------------------------------------------------------
code:1338 negative:                                                   ; CODE XREF: PPORT:not_finished↑j
code:1338                 call    FRQCHK_NEG
code:133B                 cmp     ax, [di+trackState.porta_target_freq]
code:133E                 jnb     short _porta_not_done
code:1340                 mov     ax, [di+trackState.porta_target_freq]
code:1343                 mov     [di+trackState.porta_finished], TRUE
code:1347 _porta_not_done:                                            ; CODE XREF: PPORT+40↑j
code:1347                 mov     [di+trackState.frequency], ax
code:134A                 retn
code:134A endp            PPORT
code:134A ; ---------------------------------------------------------------------------
code:134B aFrqchk         db '  FRQCHK  '
code:1355 ; This calculates frequency offset for vibrato or portamento
code:1355 ; I am not going to think how these magic numbers work
code:1355 ; =============== S U B R O U T I N E =======================================
code:1355 proc            FRQCHK near                                 ; CODE XREF: PPORT+27↑p
code:1355                 cmp     [di+trackState.output_channel], 3
code:1358                 jb      short is_fm
code:135A                 add     ax, dx
code:135C                 retn
code:135D ; ---------------------------------------------------------------------------
code:135D is_fm:                                                      ; CODE XREF: FRQCHK+3↑j
code:135D                 mov     bx, dx
code:135F                 mov     dl, ah
code:1361                 and     dl, 00111000b
code:1364                 and     ah, 00000111b
code:1367                 add     ax, bx
code:1369                 cmp     ax, (offset SSG_STATS+2)
code:136C                 jnb     short loc_1374
code:136E                 add     ax, 549
code:1371                 sub     dl, 8
code:1374 loc_1374:                                                   ; CODE XREF: FRQCHK+17↑j
code:1374                 cmp     ax, 1167
code:1377                 jb      short loc_137F
code:1379                 sub     ax, 549
code:137C                 add     dl, 8
code:137F loc_137F:                                                   ; CODE XREF: FRQCHK+22↑j
code:137F                 and     dl, 00111000b
code:1382                 and     ah, 00000111b
code:1385                 or      ah, dl
code:1387                 retn
code:1387 endp            FRQCHK
code:1388 ; This calculates negative frequency offset for vibrato or portamento
code:1388
code:1388 ; =============== S U B R O U T I N E =======================================
code:1388 proc            FRQCHK_NEG near                             ; CODE XREF: PPORT:negative↑p
code:1388                 cmp     [di+trackState.output_channel], 3
code:1388
code:1388
code:138B                 jb      short is_fm
code:138D                 sub     ax, dx
code:138F                 retn
code:1390 ; ---------------------------------------------------------------------------
code:1390 is_fm:                                                      ; CODE XREF: FRQCHK_NEG+3↑j
code:1390                 mov     bx, dx
code:1392                 mov     dl, ah
code:1394                 and     dl, 00111000b
code:1397                 and     ah, 00000111b
code:139A                 sub     ax, bx
code:139C                 cmp     ax, (offset SSG_STATS+2)
code:139F                 jnb     short loc_13A7
code:13A1                 add     ax, 549
code:13A4                 sub     dl, 8
code:13A7 loc_13A7:                                                   ; CODE XREF: FRQCHK_NEG+17↑j
code:13A7                 cmp     ax, 1167
code:13AA                 jb      short loc_13B2
code:13AC                 sub     ax, 549
code:13AF                 add     dl, 8
code:13B2 loc_13B2:                                                   ; CODE XREF: FRQCHK_NEG+22↑j
code:13B2                 and     dl, 00111000b
code:13B5                 and     ah, 00000111b
code:13B8                 or      ah, dl
code:13BA                 retn
code:13BA endp            FRQCHK_NEG
code:13BA ; ---------------------------------------------------------------------------
code:13BB aPswep          db '  PSWEP  '
code:13C4 ; =============== S U B R O U T I N E =======================================
code:13C4 proc            PWSEP near                                  ; CODE XREF: PLAY:tick_overflowed↓p
code:13C4                 cmp     [di+trackState.note], 0
code:13C8                 jnz     short _note_set
code:13CA                 retn
code:13CB ; ---------------------------------------------------------------------------
code:13CB _note_set:                                                  ; CODE XREF: PWSEP+4↑j
code:13CB                 mov     al, [di+trackState.note_offset_rel]
code:13CE                 and     al, al
code:13D0                 jnz     short _enabled
code:13D2                 retn
code:13D3 ; ---------------------------------------------------------------------------
code:13D3 _enabled:                                                   ; CODE XREF: PWSEP+C↑j
code:13D3                 js      short _negative
code:13D5 _positive:                                                  ; allow up to 0x3F range
code:13D5                 and     al, 00111111b
code:13D7                 mov     ah, al                              ; ah=pwsep
code:13D9                 mov     al, [di+trackState.note]            ; al=note
code:13DC                 sub     al, ah                              ; substract note from value
code:13DE                 and     al, 01111111b
code:13E0                 mov     [di+trackState.note], al
code:13E3                 dec     al
code:13E5                 add     al, [di+trackState.n_offset_abs]
code:13E8                 add     al, [di+trackState.n_offset_abs_vcmd]
code:13EB                 and     al, 01111111b
code:13ED                 jmp     short loc_1404
code:13EF ; ---------------------------------------------------------------------------
code:13EF                 nop
code:13F0 _negative:                                                  ; CODE XREF: PWSEP:_enabled↑j
code:13F0                 and     al, 00111111b
code:13F2                 add     al, [di+trackState.note]
code:13F5                 and     al, 01111111b
code:13F7                 mov     [di+trackState.note], al
code:13FA                 dec     al
code:13FC                 add     al, [di+trackState.n_offset_abs]
code:13FF                 add     al, [di+trackState.n_offset_abs_vcmd]
code:1402                 and     al, 01111111b
code:1404 loc_1404:                                                   ; CODE XREF: PWSEP+29↑j
code:1404                 cmp     [di+trackState.output_channel], 3
code:1407                 jb      short loc_140F
code:1409 loc_1409:
code:1409                 call    SSGFRQ
code:140C                 jmp     short loc_1412
code:140E ; ---------------------------------------------------------------------------
code:140E                 nop
code:140F loc_140F:                                                   ; CODE XREF: PWSEP+43↑j
code:140F                 call    FMFRQ
code:1412 loc_1412:                                                   ; CODE XREF: PWSEP+48↑j
code:1412                 mov     [di+trackState.frequency], ax
code:1415                 retn
code:1415 endp            PWSEP
code:1415 ; ---------------------------------------------------------------------------
code:1416 aSoftvb         db '  SOFTVB  '
code:1420 ; =============== S U B R O U T I N E =======================================
code:1420 proc            SOFTVB near                                 ; CODE XREF: PLAY_INTERRUPT+FF↑p
code:1420                 mov     ah, [di+trackState.track_flags]
code:1423                 and     ah, t_tone
code:1426                 jnz     short vib_enabled
code:1428                 mov     ax, 0
code:142B                 retn
code:142C ; ---------------------------------------------------------------------------
code:142C vib_enabled:                                                ; CODE XREF: SOFTVB+6↑j
code:142C                 cmp     [di+trackState.note], 0
code:1430                 jnz     short loc_1433
code:1432                 retn
code:1433 ; ---------------------------------------------------------------------------
code:1433 loc_1433:                                                   ; CODE XREF: SOFTVB+10↑j
code:1433                 mov     bx, [di+trackState.frequency]
code:1436                 cmp     [di+trackState.porta_speed], 0
code:143A                 jnz     short loc_143F
code:143C                 call    VIBADD
code:143F loc_143F:                                                   ; CODE XREF: SOFTVB+1A↑j
code:143F                 mov     [di+trackState.frequency], bx
code:1442                 cmp     [di+trackState.is_blocked], 0
code:1446                 jz      short loc_1449
code:1448                 retn
code:1449 ; ---------------------------------------------------------------------------
code:1449 loc_1449:                                                   ; CODE XREF: SOFTVB+26↑j
code:1449                 cmp     [di+trackState.output_channel], 3
code:144C                 jb      short loc_146C
code:144E                 mov     cl, [di+trackState.output_channel]
code:1450                 sub     cl, 3
code:1453                 rol     cl, 1
code:1455                 mov     al, cl
code:1457                 call    SSGADR
code:145A                 mov     al, bl
code:145C                 call    SSGDAT
code:145F                 mov     al, cl
code:1461                 inc     al
code:1463                 call    SSGADR
code:1466                 mov     al, bh
code:1468                 call    SSGDAT
code:146B                 retn
code:146C ; ---------------------------------------------------------------------------
code:146C loc_146C:                                                   ; CODE XREF: SOFTVB+2C↑j
code:146C                 mov     al, bh
code:146E                 mov     ah, OPN_FNUM_H_BLOCK_CH1
code:1470                 call    WFMDAT                              ; AL=chan, AH=reg
code:1473                 mov     al, bl
code:1475                 mov     ah, OPN_FNUM_L_CH1
code:1477                 call    WFMDAT                              ; AL=chan, AH=reg
code:147A                 retn
code:147A endp            SOFTVB
code:147A ; ---------------------------------------------------------------------------
code:147B aSoftev         db '  SOFTEV  '
code:1485 ; =============== S U B R O U T I N E =======================================
code:1485 proc            SOFTEV near                                 ; CODE XREF: PLAY_INTERRUPT+102↑p
code:1485                 cmp     [NEED_VOL_UPDATE], 0
code:148A                 jz      short do_update
code:148C                 retn
code:148D ; ---------------------------------------------------------------------------
code:148D do_update:                                                  ; CODE XREF: SOFTEV+5↑j
code:148D                 mov     si, [di+trackState.volume_env_pos]
code:1490                 inc     si
code:1491                 mov     al, [si]
code:1493                 cmp     al, 80h
code:1495                 jb      short setVolume
code:1497                 cmp     al, 81h
code:1499                 jz      short _cmd81
code:149B                 cmp     al, 82h
code:149D                 jz      short cmdRestartEnv
code:149F                 cmp     al, 83h
code:14A1                 jz      short cmdSubstractPos
code:14A3                 cmp     al, 84h
code:14A5                 jz      short cmdSubstractPosFar
code:14A7                 cmp     [di+trackState.tick_cycled], 0
code:14AB                 jz      short setVolume
code:14AD                 dec     si
code:14AE                 jmp     short setVolume
code:14B0 ; ---------------------------------------------------------------------------
code:14B0                 nop
code:14B1 _cmd81:                                                     ; CODE XREF: SOFTEV+14↑j
code:14B1                 dec     si
code:14B2                 cmp     [di+trackState.ssg_drum_mode], 0
code:14B6                 jz      short setVolume
code:14B8                 mov     [di+trackState.drum_enabled], FALSE
code:14BC                 mov     [di+trackState.ssg_drum_mode], 0
code:14C0                 mov     ah, [di+trackState.track_flags]
code:14C3                 or      ah, t_tone or t_noise
code:14C6                 mov     [di+trackState.track_flags], ah
code:14C9                 jmp     short setVolume
code:14CB ; ---------------------------------------------------------------------------
code:14CB                 nop
code:14CC cmdSubstractPos:                                            ; CODE XREF: SOFTEV+1C↑j
code:14CC                 mov     al, [si+1]
code:14CF                 mov     ah, 0
code:14D1                 sub     si, ax
code:14D3                 dec     si
code:14D4                 mov     al, [si]
code:14D6                 jmp     short setVolume
code:14D8 ; ---------------------------------------------------------------------------
code:14D8                 nop
code:14D9 cmdRestartEnv:                                              ; CODE XREF: SOFTEV+18↑j
code:14D9                 mov     si, [di+trackState.volume_env_ptr]
code:14DC                 mov     al, [si]
code:14DE                 jmp     short setVolume
code:14E0 ; ---------------------------------------------------------------------------
code:14E0                 nop
code:14E1 cmdSubstractPosFar:                                         ; CODE XREF: SOFTEV+20↑j
code:14E1                 mov     al, [si+2]
code:14E4                 mov     [di+trackState.volume_env_restart_pos], al
code:14E7                 mov     al, [si+1]
code:14EA                 mov     ah, 0
code:14EC                 sub     si, ax
code:14EE                 dec     si
code:14EF                 mov     al, [si]
code:14F1                 jmp     short setVolume
code:14F3 ; ---------------------------------------------------------------------------
code:14F3                 nop
code:14F4 setVolume:                                                  ; CODE XREF: SOFTEV+10↑j
code:14F4                                                             ; SOFTEV+26↑j
code:14F4                                                             ; SOFTEV+29↑j
code:14F4                                                             ; SOFTEV+31↑j
code:14F4                                                             ; SOFTEV+44↑j
code:14F4                                                             ; SOFTEV+51↑j
code:14F4                                                             ; SOFTEV+59↑j
code:14F4                                                             ; SOFTEV+6C↑j
code:14F4                 add     al, [di+trackState.volume_env_restart_pos]
code:14F7                 jns     short loc_14FE
code:14F9                 mov     al, 0
code:14FB                 jmp     short loc_1504
code:14FD ; ---------------------------------------------------------------------------
code:14FD                 nop
code:14FE loc_14FE:                                                   ; CODE XREF: SOFTEV+72↑j
code:14FE                 cmp     al, 10h
code:1500                 jb      short loc_1504
code:1502                 mov     al, 0Fh
code:1504 loc_1504:                                                   ; CODE XREF: SOFTEV+76↑j
code:1504                                                             ; SOFTEV+7B↑j
code:1504                 mov     [di+trackState.volume_env_pos], si
code:1507                 cmp     [di+trackState.is_blocked], 0
code:150B                 jnz     short break
code:150D                 call    CALVOL
code:1510                 cmp     [di+trackState.output_channel], 3
code:1513                 jb      short is_fm
code:1515 is_ssg:
code:1515                 push    ax
code:1516                 call    SETVOL
code:1519                 pop     ax
code:151A                 and     al, al
code:151C                 jnz     short break
code:151E                 call    KKOFF
code:1521                 retn
code:1522 ; ---------------------------------------------------------------------------
code:1522 is_fm:                                                      ; CODE XREF: SOFTEV+8E↑j
code:1522                 call    SETTL
code:1525 break:                                                      ; CODE XREF: SOFTEV+86↑j
code:1525                                                             ; SOFTEV+97↑j
code:1525                 retn
code:1525 endp            SOFTEV
code:1525 ; ---------------------------------------------------------------------------
code:1526 aKkoff          db '  KKOFF  '
code:152F ; =============== S U B R O U T I N E =======================================
code:152F proc            KKOFF near                                  ; CODE XREF: SOFTEV+99↑p
code:152F                 cmp     [di+trackState.output_channel], 3
code:1532                 jb      short is_fm
code:1534                 cmp     [di+trackState.is_blocked], FALSE
code:1538                 jz      short is_blocked
code:153A is_fm:                                                      ; CODE XREF: KKOFF+3↑j
code:153A                 retn
code:153B ; ---------------------------------------------------------------------------
code:153B is_blocked:                                                 ; CODE XREF: KKOFF+9↑j
code:153B                 retn
code:153B endp            KKOFF
code:153B ; ---------------------------------------------------------------------------
code:153C aPfade          db '  PFADE  '
code:1545 ; =============== S U B R O U T I N E =======================================
code:1545 proc            PFADE near                                  ; CODE XREF: PLAY_INTERRUPT+F0↑p
code:1545                 cmp     [di+trackState.fade_in_progess], FALSE
code:1549                 jnz     short loc_154C
code:154B                 retn
code:154C ; ---------------------------------------------------------------------------
code:154C loc_154C:                                                   ; CODE XREF: PFADE+4↑j
code:154C                 mov     al, [di+trackState.fade_tick]
code:154F                 add     al, [di+trackState.fade_tempo]
code:1552                 mov     [di+trackState.fade_tick], al
code:1555                 jz      short loc_155A
code:1557                 jb      short loc_155A
code:1559                 retn
code:155A ; ---------------------------------------------------------------------------
code:155A loc_155A:                                                   ; CODE XREF: PFADE+10↑j
code:155A                                                             ; PFADE+12↑j
code:155A                 mov     al, [di+trackState.vcmd_volume]
code:155D                 mov     ah, [di+trackState.fade_in_progess]
code:1560                 and     ah, ah
code:1562                 jns     short loc_1578
code:1564                 and     ah, 01111111b
code:1567                 dec     al
code:1569                 js      short loc_156F
code:156B                 cmp     al, ah
code:156D                 jnb     short loc_1584
code:156F loc_156F:                                                   ; CODE XREF: PFADE+24↑j
code:156F                 mov     al, ah
code:1571                 mov     [di+trackState.fade_in_progess], FALSE
code:1575                 jmp     short loc_1584
code:1577 ; ---------------------------------------------------------------------------
code:1577                 nop
code:1578 loc_1578:                                                   ; CODE XREF: PFADE+1D↑j
code:1578                 inc     al
code:157A                 cmp     al, ah
code:157C                 jb      short loc_1584
code:157E                 mov     al, ah
code:1580                 mov     [di+trackState.fade_in_progess], FALSE
code:1584 loc_1584:                                                   ; CODE XREF: PFADE+28↑j
code:1584                                                             ; PFADE+30↑j
code:1584                                                             ; PFADE+37↑j
code:1584                 mov     [di+trackState.volume], al
code:1587                 mov     [di+trackState.vcmd_volume], al
code:158A                 retn
code:158A endp            PFADE
code:158A ; ---------------------------------------------------------------------------
code:158B aPlay           db '  PLAY  '
code:1593 ; =============== S U B R O U T I N E =======================================
code:1593 proc            PLAY near                                   ; CODE XREF: PLAY_INTERRUPT+F3↑p
code:1593 ; FUNCTION CHUNK AT code:17FA SIZE 000002F6 BYTES
code:1593                 mov     [PLAY_SP], sp
code:1597                 mov     [di+trackState.drum_enabled], FALSE
code:159B                 mov     [di+trackState.is_blocked], FALSE
code:159F                 mov     al, [di+trackState.output_channel]
code:15A1                 mov     ah, 0
code:15A3                 add     ax, offset CHAN_STATS
code:15A6                 mov     si, ax
code:15A8                 cmp     [PROC_DISABLED], FALSE
code:15AD                 jz      short loc_15CF
code:15AF no_processing:
code:15AF                 mov     al, [di+trackState.track_flags]
code:15B2                 and     al, TrackFlags_20
code:15B4                 jnz     short loc_15CF
code:15B6                 cmp     [byte ptr si], 0
code:15B9                 jnz     short loc_15D4
code:15BB                 mov     [di+trackState.legato_enabled], FALSE
code:15BF                 mov     [di+trackState.volume], FALSE
code:15C3                 call    KEYOFF
code:15C6                 mov     al, [di+trackState.vcmd_volume]
code:15C9                 mov     [di+trackState.volume], al
code:15CC                 jmp     short loc_15D4
code:15CE ; ---------------------------------------------------------------------------
code:15CE                 nop
code:15CF loc_15CF:                                                   ; CODE XREF: PLAY+1A↑j
code:15CF                                                             ; PLAY+21↑j
code:15CF                 cmp     [byte ptr si], 0
code:15D2                 jz      short loc_15DB
code:15D4 loc_15D4:                                                   ; CODE XREF: PLAY+26↑j
code:15D4                                                             ; PLAY+39↑j
code:15D4                 mov     [di+trackState.is_blocked], TRUE
code:15D8                 jmp     short update_tick
code:15DA ; ---------------------------------------------------------------------------
code:15DA                 nop
code:15DB loc_15DB:                                                   ; CODE XREF: PLAY+3F↑j
code:15DB                 mov     al, [di+trackState.output_channel]
code:15DD                 add     al, 80h
code:15DF                 mov     [si], al
code:15E1                 cmp     [di+trackState.fm3_enabled], FALSE
code:15E5                 jz      short loc_15EC
code:15E7                 mov     [FM3EX_ENABLED], TRUE
code:15EC loc_15EC:                                                   ; CODE XREF: PLAY+52↑j
code:15EC                 mov     al, [di+trackState.output_channel]
code:15EE                 cmp     al, 3
code:15F0                 jnb     short __setSsgVol                   ; 0 is KOFF
code:15F2                 mov     ah, 0
code:15F4                 add     ax, offset CUR_INSTS
code:15F7                 mov     si, ax
code:15F9                 mov     al, [di+trackState.instrument]
code:15FC                 cmp     al, [si]
code:15FE                 jz      short loc_1605
code:1600                 mov     [si], al
code:1602                 call    SETTON
code:1605 loc_1605:                                                   ; CODE XREF: PLAY+6B↑j
code:1605                 jmp     short update_tick
code:1607 ; ---------------------------------------------------------------------------
code:1607                 nop
code:1608 __setSsgVol:                                                ; CODE XREF: PLAY+5D↑j
code:1608                 cmp     [di+trackState.note], 0             ; 0 is KOFF
code:160C ; if our channel is > 3 we just so happen to
code:160C ; get to volume register with this offset
code:160C                 jnz     short update_tick
code:160E                 add     al, SSG_TONE_C_COARSE
code:1610                 call    SGADR
code:1613                 mov     al, 0
code:1615                 call    SGDAT
code:1618 update_tick:                                                ; CODE XREF: PLAY+45↑j
code:1618                                                             ; PLAY:loc_1605↑j
code:1618                                                             ; PLAY+79↑j
code:1618                 mov     al, [di+trackState.tempo_tick]
code:161B                 add     al, [di+trackState.tempo]
code:161E                 mov     [di+trackState.tempo_tick], al
code:1621                 jz      short tick_overflowed
code:1623                 jb      short tick_overflowed
code:1625                 jmp     __finishLoop                        ; Check if we restored stack properly
code:1628 ; ---------------------------------------------------------------------------
code:1628 tick_overflowed:                                            ; CODE XREF: PLAY+8E↑j
code:1628                                                             ; PLAY+90↑j
code:1628                 call    PWSEP
code:162B                 mov     ah, [di+trackState.koff_cycle]
code:162E                 and     ah, ah
code:1630                 jns     short __should_cutNote
code:1632                 and     ah, 01111111b
code:1635                 mov     al, [di+trackState.cycles_per_cmd]
code:1638                 sub     al, ah
code:163A                 jnb     short loc_163E
code:163C                 mov     al, 0
code:163E loc_163E:                                                   ; CODE XREF: PLAY+A7↑j
code:163E                 mov     ah, al
code:1640 __should_cutNote:                                           ; CODE XREF: PLAY+9D↑j
code:1640                 cmp     ah, [di+trackState.cycles_left]
code:1643                 jb      short __should_fetchCmd
code:1645                 call    KEYOFF
code:1648 __should_fetchCmd:                                          ; CODE XREF: PLAY+B0↑j
code:1648                 dec     [di+trackState.cycles_left]
code:164B                 jz      short __loadCmd
code:164D                 jmp     __finishLoop                        ; Check if we restored stack properly
code:1650 ; ---------------------------------------------------------------------------
code:1650 __loadCmd:                                                  ; CODE XREF: PLAY+B8↑j
code:1650                 mov     [di+trackState.porta_finished], FALSE
code:1654                 mov     si, [di+trackState.data_offset]
code:1657 __do_fetchCmd:                                              ; CODE XREF: PLAY:__jmp_fetchCmd↓j
code:1657                 mov     al, [si]
code:1659                 inc     si
code:165A                 and     al, al
code:165C                 js      short __cmd_80_ff
code:165E                 jmp     __cmd_00_7f
code:1661 ; ---------------------------------------------------------------------------
code:1661 __cmd_80_ff:                                                ; CODE XREF: PLAY+C9↑j
code:1661                 cmp     al, drumNoteBoundary
code:1663                 jb      short __cmd_80_cf_jump
code:1665                 cmp     al, noteLengthCmdBoundary
code:1667                 jb      short __cmd_b0_ef
code:1669 __cmd_80_cf_jump:                                           ; CODE XREF: PLAY+D0↑j
code:1669                 jmp     __cmd_80_cf
code:166C ; ---------------------------------------------------------------------------
code:166C __cmd_b0_ef:                                                ; CODE XREF: PLAY+D4↑j
code:166C                 push    si
code:166D                 cmp     [di+trackState.is_blocked], FALSE
code:1671                 jz      short __play_drum
code:1673                 jmp     __set_note_0
code:1676 ; ---------------------------------------------------------------------------
code:1676 __play_drum:                                                ; CODE XREF: PLAY+DE↑j
code:1676                 mov     [di+trackState.drum_enabled], 1
code:167A                 sub     al, drumNoteBoundary
code:167C                 mov     cl, drumDefinitionSize
code:167E                 mul     cl
code:1680                 add     ax, [ptrSSG_TONE_TBL]
code:1684                 mov     si, ax
code:1686                 mov     al, [si]                            ; byte 1
code:1688                 mov     [di+trackState.instrument], al
code:168B                 inc     si
code:168C                 cmp     [di+trackState.output_channel], 3
code:168F                 jge     short __drums_is_ssg
code:1691                 push    si                                  ; stored ptr to byte 2
code:1692                 mov     al, [di+trackState.output_channel]
code:1694                 mov     ah, 0
code:1696                 add     ax, offset CUR_INSTS
code:1699                 mov     si, ax
code:169B                 mov     al, [di+trackState.instrument]
code:169E                 cmp     al, [si]
code:16A0                 jz      short __drums_is_fm
code:16A2                 mov     [si], al
code:16A4                 call    SETTON
code:16A7 __drums_is_fm:                                              ; CODE XREF: PLAY+10D↑j
code:16A7                 pop     si
code:16A8                 mov     [di+trackState.ssg_drum_mode], 0
code:16AC                 jmp     short _skip_is_ssg                  ; ;
code:16AE ; ---------------------------------------------------------------------------
code:16AE                 nop
code:16AF __drums_is_ssg:                                             ; CODE XREF: PLAY+FC↑j
code:16AF                 mov     [di+trackState.ssg_drum_mode], 1
code:16B3                 mov     al, [di+trackState.instrument]
code:16B6                 mov     [di+trackState.pitch_env_mult], al
code:16B9 _skip_is_ssg:                                               ; CODE XREF: PLAY+119↑j
code:16B9                 mov     al, [si]                            ; load byte 2
code:16BB                 push    ax
code:16BC                 inc     si                                  ; point to byte 3
code:16BD                 mov     al, [di+trackState.vcmd_volume]
code:16C0                 sub     al, [si]
code:16C2                 jnb     short _skip_vol_overflow
code:16C4                 mov     al, 0
code:16C6 _skip_vol_overflow:                                         ; CODE XREF: PLAY+12F↑j
code:16C6                 mov     [di+trackState.volume], al
code:16C9                 inc     si                                  ; point to byte 4
code:16CA                 mov     ax, [si]
code:16CC                 mov     [di+trackState.volume_env_ptr], ax
code:16CF                 mov     [di+trackState.volume_env_pos], ax
code:16D2                 inc     si
code:16D3                 inc     si                                  ; point to byte 6
code:16D4                 mov     ax, [si]
code:16D6                 mov     [di+trackState.pitch_env_ptr], ax
code:16D9                 mov     [di+trackState.pitch_env_pos], ax
code:16DC                 cmp     [di+trackState.output_channel], 3
code:16DF                 jb      short _skip_load_noise_seq
code:16E1                 inc     si
code:16E2                 inc     si
code:16E3                 mov     ax, [si]
code:16E5                 mov     [DRUM_MASK_SEQ_PTR], ax
code:16E8                 push    ax
code:16E9                 inc     si
code:16EA                 inc     si
code:16EB                 mov     ax, [si]
code:16ED                 mov     [NOISE_PERIOD_SEQ_PTR], ax
code:16F0                 pop     si
code:16F1                 mov     al, [di+trackState.track_flags]
code:16F4                 and     al, not (t_tone or t_noise)
code:16F6                 or      al, [si]
code:16F8                 mov     [di+trackState.track_flags], al
code:16FB _skip_load_noise_seq:                                       ; CODE XREF: PLAY+14C↑j
code:16FB                 pop     ax
code:16FC                 pop     si
code:16FD                 jmp     short __cmd_00_7f
code:16FF ; ---------------------------------------------------------------------------
code:16FF                 nop
code:1700 __set_note_0:                                               ; CODE XREF: PLAY+E0↑j
code:1700                 mov     al, 0
code:1702                 pop     si
code:1703                 jmp     short __cmd_00_7f
code:1705 ; ---------------------------------------------------------------------------
code:1705                 nop
code:1706 __cmd_80_cf:                                                ; CODE XREF: PLAY:__cmd_80_cf_jump↑j
code:1706                 and     al, 01111111b
code:1708                 rol     al, 1
code:170A                 mov     ah, 0
code:170C                 add     ax, offset VCMD_JUMPTABLE           ; switch 48 cases
code:170F                 push    si
code:1710                 mov     si, ax
code:1712                 mov     ax, [si]
code:1714                 pop     si
code:1715                 mov     [FETCH_LOOP_FINISHED], FALSE
code:171A                 call    ax
code:171C                 mov     al, [FETCH_LOOP_FINISHED]
code:171F                 and     al, al
code:1721                 jz      short __jmp_fetchCmd
code:1723                 jmp     short __finishLoop                  ; Check if we restored stack properly
code:1725 ; ---------------------------------------------------------------------------
code:1725                 nop
code:1726 __jmp_fetchCmd:                                             ; CODE XREF: PLAY+18E↑j
code:1726                 jmp     __do_fetchCmd
code:1729 ; ---------------------------------------------------------------------------
code:1729 __cmd_00_7f:                                                ; CODE XREF: PLAY+CB↑j
code:1729                                                             ; PLAY+16A↑j
code:1729                                                             ; PLAY+170↑j
code:1729                 push    ax
code:172A                 mov     al, [si]                            ; Fetch whatever might be here after the note
code:172C                 cmp     al, 0DEh                            ; AL < DE?
code:172E                 jb      short __cmd_lt_de                   ; AL < DE
code:1730                 cmp     al, 0EFh                            ; AL >= EF?
code:1732                 jnb     short __cmd_lt_de                   ; AL >= EF
code:1734                 inc     si                                  ; Fetch argument from stream then
code:1735                 cmp     al, 0DEh                            ; AL != DE?
code:1737                 jnz     short __cmd_df_ef                   ; DF-EF get ticks loaded from note length table
code:1739                 mov     al, [si]                            ; for DE, we load ticks directly from argument
code:173B                 mov     [di+trackState.cycles_per_cmd], al
code:173E                 inc     si
code:173F                 jmp     short __cmd_lt_de                   ; vCmdToggleLegato
code:1741 ; ---------------------------------------------------------------------------
code:1741                 nop
code:1742 __cmd_df_ef:                                                ; CODE XREF: PLAY+1A4↑j
code:1742                 sub     al, 0DFh                            ; DF-EF get ticks loaded from note length table
code:1744                 mov     ah, 0
code:1746                 add     ax, [ptrNOTE_LEN_TBL]
code:174A                 push    si
code:174B                 mov     si, ax
code:174D                 mov     al, [si]
code:174F                 pop     si
code:1750                 mov     [di+trackState.cycles_per_cmd], al
code:1753 __cmd_lt_de:                                                ; CODE XREF: PLAY+19B↑j
code:1753                                                             ; PLAY+19F↑j
code:1753                                                             ; PLAY+1AC↑j
code:1753                 cmp     [byte ptr si], 99h                  ; vCmdToggleLegato
code:1756                 jnz     short loc_1763
code:1758                 cmp     [di+trackState.legato_enabled], FALSE
code:175C                 jz      short loc_1763
code:175E                 mov     [di+trackState.legato_enabled], FALSE
code:1762                 inc     si
code:1763 loc_1763:                                                   ; CODE XREF: PLAY+1C3↑j
code:1763                                                             ; PLAY+1C9↑j
code:1763                 mov     [di+trackState.data_offset], si
code:1766                 pop     ax
code:1767                 cmp     [di+trackState.fm3_enabled], FALSE
code:176B                 jz      short loc_1772
code:176D                 push    ax
code:176E                 call    POLYON
code:1771                 pop     ax
code:1772 loc_1772:                                                   ; CODE XREF: PLAY+1D8↑j
code:1772                 push    ax
code:1773                 call    KEYOFF
code:1776                 pop     ax
code:1777                 call    KEYON
code:177A                 mov     al, [di+trackState.cycles_per_cmd]
code:177D                 mov     [di+trackState.cycles_left], al
code:1780 __finishLoop:                                               ; CODE XREF: PLAY+92↑j
code:1780                                                             ; PLAY+BA↑j
code:1780                                                             ; PLAY+190↑j
code:1780                 mov     ax, sp                              ; Check if we restored stack properly
code:1782                 cmp     ax, [PLAY_SP]
code:1786                 jnz     short __segFault
code:1788                 retn
code:1789 ; ---------------------------------------------------------------------------
code:1789 __segFault:                                                 ; CODE XREF: PLAY+1F3↑j
code:1789                 mov     al, 0
code:178B                 out     PC98_GDC_PAL_INDEX, al              ; Interrupt Controller #2, 8259A
code:178D                 out     PC98_GDC_PAL_G, al                  ; Interrupt Controller #2, 8259A
code:178F                 out     PC98_GDC_PAL_B, al                  ; Interrupt Controller #2, 8259A
code:1791                 mov     al, 7
code:1793                 out     PC98_GDC_PAL_R, al                  ; Interrupt Controller #2, 8259A
code:1795 __halt:                                                     ; CODE XREF: PLAY+203↓j
code:1795                 nop
code:1796                 jmp     short __halt
code:1796 endp            PLAY
code:1796 ; ---------------------------------------------------------------------------
code:1798 PLAY_SP         dw 0                                        ; DATA XREF: PLAY↑w
code:1798                                                             ; PLAY+1EF↑r
code:179A VCMD_JUMPTABLE  dw offset vcmdJumpIntermediate              ; DATA XREF: PLAY+179↑o
code:179C                 dw offset vcmdLoopEndJump                   ; jump table for switch statement
code:179E                 dw offset vcmdKeyOff
code:17A0                 dw offset vcmdSetPitchEnv
code:17A2                 dw offset vcmdSetPortamento
code:17A4                 dw offset vcmdDisable
code:17A6                 dw offset vcmdSetfeedbackFF
code:17A8                 dw offset vcmdSetVolumes
code:17AA                 dw offset vcmdSetVolEnv
code:17AC                 dw offset vcmdAddRelTranspose
code:17AE                 dw offset vcmdAddVolume
code:17B0                 dw offset vcmdSetSongPtrOffset
code:17B2                 dw offset vcmdDummy
code:17B4                 dw offset vcmdSetLoop
code:17B6                 dw offset vcmdEnableSoftDrum
code:17B8                 dw offset vcmdSetNoiseEnv
code:17BA                 dw offset vcmdSetTrackTNFlags
code:17BC                 dw offset vcmdSetCallbackVal
code:17BE                 dw offset vcmdSetNoisePeriod
code:17C0                 dw offset vcmdSetTrackFade
code:17C2                 dw offset vcmdSetNoteOffsetRel
code:17C4                 dw offset vcmdJumpIfFadingOut
code:17C6                 dw offset vcmdSetSpeed
code:17C8                 dw offset vcmdSetFinetune
code:17CA                 dw offset vcmdDisable_j
code:17CC                 dw offset vcmdSetLegato
code:17CE                 dw offset vcmdCall
code:17D0                 dw offset vcmdReturn
code:17D2                 dw offset vcmdDisable_j
code:17D4                 dw offset vcmdSetNoteCut
code:17D6                 dw offset vcmdDisable_j
code:17D8                 dw offset vcmdDisable_j
code:17DA                 dw offset vcmdDisable
code:17DC                 dw offset vcmdJumpIfFm
code:17DE                 dw offset vcmdJumpIfSsg
code:17E0                 dw offset vcmdSetInstrument
code:17E2                 dw offset vcmdRetAL1
code:17E4                 dw offset vcmdSkipWordIfFm
code:17E6                 dw offset vcmdSkipWordIfSsg
code:17E8                 dw offset _vcmdRawWrite
code:17EA                 dw offset _vcmdSetTrack1d
code:17EC                 dw offset vcmdJumpIfChanNeq
code:17EE                 dw offset vcmdJumpIfChanEq
code:17F0                 dw offset _vcmdToggleFM3
code:17F2                 dw offset _vcmdSetFM3Notes
code:17F4                 dw offset _vcmdSetFM3Fnums
code:17F6                 dw offset vcmdSetLegato
code:17F8                 dw offset vcmdDisableLegato
code:17FA ; ---------------------------------------------------------------------------
code:17FA ; START OF FUNCTION CHUNK FOR PLAY
code:17FA vcmdDummy:                                                  ; CODE XREF: PLAY+179↑j
code:17FA                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:17FA                 retn                                        ; jumptable 000000000000170C case 12
code:17FB ; ---------------------------------------------------------------------------
code:17FB vcmdDisable:                                                ; CODE XREF: PLAY+179↑j
code:17FB                                                             ; PLAY:vcmdDisable_j↓j
code:17FB                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:17FB                 cmp     [di+trackState.fm3_enabled], FALSE  ; jumptable 000000000000170C cases 5,32
code:17FF                 jz      short loc_1804
code:1801                 call    _vcmdToggleFM3                      ; jumptable 000000000000170C case 43
code:1804 loc_1804:                                                   ; CODE XREF: PLAY+26C↑j
code:1804                 mov     [di+trackState.volume], 0
code:1808                 mov     [di+trackState.legato_enabled], FALSE
code:180C                 call    KEYOFF
code:180F loc_180F:
code:180F                 mov     al, [di+trackState.track_flags]
code:1812                 and     al, not (t_tone or t_noise or TrackFlags_4 or TrackFlags_8 or TrackFlags_10)
code:1814                 jz      short loc_181B
code:1816                 mov     [PROC_DISABLED], FALSE
code:181B loc_181B:                                                   ; CODE XREF: PLAY+281↑j
code:181B                 mov     [di+trackState.output_channel], 0FFh
code:181E                 mov     [di+trackState.track_flags], 0
code:1822                 mov     [di+trackState.porta_speed], 0
code:1826                 mov     [di+trackState.note_offset_rel], 0
code:182A                 mov     [FETCH_LOOP_FINISHED], 1
code:182F                 mov     [SEQ_CUSTOM], 0FEh
code:1834                 retn
code:1835 ; ---------------------------------------------------------------------------
code:1835 vcmdKeyOff:                                                 ; CODE XREF: PLAY+179↑j
code:1835                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1835                 cmp     [di+trackState.fm3_enabled], FALSE  ; jumptable 000000000000170C case 2
code:1839                 jz      short _fm3_disabled
code:183B                 call    _vcmdToggleFM3                      ; jumptable 000000000000170C case 43
code:183E _fm3_disabled:                                              ; CODE XREF: PLAY+2A6↑j
code:183E                 cmp     [di+trackState.is_blocked], FALSE
code:1842                 jz      short loc_1847
code:1844                 jmp     short loc_187F
code:1846 ; ---------------------------------------------------------------------------
code:1846                 nop
code:1847 loc_1847:                                                   ; CODE XREF: PLAY+2AF↑j
code:1847                 push    si
code:1848                 mov     al, [di+trackState.output_channel]
code:184A loc_184A:
code:184A                 mov     ah, 0
code:184C                 add     ax, offset CHAN_VOLUMES
code:184F                 mov     si, ax
code:1851                 mov     [byte ptr si], 0
code:1854                 pop     si
code:1855                 cmp     [byte ptr di], 3
code:1858                 jnb     short loc_1873
code:185A                 mov     al, OPN_KEY_ON_OFF
code:185C                 call    SFMADR                              ; AL=OPN_REG
code:185F                 mov     al, [di+trackState.output_channel]
code:1861                 call    SFMDAT
code:1864                 mov     al, [di+trackState.output_channel]
code:1866                 mov     ah, 0
code:1868                 mov     si, offset CUR_INSTS
code:186B                 add     si, ax
code:186D                 mov     [byte ptr si], 0FFh
code:1870                 jmp     short loc_1873
code:1872 ; ---------------------------------------------------------------------------
code:1872                 nop
code:1873 loc_1873:                                                   ; CODE XREF: PLAY+2C5↑j
code:1873                                                             ; PLAY+2DD↑j
code:1873                 mov     al, [di+trackState.track_flags]
code:1876                 and     al, TrackFlags_20 or t_ssg_ioA or t_ssg_ioB
code:1878                 jz      short loc_187F
code:187A                 mov     [PROC_DISABLED], 0
code:187F loc_187F:                                                   ; CODE XREF: PLAY+2B1↑j
code:187F                                                             ; PLAY+2E5↑j
code:187F                 mov     [di+trackState.output_channel], 0FFh
code:1882                 mov     [di+trackState.tick_cycled], 0
code:1886 loc_1886:
code:1886                 mov     [di+trackState.track_flags], 0
code:188A                 mov     [di+trackState.porta_speed], 0
code:188E                 mov     [di+trackState.note_offset_rel], 0
code:1892                 mov     [FETCH_LOOP_FINISHED], 1
code:1897                 retn
code:1898 ; ---------------------------------------------------------------------------
code:1898 ; Was this intended as explicit fetch loop end mark?
code:1898 vcmdRetAL1:                                                 ; CODE XREF: PLAY+179↑j
code:1898                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1898                 mov     al, 1                               ; jumptable 000000000000170C case 36
code:189A                 retn
code:189B ; ---------------------------------------------------------------------------
code:189B vcmdJumpIntermediate:                                       ; CODE XREF: PLAY+179↑j
code:189B                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:189B                 mov     ax, [si]                            ; jumptable 000000000000170C case 0
code:189D                 mov     si, ax
code:189F                 retn
code:18A0 ; ---------------------------------------------------------------------------
code:18A0 vcmdCall:                                                   ; CODE XREF: PLAY+179↑j
code:18A0                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:18A0                 mov     al, [si]                            ; jumptable 000000000000170C case 26
code:18A2                 inc     si
code:18A3                 mov     ah, [si]
code:18A5                 inc     si
code:18A6                 mov     [di+trackState.jump_offset], si
code:18A9                 mov     si, ax
code:18AB                 retn
code:18AC ; ---------------------------------------------------------------------------
code:18AC vcmdReturn:                                                 ; CODE XREF: PLAY+179↑j
code:18AC                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:18AC                 mov     si, [di+trackState.jump_offset]     ; Not quite a return, as multiple possible
code:18AF                 retn
code:18B0 ; ---------------------------------------------------------------------------
code:18B0 vcmdSetLoop:                                                ; CODE XREF: PLAY+179↑j
code:18B0                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:18B0                 mov     al, [si]                            ; [counter|escape], value
code:18B2                 inc     si
code:18B3                 mov     ah, [si]
code:18B5                 inc     si
code:18B6                 and     al, al
code:18B8                 jnz     short _setEscapeCycle
code:18BA                 mov     [di+trackState.loop_counter], ah
code:18BD                 retn
code:18BE ; ---------------------------------------------------------------------------
code:18BE _setEscapeCycle:                                            ; CODE XREF: PLAY+325↑j
code:18BE                 mov     [di+trackState.loop_escape_cycle], ah
code:18C1                 retn
code:18C2 ; ---------------------------------------------------------------------------
code:18C2 vcmdLoopEndJump:                                            ; CODE XREF: PLAY+179↑j
code:18C2                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:18C2                 mov     al, [si]                            ; jumptable 000000000000170C case 1
code:18C4                 inc     si
code:18C5                 and     al, al
code:18C7                 jnz     short loc_18D1
code:18C9                 dec     [di+trackState.loop_counter]
code:18CC                 jz      short loc_18DF
code:18CE                 jmp     short loc_18D6
code:18D0 ; ---------------------------------------------------------------------------
code:18D0                 nop
code:18D1 loc_18D1:                                                   ; CODE XREF: PLAY+334↑j
code:18D1                 dec     [di+trackState.loop_escape_cycle]
code:18D4                 jz      short loc_18DF
code:18D6 loc_18D6:                                                   ; CODE XREF: PLAY+33B↑j
code:18D6                 mov     al, [si]
code:18D8                 inc     si
code:18D9                 mov     ah, [si]
code:18DB                 inc     si
code:18DC                 mov     si, ax
code:18DE                 retn
code:18DF ; ---------------------------------------------------------------------------
code:18DF loc_18DF:                                                   ; CODE XREF: PLAY+339↑j
code:18DF                                                             ; PLAY+341↑j
code:18DF                 inc     si
code:18E0                 inc     si
code:18E1                 retn
code:18E2 ; ---------------------------------------------------------------------------
code:18E2 vcmdSetPitchEnv:                                            ; CODE XREF: PLAY+179↑j
code:18E2                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:18E2                 mov     al, [si]                            ; jumptable 000000000000170C case 3
code:18E4                 inc     si
code:18E5                 push    si
code:18E6                 rol     al, 1
code:18E8                 mov     ah, 0
code:18EA                 add     ax, [ptrPITCH_ENV_TBL]
code:18EE                 mov     si, ax
code:18F0                 mov     ax, [si]
code:18F2                 mov     [di+trackState.pitch_env_ptr], ax
code:18F5                 mov     [di+trackState.pitch_env_pos], ax
code:18F8                 pop     si
code:18F9                 retn
code:18FA ; ---------------------------------------------------------------------------
code:18FA vcmdSetVolumes:                                             ; CODE XREF: PLAY+179↑j
code:18FA                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:18FA                 mov     al, [si]                            ; jumptable 000000000000170C case 7
code:18FC                 mov     [di+trackState.volume], al
code:18FF                 mov     [di+trackState.vcmd_volume], al
code:1902                 mov     [di+trackState.volume2], al
code:1905                 inc     si
code:1906                 retn
code:1907 ; ---------------------------------------------------------------------------
code:1907 vcmdSetVolEnv:                                              ; CODE XREF: PLAY+179↑j
code:1907                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1907                 mov     al, [si]                            ; jumptable 000000000000170C case 8
code:1909                 inc     si
code:190A                 push    si
code:190B                 rol     al, 1
code:190D                 mov     ah, 0
code:190F                 add     ax, [ptrVOL_ENV_TBL]
code:1913                 mov     si, ax
code:1915                 mov     ax, [si]
code:1917                 mov     [di+trackState.volume_env_ptr], ax
code:191A                 mov     [di+trackState.volume_env_pos], ax
code:191D                 pop     si
code:191E                 retn
code:191F ; ---------------------------------------------------------------------------
code:191F vcmdAddRelTranspose:                                        ; CODE XREF: PLAY+179↑j
code:191F                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:191F                 mov     al, [si]                            ; jumptable 000000000000170C case 9
code:1921                 add     al, [di+trackState.n_offset_abs_vcmd]
code:1924                 mov     [di+trackState.n_offset_abs_vcmd], al
code:1927                 inc     si
code:1928                 retn
code:1929 ; ---------------------------------------------------------------------------
code:1929 vcmdAddVolume:                                              ; CODE XREF: PLAY+179↑j
code:1929                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1929                 mov     al, [di+trackState.vcmd_volume]     ; jumptable 000000000000170C case 10
code:192C                 add     al, [si]
code:192E                 jns     short loc_1932
code:1930                 mov     al, 0
code:1932 loc_1932:                                                   ; CODE XREF: PLAY+39B↑j
code:1932                 cmp     al, 10h
code:1934                 jb      short loc_1938
code:1936                 mov     al, 0Fh
code:1938 loc_1938:                                                   ; CODE XREF: PLAY+3A1↑j
code:1938                 mov     [di+trackState.volume], al
code:193B                 mov     [di+trackState.vcmd_volume], al
code:193E                 inc     si
code:193F                 retn
code:1940 ; ---------------------------------------------------------------------------
code:1940 vcmdSetNoisePeriod:                                         ; CODE XREF: PLAY+179↑j
code:1940                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1940                 mov     al, SSG_NOISE_PERIOD                ; jumptable 000000000000170C case 18
code:1942                 call    SSGADR
code:1945                 mov     al, [si]
code:1947                 mov     [di+trackState.noise_env_val], al
code:194A                 inc     si
code:194B                 call    SSGDAT
code:194E                 retn
code:194F ; ---------------------------------------------------------------------------
code:194F vcmdEnableSoftDrum:                                         ; CODE XREF: PLAY+179↑j
code:194F                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:194F                 mov     al, [si]                            ; jumptable 000000000000170C case 14
code:1951                 mov     [di+trackState.soft_drum_enabled], al
code:1954                 inc     si
code:1955                 retn
code:1956 ; ---------------------------------------------------------------------------
code:1956 vcmdSetNoiseEnv:                                            ; CODE XREF: PLAY+179↑j
code:1956                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1956                 mov     al, SSG_NOISE_PERIOD                ; jumptable 000000000000170C case 15
code:1958                 call    SSGADR
code:195B                 mov     al, [di+trackState.noise_env_val]
code:195E                 add     al, [si]
code:1960                 and     al, 00011111b
code:1962                 mov     [di+trackState.noise_env_val], al
code:1965                 inc     si
code:1966                 call    SSGDAT
code:1969                 retn
code:196A ; ---------------------------------------------------------------------------
code:196A vcmdSetCallbackVal:                                         ; CODE XREF: PLAY+179↑j
code:196A                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:196A                 cmp     [SEQ_CUSTOM_IS_SET], FALSE          ; jumptable 000000000000170C case 17
code:196A ; This sets single byte that can be read out from
code:196A ; driver via interrupt function
code:196F                 jnz     short skip
code:1971                 mov     al, [si]
code:1973                 mov     [SEQ_CUSTOM], al
code:1976 skip:                                                       ; CODE XREF: PLAY+3DC↑j
code:1976                 inc     si
code:1977                 mov     [SEQ_CUSTOM_IS_SET], TRUE
code:197C                 retn
code:197D ; ---------------------------------------------------------------------------
code:197D vcmdSetfeedbackFF:                                          ; CODE XREF: PLAY+179↑j
code:197D                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:197D                 cmp     [SEQ_CUSTOM_IS_SET], FALSE          ; jumptable 000000000000170C case 6
code:1982                 jnz     short skip_0
code:1984                 mov     [SEQ_CUSTOM], 0FFh
code:1989 skip_0:                                                     ; CODE XREF: PLAY+3EF↑j
code:1989                 mov     [SEQ_CUSTOM_IS_SET], TRUE
code:198E                 retn
code:198F ; ---------------------------------------------------------------------------
code:198F vcmdSetTrackFade:                                           ; CODE XREF: PLAY+179↑j
code:198F                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:198F                 mov     al, [si]                            ; jumptable 000000000000170C case 19
code:1991                 mov     [di+trackState.fade_in_progess], al
code:1994                 inc     si
code:1995                 mov     al, [si]
code:1997                 mov     [di+trackState.fade_tempo], al
code:199A                 inc     si
code:199B                 mov     [di+trackState.fade_tick], 0
code:199F                 retn
code:19A0 ; ---------------------------------------------------------------------------
code:19A0 vcmdJumpIfFadingOut:                                        ; CODE XREF: PLAY+179↑j
code:19A0                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19A0                 cmp     [di+trackState.fade_in_progess], FALSE ; jumptable 000000000000170C case 21
code:19A4                 jz      short vcmdSkipWord
code:19A6                 mov     ax, [si]
code:19A8                 mov     si, ax
code:19AA                 retn
code:19AB ; ---------------------------------------------------------------------------
code:19AB vcmdSkipWord:                                               ; CODE XREF: PLAY+411↑j
code:19AB                 inc     si
code:19AC                 inc     si
code:19AD                 retn
code:19AE ; ---------------------------------------------------------------------------
code:19AE vcmdSetSpeed:                                               ; CODE XREF: PLAY+179↑j
code:19AE                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19AE                 mov     al, [si]                            ; jumptable 000000000000170C case 22
code:19B0                 mov     [di+trackState.tempo], al
code:19B3                 inc     si
code:19B4                 retn
code:19B5 ; ---------------------------------------------------------------------------
code:19B5 vcmdSetFinetune:                                            ; CODE XREF: PLAY+179↑j
code:19B5                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19B5                 mov     al, [si]                            ; jumptable 000000000000170C case 23
code:19B7                 mov     [di+trackState.fine_tune], al
code:19BA                 inc     si
code:19BB                 retn
code:19BC ; ---------------------------------------------------------------------------
code:19BC vcmdSetLegato:                                              ; CODE XREF: PLAY+179↑j
code:19BC                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19BC                 mov     [di+trackState.legato_enabled], True ; jumptable 000000000000170C cases 25,46
code:19C0                 retn
code:19C1 ; ---------------------------------------------------------------------------
code:19C1 vcmdDisableLegato:                                          ; CODE XREF: PLAY+179↑j
code:19C1                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19C1                 mov     [di+trackState.legato_enabled], FALSE ; jumptable 000000000000170C case 47
code:19C5                 retn
code:19C6 ; ---------------------------------------------------------------------------
code:19C6 vcmdSetNoteCut:                                             ; CODE XREF: PLAY+179↑j
code:19C6                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19C6                 mov     al, [si]                            ; jumptable 000000000000170C case 29
code:19C8                 mov     [di+trackState.koff_cycle], al
code:19CB                 inc     si
code:19CC                 retn
code:19CD ; ---------------------------------------------------------------------------
code:19CD vcmdSetInstrument:                                          ; CODE XREF: PLAY+179↑j
code:19CD                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19CD                 mov     al, [si]                            ; jumptable 000000000000170C case 35
code:19CF                 mov     [di+trackState.instrument], al
code:19D2                 inc     si
code:19D3                 cmp     [di+trackState.output_channel], 3
code:19D6                 jge     short done
code:19D8                 cmp     [di+trackState.is_blocked], FALSE
code:19DC                 jnz     short done
code:19DE                 push    si
code:19DF                 mov     dl, [di+trackState.output_channel]
code:19E1                 mov     dh, 0
code:19E3                 add     dx, offset CUR_INSTS
code:19E7                 mov     si, dx
code:19E9                 mov     [si], al
code:19EB                 call    SETTON
code:19EE                 pop     si
code:19EF done:                                                       ; CODE XREF: PLAY+443↑j
code:19EF                                                             ; PLAY+449↑j
code:19EF                 retn
code:19F0 ; ---------------------------------------------------------------------------
code:19F0 _vcmdSetTrack1d:                                            ; CODE XREF: PLAY+179↑j
code:19F0                                                             ; PLAY:_vcmdSetTrack1d↓j
code:19F0                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:19F0                 jmp     short _vcmdSetTrack1d               ; jumptable 000000000000170C case 40
code:19F2 ; ---------------------------------------------------------------------------
code:19F2 vcmdSetTrack1d:
code:19F2                 mov     al, [si]
code:19F4                 rol     al, 1
code:19F6                 rol     al, 1
code:19F8                 rol     al, 1
code:19FA                 rol     al, 1
code:19FC                 and     al, 11110000b
code:19FE                 mov     [di+trackState.unused_5], al        ; Offset 1Dh inside instrument
code:1A01                 inc     si
code:1A02                 retn
code:1A03 ; ---------------------------------------------------------------------------
code:1A03 vcmdSetTrackTNFlags:                                        ; CODE XREF: PLAY+179↑j
code:1A03                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A03                 mov     al, [di+trackState.track_flags]     ; jumptable 000000000000170C case 16
code:1A06                 and     al, not (t_tone or t_noise)
code:1A08                 or      al, [si]
code:1A0A                 mov     [di+trackState.track_flags], al
code:1A0D                 inc     si
code:1A0E                 retn
code:1A0F ; ---------------------------------------------------------------------------
code:1A0F vcmdSetPortamento:                                          ; CODE XREF: PLAY+179↑j
code:1A0F                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A0F                 mov     al, [si]                            ; jumptable 000000000000170C case 4
code:1A11                 mov     [di+trackState.porta_speed], al
code:1A14                 mov     [di+trackState.note_offset_rel], 0
code:1A18                 inc     si
code:1A19                 retn
code:1A1A ; ---------------------------------------------------------------------------
code:1A1A Sets note offset relative to last played note
code:1A1A vcmdSetNoteOffsetRel:                                       ; CODE XREF: PLAY+179↑j
code:1A1A                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A1A                 mov     al, [si]                            ; jumptable 000000000000170C case 20
code:1A1C                 mov     [di+trackState.note_offset_rel], al
code:1A1F                 mov     [di+trackState.porta_speed], 0
code:1A23                 inc     si
code:1A24                 retn
code:1A25 ; ---------------------------------------------------------------------------
code:1A25 _vcmdToggleFM3:                                             ; CODE XREF: PLAY+179↑j
code:1A25                                                             ; PLAY+26E↑p
code:1A25                                                             ; PLAY+2A8↑p
code:1A25                                                             ; PLAY:_vcmdToggleFM3↓j
code:1A25                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A25                 jmp     short _vcmdToggleFM3                ; jumptable 000000000000170C case 43
code:1A27 ; ---------------------------------------------------------------------------
code:1A27 vcmdToggleFM3:
code:1A27                 mov     al, [di+trackState.fm3_enabled]
code:1A2A                 xor     al, TRUE
code:1A2C                 mov     [di+trackState.fm3_enabled], al
code:1A2F                 cmp     [di+trackState.is_blocked], FALSE
code:1A33                 jz      short _arg_is_enable
code:1A35                 retn
code:1A36 ; ---------------------------------------------------------------------------
code:1A36 _arg_is_enable:                                             ; CODE XREF: PLAY+4A0↑j
code:1A36                 mov     [FM3EX_ENABLED], al
code:1A39                 and     al, al
code:1A3B                 jz      short disable
code:1A3D enable:
code:1A3D                 mov     al, OPN_TIMER_CTRL
code:1A3F                 call    SFMADR                              ; AL=OPN_REG
code:1A42                 mov     al, TIMERA_RUN or TIMERA_IRQ_EN or TIMERA_FLAG_CLR or TIMERB_FLAG_CLR or CH3_MODE_CSM
code:1A44                 call    SFMDAT
code:1A47                 retn
code:1A48 ; ---------------------------------------------------------------------------
code:1A48 disable:                                                    ; CODE XREF: PLAY+4A8↑j
code:1A48                 mov     al, OPN_TIMER_CTRL
code:1A4A                 call    SFMADR                              ; AL=OPN_REG
code:1A4D                 mov     al, TIMERA_RUN or TIMERA_IRQ_EN or TIMERA_FLAG_CLR or TIMERB_FLAG_CLR
code:1A4F                 call    SFMDAT
code:1A52                 retn
code:1A53 ; ---------------------------------------------------------------------------
code:1A53 _vcmdSetFM3Notes:                                           ; CODE XREF: PLAY+179↑j
code:1A53                                                             ; PLAY:_vcmdSetFM3Notes↓j
code:1A53                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A53                 jmp     short _vcmdSetFM3Notes              ; jumptable 000000000000170C case 44
code:1A55 ; ---------------------------------------------------------------------------
code:1A55 vcmdSetFM3Notes:
code:1A55                 mov     al, [si]
code:1A57                 mov     [FM3_OP2], al
code:1A5A                 inc     si
code:1A5B                 mov     al, [si]
code:1A5D                 mov     [FM3_OP3], al
code:1A60                 inc     si
code:1A61                 mov     al, [si]
code:1A63                 mov     [FM3_OP1], al
code:1A66                 inc     si
code:1A67                 retn
code:1A68 ; ---------------------------------------------------------------------------
code:1A68 vcmdJumpIfFm:                                               ; CODE XREF: PLAY+179↑j
code:1A68                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A68                 cmp     [di+trackState.output_channel], 3   ; jumptable 000000000000170C case 33
code:1A6B                 jnb     short skipWord
code:1A6D                 mov     si, [si]
code:1A6F                 retn
code:1A70 ; ---------------------------------------------------------------------------
code:1A70 vcmdJumpIfSsg:                                              ; CODE XREF: PLAY+179↑j
code:1A70                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A70                 cmp     [di+trackState.output_channel], 3   ; jumptable 000000000000170C case 34
code:1A73                 jb      short skipWord
code:1A75                 mov     si, [si]
code:1A77                 retn
code:1A78 ; ---------------------------------------------------------------------------
code:1A78 vcmdJumpIfChanEq:                                           ; CODE XREF: PLAY+179↑j
code:1A78                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A78                 mov     al, [si]                            ; jumptable 000000000000170C case 42
code:1A7A                 inc     si
code:1A7B                 cmp     al, [di+trackState.output_channel]
code:1A7D                 jnz     short skipWord
code:1A7F                 mov     si, [si]
code:1A81                 retn
code:1A82 ; ---------------------------------------------------------------------------
code:1A82 vcmdSkipWordIfFm:                                           ; CODE XREF: PLAY+179↑j
code:1A82                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A82                 cmp     [di+trackState.output_channel], 3   ; jumptable 000000000000170C case 37
code:1A85                 jb      short skipWord
code:1A87                 retn
code:1A88 ; ---------------------------------------------------------------------------
code:1A88 vcmdSkipWordIfSsg:                                          ; CODE XREF: PLAY+179↑j
code:1A88                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A88                 cmp     [di+trackState.output_channel], 3   ; jumptable 000000000000170C case 38
code:1A8B                 jnb     short skipWord
code:1A8D                 retn
code:1A8E ; ---------------------------------------------------------------------------
code:1A8E vcmdJumpIfChanNeq:                                          ; CODE XREF: PLAY+179↑j
code:1A8E                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A8E                 mov     al, [si]                            ; jumptable 000000000000170C case 41
code:1A90                 inc     si
code:1A91                 cmp     al, [di+trackState.output_channel]
code:1A93                 jz      short skipWord
code:1A95                 retn
code:1A96 ; ---------------------------------------------------------------------------
code:1A96 skipWord:                                                   ; CODE XREF: PLAY+4D8↑j
code:1A96                                                             ; PLAY+4E0↑j
code:1A96                                                             ; PLAY+4EA↑j
code:1A96                                                             ; PLAY+4F2↑j
code:1A96                                                             ; PLAY+4F8↑j
code:1A96                                                             ; PLAY+500↑j
code:1A96                 inc     si
code:1A97                 inc     si
code:1A98                 retn
code:1A99 ; ---------------------------------------------------------------------------
code:1A99 vcmdSetSongPtrOffset:                                       ; CODE XREF: PLAY+179↑j
code:1A99                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1A99                 mov     al, [si]                            ; jumptable 000000000000170C case 11
code:1A9B                 inc     si
code:1A9C                 push    si
code:1A9D                 mov     si, offset SONG_NUMBER_OFFSETS
code:1AA0                 mov     cx, 4
code:1AA3 _loop:                                                      ; CODE XREF: PLAY+516↓j
code:1AA3                 cmp     [byte ptr si], 0                    ; Look for non-zero offset index
code:1AA6                 jz      short _do_set_offset
code:1AA8                 inc     si
code:1AA9                 loop    _loop
code:1AAB                 pop     si
code:1AAC                 retn
code:1AAD ; ---------------------------------------------------------------------------
code:1AAD _do_set_offset:                                             ; CODE XREF: PLAY+513↑j
code:1AAD                 mov     [si], al
code:1AAF                 pop     si
code:1AB0                 retn
code:1AB1 ; ---------------------------------------------------------------------------
code:1AB1 _vcmdRawWrite:                                              ; CODE XREF: PLAY+179↑j
code:1AB1                                                             ; PLAY:_vcmdRawWrite↓j
code:1AB1                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1AB1                 jmp     short _vcmdRawWrite                 ; jumptable 000000000000170C case 39
code:1AB3 ; ---------------------------------------------------------------------------
code:1AB3 vcmdRawWrite:
code:1AB3                 cmp     [di+trackState.is_blocked], FALSE
code:1AB7                 jz      short _not_blocked
code:1AB9                 inc     si
code:1ABA                 inc     si
code:1ABB                 retn
code:1ABC ; ---------------------------------------------------------------------------
code:1ABC _not_blocked:                                               ; CODE XREF: PLAY+524↑j
code:1ABC                 mov     al, [si]
code:1ABE                 call    SFMADR                              ; AL=OPN_REG
code:1AC1                 inc     si
code:1AC2                 mov     al, [si]
code:1AC4                 call    SFMDAT
code:1AC7                 inc     si
code:1AC8                 retn
code:1AC9 ; ---------------------------------------------------------------------------
code:1AC9 _vcmdSetFM3Fnums:                                           ; CODE XREF: PLAY+179↑j
code:1AC9                                                             ; PLAY:_vcmdSetFM3Fnums↓j
code:1AC9                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1AC9                 jmp     short _vcmdSetFM3Fnums              ; jumptable 000000000000170C case 45
code:1ACB ; ---------------------------------------------------------------------------
code:1ACB vcmdSetFM3Fnums:
code:1ACB                 cmp     [di+trackState.is_blocked], FALSE
code:1ACF                 jz      short _fm3_not_blocked
code:1AD1                 add     si, 6
code:1AD4                 retn
code:1AD5 ; ---------------------------------------------------------------------------
code:1AD5 _fm3_not_blocked:                                           ; CODE XREF: PLAY+53C↑j
code:1AD5                 mov     ax, [si]                            ; These are never used, just assuming
code:1AD7                 mov     [FM3_OP2_FNUM], ax
code:1ADA                 add     si, 2
code:1ADD                 mov     ax, [si]
code:1ADF                 mov     [FM3_OP3_FNUM], ax
code:1AE2                 add     si, 2
code:1AE5                 mov     al, [si]
code:1AE7                 mov     [FM3_OP1_FNUM], al
code:1AEA                 inc     si
code:1AEB                 inc     si
code:1AEC                 retn
code:1AED ; ---------------------------------------------------------------------------
code:1AED vcmdDisable_j:                                              ; CODE XREF: PLAY+179↑j
code:1AED                                                             ; DATA XREF: code:VCMD_JUMPTABLE↑o
code:1AED                 jmp     vcmdDisable                         ; jumptable 000000000000170C cases 24,28,30,31
code:1AED ; END OF FUNCTION CHUNK FOR PLAY
code:1AED ; ---------------------------------------------------------------------------
code:1AF0 aSetton         db '  SETTON  '
code:1AFA ; =============== S U B R O U T I N E =======================================
code:1AFA proc            SETTON near                                 ; CODE XREF: PLAY+6F↑p
code:1AFA                                                             ; PLAY+111↑p
code:1AFA                                                             ; PLAY+458↑p
code:1AFA                 cmp     [di+trackState.is_blocked], FALSE
code:1AFE                 jz      short not_blocked
code:1B00                 retn
code:1B01 ; ---------------------------------------------------------------------------
code:1B01 not_blocked:                                                ; CODE XREF: SETTON+4↑j
code:1B01                 cmp     [di+trackState.output_channel], 3
code:1B04                 jb      short is_fm
code:1B06                 retn
code:1B07 ; ---------------------------------------------------------------------------
code:1B07 is_fm:                                                      ; CODE XREF: SETTON+A↑j
code:1B07                 mov     ax, 800Fh                           ; SET RR
code:1B0A                 call    WFMDAT                              ; AL=chan, AH=reg
code:1B0D                 mov     ax, 840Fh
code:1B10                 call    WFMDAT                              ; AL=chan, AH=reg
code:1B13                 mov     ax, 880Fh
code:1B16                 call    WFMDAT                              ; AL=chan, AH=reg
code:1B19                 mov     ax, 8C0Fh
code:1B1C                 call    WFMDAT                              ; AL=chan, AH=reg
code:1B1F                 mov     [di+trackState.fm_alg], 7           ; set alg to all carriers
code:1B23                 mov     al, OPN_KEY_ON_OFF
code:1B25                 call    SFMADR                              ; AL=OPN_REG
code:1B28                 mov     al, [di+trackState.output_channel]
code:1B2A                 call    SFMDAT                              ; do key-off on the channel
code:1B2D                 mov     al, [di+trackState.instrument]
code:1B30                 mov     cl, 20h
code:1B32                 mul     cl
code:1B34                 add     ax, [ptrFM_TONE_TBL]
code:1B38                 mov     si, ax
code:1B3A                 push    si
code:1B3B                 add     si, 0
code:1B3E                 mov     ah, OPN_DT_MULT_CH1_OP1
code:1B40                 mov     cx, FmTone.fbalg                    ; 1Ch items to load
code:1B43 loop:                                                       ; CODE XREF: SETTON+52↓j
code:1B43                 mov     al, [si+FmTone.op1_dtml]
code:1B45                 call    WFMDAT                              ; AL=chan, AH=reg
code:1B48                 inc     si
code:1B49                 add     ah, 4
code:1B4C                 loop    loop
code:1B4E                 pop     si
code:1B4F                 push    si
code:1B50                 add     si, FmTone.fbalg
code:1B53                 mov     al, [si]
code:1B55                 mov     ah, OPN_FEEDBACK_ALGO_CH1
code:1B57                 call    WFMDAT                              ; AL=chan, AH=reg
code:1B5A                 mov     al, [si]
code:1B5C                 and     al, 00000111b
code:1B5E                 mov     [di+trackState.fm_alg], al
code:1B61                 pop     si
code:1B62                 push    si
code:1B63                 add     si, FmTone.unused
code:1B66                 mov     al, [si]
code:1B68                 mov     [di+trackState.unused_5], al        ; Offset 1Dh inside instrument
code:1B6B                 pop     si
code:1B6C                 add     si, 4
code:1B6F                 mov     al, [si]
code:1B71                 mov     [di+trackState.op1_tl], al
code:1B74                 mov     al, [si+1]
code:1B77                 mov     [di+trackState.op3_tl], al
code:1B7A                 mov     al, [si+2]
code:1B7D                 mov     [di+trackState.op2_tl], al
code:1B80                 mov     al, [si+3]
code:1B83                 mov     [di+trackState.op4_tl], al
code:1B86                 retn
code:1B86 endp            SETTON
code:1B86 ; ---------------------------------------------------------------------------
code:1B87 aFmfrq          db '  FMFRQ  '
code:1B90 ; =============== S U B R O U T I N E =======================================
code:1B90 proc            FMFRQ near                                  ; CODE XREF: PWSEP:loc_140F↑p
code:1B90                                                             ; GET_FNUM+6↓p
code:1B90                                                             ; KEYON+4F↓p
code:1B90                                                             ; KEYON+B4↓p
code:1B90                 mov     cl, 2
code:1B92                 mul     cl
code:1B94                 mov     si, offset FM_FREQTBL
code:1B97                 add     si, ax
code:1B99                 mov     bx, [si]
code:1B9B                 add     bx, [CUR_FNUM_OFFSET]
code:1B9F                 mov     ah, 0
code:1BA1                 mov     al, [di+trackState.fine_tune]
code:1BA4                 and     al, al
code:1BA6                 jns     short loc_1BAA
code:1BA8                 mov     ah, 0FFh
code:1BAA loc_1BAA:                                                   ; CODE XREF: FMFRQ+16↑j
code:1BAA                 add     bx, ax
code:1BAC                 cmp     [di+trackState.porta_speed], 0
code:1BB0                 jz      short do_write_freq
code:1BB2                 mov     ax, [di+trackState.frequency]
code:1BB5                 mov     [di+trackState.porta_target_freq], bx
code:1BB8                 mov     bx, ax
code:1BBA do_write_freq:                                              ; CODE XREF: FMFRQ+20↑j
code:1BBA                 mov     al, bh
code:1BBC                 mov     ah, OPN_FNUM_H_BLOCK_CH1
code:1BBE                 call    WFMDAT                              ; AL=chan, AH=reg
code:1BC1                 mov     al, bl
code:1BC3                 mov     ah, OPN_FNUM_L_CH1
code:1BC5                 call    WFMDAT                              ; AL=chan, AH=reg
code:1BC8                 mov     ax, bx
code:1BCA                 retn
code:1BCA endp            FMFRQ
code:1BCA ; ---------------------------------------------------------------------------
code:1BCB FM_FREQTBL      dw     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0; 0
code:1BCB                                                             ; DATA XREF: FMFRQ+4↑o
code:1BE3                 dw  26Ah, 28Fh, 2B6h, 2DFh, 30Bh, 339h, 36Ah, 39Eh, 3D5h, 410h, 44Eh, 48Fh; 12
code:1BFB                 dw 0A6Ah,0A8Fh,0AB6h,0ADFh,0B0Bh,0B39h,0B6Ah,0B9Eh,0BD5h,0C10h,0C4Eh,0C8Fh; 24
code:1C13                 dw 126Ah,128Fh,12B6h,12DFh,130Bh,1339h,136Ah,139Eh,13D5h,1410h,144Eh,148Fh; 36
code:1C2B                 dw 1A6Ah,1A8Fh,1AB6h,1ADFh,1B0Bh,1B39h,1B6Ah,1B9Eh,1BD5h,1C10h,1C4Eh,1C8Fh; 48
code:1C43                 dw 226Ah,228Fh,22B6h,22DFh,230Bh,2339h,236Ah,239Eh,23D5h,2410h,244Eh,248Fh; 60
code:1C5B                 dw 2A6Ah,2A8Fh,2AB6h,2ADFh,2B0Bh,2B39h,2B6Ah,2B9Eh,2BD5h,2C10h,2C4Eh,2C8Fh; 72
code:1C73                 dw 326Ah,328Fh,32B6h,32DFh,330Bh,3339h,336Ah,339Eh,33D5h,3410h,344Eh,348Fh; 84
code:1C8B                 dw 3A6Ah,3A8Fh,3AB6h,3ADFh,3B0Bh,3B39h,3B6Ah,3B9Eh,3BD5h,3C10h,3C4Eh,3C8Fh; 96
code:1CA3                 dw     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0; 108
code:1CBB aSsgfrq         db '  SSGFRQ  '
code:1CC5 ; =============== S U B R O U T I N E =======================================
code:1CC5 proc            SSGFRQ near                                 ; CODE XREF: PWSEP:loc_1409↑p
code:1CC5                                                             ; KEYON:_is_ssg↓p
code:1CC5                                                             ; KEYON:is_ssg__↓p
code:1CC5                                                             ; KEYON:is_ssg↓p
code:1CC5                 mov     ah, [di+trackState.track_flags]
code:1CC8                 and     ah, t_tone
code:1CCB                 jnz     short _tone_enabled
code:1CCD                 mov     ax, 0
code:1CD0                 retn
code:1CD1 ; ---------------------------------------------------------------------------
code:1CD1 _tone_enabled:                                              ; CODE XREF: SSGFRQ+6↑j
code:1CD1                 mov     cl, 2
code:1CD3                 mul     cl
code:1CD5                 mov     si, offset SSG_PERIOD_TBL
code:1CD8                 add     si, ax
code:1CDA                 mov     bx, [si]
code:1CDC                 mov     ah, 0
code:1CDE                 mov     al, [di+trackState.fine_tune]
code:1CE1                 and     al, al
code:1CE3                 jns     short loc_1CE7
code:1CE5                 mov     ah, 0FFh
code:1CE7 loc_1CE7:                                                   ; CODE XREF: SSGFRQ+1E↑j
code:1CE7                 add     bx, ax
code:1CE9                 cmp     [di+trackState.porta_speed], 0
code:1CED                 jz      short loc_1CF7
code:1CEF                 mov     ax, [di+trackState.frequency]
code:1CF2                 mov     [di+trackState.porta_target_freq], bx
code:1CF5                 mov     bx, ax
code:1CF7 loc_1CF7:                                                   ; CODE XREF: SSGFRQ+28↑j
code:1CF7                 mov     cl, [di+trackState.output_channel]
code:1CF9                 sub     cl, 3
code:1CFC                 rol     cl, 1
code:1CFE                 mov     al, cl
code:1D00                 call    SSGADR
code:1D03                 mov     al, bl
code:1D05                 call    SSGDAT
code:1D08                 mov     al, cl
code:1D0A                 inc     al
code:1D0C                 call    SSGADR
code:1D0F                 mov     al, bh
code:1D11                 call    SSGDAT
code:1D14                 mov     ax, bx
code:1D16                 retn
code:1D16 endp            SSGFRQ
code:1D16 ; ---------------------------------------------------------------------------
code:1D17 SSG_PERIOD_TBL  dw 0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h; 0
code:1D17                                                             ; DATA XREF: SSGFRQ+10↑o
code:1D2F                 dw 0EE8h,0E12h,0D48h,0C89h,0BD5h,0B2Bh,0A8Ah,09F3h,0964h,08DDh,085Eh,07E6h; 12
code:1D47                 dw 0774h,0709h,06A4h,0645h,05EBh,0596h,0545h,04FAh,04B2h,046Fh,042Fh,03F3h; 24
code:1D5F                 dw 03BAh,0385h,0352h,0322h,02F5h,02CBh,02A3h,027Dh,0259h,0237h,0218h,01FAh; 36
code:1D77                 dw 01DDh,01C2h,01A9h,0191h,017Bh,0165h,0151h,013Eh,012Dh,011Ch,010Ch,00FDh; 48
code:1D8F                 dw 00EFh,00E1h,00D5h,00C9h,00BDh,00B3h,00A9h,009Fh,0096h,008Eh,0086h,007Eh; 60
code:1DA7                 dw 0077h,0071h,006Ah,0064h,005Fh,0059h,0054h,0050h,004Bh,0047h,0043h,003Fh; 72
code:1DBF                 dw 003Ch,0038h,0035h,0032h,002Fh,002Dh,002Ah,0028h,0026h,0023h,0021h,0020h; 84
code:1DD7                 dw 001Eh,001Ch,001Bh,0019h,0018h,0016h,0015h,0014h,0013h,0012h,0011h,0010h; 96
code:1DEF                 dw 0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h,0000h; 108
code:1E07 aWfmdat         db '  WFMDAT  '
code:1E11 ; =============== S U B R O U T I N E =======================================
code:1E11 ; AL=chan, AH=reg
code:1E11 proc            WFMDAT near                                 ; CODE XREF: SOFTVB+50↑p
code:1E11                                                             ; SOFTVB+57↑p
code:1E11                                                             ; SETTON+10↑p
code:1E11                                                             ; SETTON+16↑p
code:1E11                                                             ; SETTON+1C↑p
code:1E11                                                             ; SETTON+22↑p
code:1E11                                                             ; SETTON+4B↑p
code:1E11                                                             ; SETTON+5D↑p
code:1E11                                                             ; FMFRQ+2E↑p
code:1E11                                                             ; FMFRQ+35↑p
code:1E11                                                             ; SETTL:do_write↓p
code:1E11                 cmp     [di+trackState.is_blocked], FALSE
code:1E15                 jz      short track_unblocked
code:1E17                 retn
code:1E18 ; ---------------------------------------------------------------------------
code:1E18 track_unblocked:                                            ; CODE XREF: WFMDAT+4↑j
code:1E18                 cmp     [di+trackState.output_channel], 3
code:1E1B                 jb      short is_fm
code:1E1D                 retn
code:1E1E ; ---------------------------------------------------------------------------
code:1E1E is_fm:                                                      ; CODE XREF: WFMDAT+A↑j
code:1E1E                 push    dx
code:1E1F                 push    ax
code:1E20                 mov     al, ah
code:1E22                 add     al, [di]
code:1E24                 call    SFMADR                              ; AL=OPN_REG
code:1E27                 pop     ax
code:1E28                 call    SFMDAT
code:1E2B                 pop     dx
code:1E2C                 retn
code:1E2C endp            WFMDAT
code:1E2C ; ---------------------------------------------------------------------------
code:1E2D aSfmadr         db '  SFMADR  '
code:1E37 ; =============== S U B R O U T I N E =======================================
code:1E37 ; AL=OPN_REG
code:1E37 proc            SFMADR near                                 ; CODE XREF: INIT_TRACKS+56↑p
code:1E37                                                             ; PLAY_INTERRUPT+3A↑p
code:1E37                                                             ; PLAY_INTERRUPT+4F↑p
code:1E37                                                             ; PLAY+2C9↑p
code:1E37                                                             ; PLAY+4AC↑p
code:1E37                                                             ; PLAY+4B7↑p
code:1E37                                                             ; PLAY+52B↑p
code:1E37                                                             ; SETTON+2B↑p
code:1E37                                                             ; WFMDAT+13↑p
code:1E37                                                             ; KEYOFF+1C↓p
code:1E37                                                             ; POLYON+27↓p
code:1E37                                                             ; POLYON+31↓p
code:1E37                                                             ; POLYON+41↓p
code:1E37                                                             ; POLYON+4B↓p
code:1E37                                                             ; POLYON+5B↓p
code:1E37                                                             ; POLYON+65↓p
code:1E37                                                             ; KEYON+81↓p
code:1E37                                                             ; AKEYOF+16↓p
code:1E37                                                             ; AKEYOF+26↓p
code:1E37                                                             ; SETTIM+3↓p
code:1E37                                                             ; SETTIM+11↓p
code:1E37                                                             ; SETTIM+1C↓p
code:1E37                 push    ax
code:1E38                 out     DUMMY_WAIT06, al
code:1E3A                 mov     dx, PC98_OPN_P0_ADDR
code:1E3D loop:                                                       ; CODE XREF: SFMADR+9↓j
code:1E3D                 in      al, dx
code:1E3E                 test    al, 10000000b
code:1E40                 jnz     short loop                          ; Wait for OPN to prepare bus
code:1E42                 pop     ax
code:1E43                 out     DUMMY_WAIT06, al
code:1E45                 out     DUMMY_WAIT06, al
code:1E47                 out     DUMMY_WAIT06, al
code:1E49                 out     DUMMY_WAIT06, al
code:1E4B                 out     DUMMY_WAIT06, al
code:1E4D                 out     DUMMY_WAIT06, al
code:1E4F                 out     DUMMY_WAIT06, al
code:1E51                 out     DUMMY_WAIT06, al
code:1E53                 mov     [byte ptr cs:LAST_ADDR], al
code:1E57                 out     dx, al
code:1E58                 retn
code:1E58 endp            SFMADR
code:1E58 ; ---------------------------------------------------------------------------
code:1E59 aSfmdat         db '  SFMDAT  '
code:1E63 ; =============== S U B R O U T I N E =======================================
code:1E63 proc            SFMDAT near                                 ; CODE XREF: INIT_TRACKS+5B↑p
code:1E63                                                             ; PLAY_INTERRUPT+3F↑p
code:1E63                                                             ; PLAY_INTERRUPT+54↑p
code:1E63                                                             ; PLAY+2CE↑p
code:1E63                                                             ; PLAY+4B1↑p
code:1E63                                                             ; PLAY+4BC↑p
code:1E63                                                             ; PLAY+531↑p
code:1E63                                                             ; SETTON+30↑p
code:1E63                                                             ; WFMDAT+17↑p
code:1E63                                                             ; KEYOFF+23↓p
code:1E63                                                             ; POLYON+2C↓p
code:1E63                                                             ; POLYON+36↓p
code:1E63                                                             ; POLYON+46↓p
code:1E63                                                             ; POLYON+50↓p
code:1E63                                                             ; POLYON+60↓p
code:1E63                                                             ; POLYON+6A↓p
code:1E63                                                             ; KEYON+8A↓p
code:1E63                                                             ; AKEYOF+1B↓p
code:1E63                                                             ; AKEYOF+2B↓p
code:1E63                                                             ; AKEYOF+30↓p
code:1E63                                                             ; AKEYOF+35↓p
code:1E63                                                             ; SETTIM+C↓p
code:1E63                                                             ; SETTIM+17↓p
code:1E63                                                             ; SETTIM+21↓p
code:1E63                 push    ax
code:1E64                 out     DUMMY_WAIT06, al
code:1E66                 mov     dx, PC98_OPN_P0_ADDR
code:1E69 loop:                                                       ; CODE XREF: SFMDAT+9↓j
code:1E69                 in      al, dx
code:1E6A                 test    al, 10000000b
code:1E6C                 jnz     short loop
code:1E6E                 pop     ax
code:1E6F                 out     DUMMY_WAIT06, al
code:1E71                 out     DUMMY_WAIT06, al
code:1E73                 out     DUMMY_WAIT06, al
code:1E75                 out     DUMMY_WAIT06, al
code:1E77                 out     DUMMY_WAIT06, al
code:1E79                 out     DUMMY_WAIT06, al
code:1E7B                 out     DUMMY_WAIT06, al
code:1E7D                 out     DUMMY_WAIT06, al
code:1E7F                 push    si
code:1E80                 mov     si, [cs:LAST_ADDR]
code:1E85                 mov     [cs:OPN_BUF+si], al
code:1E8A                 pop     si
code:1E8B                 mov     dx, PC98_OPN_P0_DATA
code:1E8E                 out     dx, al
code:1E8F                 retn
code:1E8F endp            SFMDAT
code:1E8F ; ---------------------------------------------------------------------------
code:1E90 aSsgadr         db '  SSGADR  '
code:1E9A ; =============== S U B R O U T I N E =======================================
code:1E9A proc            SSGADR near                                 ; CODE XREF: SOFTVB+37↑p
code:1E9A                                                             ; SOFTVB+43↑p
code:1E9A                                                             ; PLAY+3AF↑p
code:1E9A                                                             ; PLAY+3C5↑p
code:1E9A                                                             ; SSGFRQ+3B↑p
code:1E9A                                                             ; SSGFRQ+47↑p
code:1E9A                                                             ; SETVOL+15↓p
code:1E9A                 push    ax
code:1E9B                 out     DUMMY_WAIT06, al
code:1E9D                 mov     dx, PC98_OPN_P0_ADDR
code:1EA0 loop:                                                       ; CODE XREF: SSGADR+9↓j
code:1EA0                 in      al, dx
code:1EA1                 test    al, 10000000b
code:1EA3                 jnz     short loop
code:1EA5                 pop     ax
code:1EA6                 out     DUMMY_WAIT06, al
code:1EA8                 out     DUMMY_WAIT06, al
code:1EAA                 out     DUMMY_WAIT06, al
code:1EAC                 out     DUMMY_WAIT06, al
code:1EAE                 out     DUMMY_WAIT06, al
code:1EB0                 out     DUMMY_WAIT06, al
code:1EB2                 out     DUMMY_WAIT06, al
code:1EB4                 out     DUMMY_WAIT06, al
code:1EB6                 cmp     [di+trackState.is_blocked], FALSE
code:1EBA                 jnz     short locret_1EC6
code:1EBC                 and     al, 0Fh
code:1EBE                 mov     [byte ptr cs:LAST_ADDR], al
code:1EC2                 mov     dx, PC98_OPN_P0_ADDR
code:1EC5                 out     dx, al
code:1EC6 locret_1EC6:                                                ; CODE XREF: SSGADR+20↑j
code:1EC6                 retn
code:1EC6 endp            SSGADR
code:1EC6 ; ---------------------------------------------------------------------------
code:1EC7 aSsgdat         db '  SSGDAT  '
code:1ED1 ; =============== S U B R O U T I N E =======================================
code:1ED1 proc            SSGDAT near                                 ; CODE XREF: SOFTVB+3C↑p
code:1ED1                                                             ; SOFTVB+48↑p
code:1ED1                                                             ; PLAY+3B8↑p
code:1ED1                                                             ; PLAY+3D3↑p
code:1ED1                                                             ; SSGFRQ+40↑p
code:1ED1                                                             ; SSGFRQ+4C↑p
code:1ED1                                                             ; SETVOL+19↓p
code:1ED1                 push    ax
code:1ED2                 out     DUMMY_WAIT06, al
code:1ED4                 mov     dx, PC98_OPN_P0_ADDR
code:1ED7 loop:                                                       ; CODE XREF: SSGDAT+9↓j
code:1ED7                 in      al, dx
code:1ED8                 test    al, 10000000b
code:1EDA                 jnz     short loop
code:1EDC                 pop     ax
code:1EDD                 out     DUMMY_WAIT06, al
code:1EDF                 out     DUMMY_WAIT06, al
code:1EE1                 out     DUMMY_WAIT06, al
code:1EE3                 out     DUMMY_WAIT06, al
code:1EE5                 out     DUMMY_WAIT06, al
code:1EE7                 out     DUMMY_WAIT06, al
code:1EE9                 out     DUMMY_WAIT06, al
code:1EEB                 out     DUMMY_WAIT06, al
code:1EED                 cmp     [di+trackState.is_blocked], 0
code:1EF1                 jnz     short locret_1F03
code:1EF3                 push    si
code:1EF4                 mov     si, [cs:LAST_ADDR]
code:1EF9                 mov     [cs:OPN_BUF+si], al
code:1EFE                 pop     si
code:1EFF                 mov     dx, PC98_OPN_P0_DATA
code:1F02                 out     dx, al
code:1F03 locret_1F03:                                                ; CODE XREF: SSGDAT+20↑j
code:1F03                 retn
code:1F03 endp            SSGDAT
code:1F03 ; ---------------------------------------------------------------------------
code:1F04 aSgadr          db '  SGADR  '
code:1F0D ; =============== S U B R O U T I N E =======================================
code:1F0D proc            SGADR near                                  ; CODE XREF: PLAY_INTERRUPT+1AD↑p
code:1F0D                                                             ; SGDRUM+4F↑p
code:1F0D                                                             ; NOIADD+17↑p
code:1F0D                                                             ; PLAY+7D↑p
code:1F0D                                                             ; AKEYOF+7↓p
code:1F0D                                                             ; AKEYOF+3A↓p
code:1F0D                                                             ; AKEYOF+44↓p
code:1F0D                                                             ; AKEYOF+4E↓p
code:1F0D                 push    ax
code:1F0E                 out     DUMMY_WAIT06, al
code:1F10                 mov     dx, PC98_OPN_P0_ADDR
code:1F13 loop:                                                       ; CODE XREF: SGADR+9↓j
code:1F13                 in      al, dx
code:1F14                 test    al, 10000000b
code:1F16                 jnz     short loop
code:1F18                 pop     ax
code:1F19                 out     5Fh, al
code:1F1B                 out     DUMMY_WAIT06, al
code:1F1D                 out     DUMMY_WAIT06, al
code:1F1F                 out     DUMMY_WAIT06, al
code:1F21                 out     DUMMY_WAIT06, al
code:1F23                 out     DUMMY_WAIT06, al
code:1F25                 out     DUMMY_WAIT06, al
code:1F27                 out     DUMMY_WAIT06, al
code:1F29                 and     al, 1111b
code:1F2B                 mov     [byte ptr cs:LAST_ADDR], al
code:1F2F                 out     dx, al
code:1F30                 retn
code:1F30 endp            SGADR
code:1F30 ; ---------------------------------------------------------------------------
code:1F31 aSgdat          db '  SGDAT  '
code:1F3A ; =============== S U B R O U T I N E =======================================
code:1F3A proc            SGDAT near                                  ; CODE XREF: PLAY_INTERRUPT+1B1↑p
code:1F3A                                                             ; SGDRUM+53↑p
code:1F3A                                                             ; NOIADD+24↑p
code:1F3A                                                             ; PLAY+82↑p
code:1F3A                                                             ; AKEYOF+C↓p
code:1F3A                                                             ; AKEYOF+3F↓p
code:1F3A                                                             ; AKEYOF+49↓p
code:1F3A                                                             ; AKEYOF+53↓p
code:1F3A                 push    ax
code:1F3B                 out     DUMMY_WAIT06, al
code:1F3D                 mov     dx, PC98_OPN_P0_ADDR
code:1F40 loc_1F40:                                                   ; CODE XREF: SGDAT+9↓j
code:1F40                 in      al, dx
code:1F41                 test    al, 10000000b
code:1F43                 jnz     short loc_1F40
code:1F45                 pop     ax
code:1F46                 out     DUMMY_WAIT06, al
code:1F48                 out     DUMMY_WAIT06, al
code:1F4A                 out     DUMMY_WAIT06, al
code:1F4C                 out     DUMMY_WAIT06, al
code:1F4E                 out     DUMMY_WAIT06, al
code:1F50                 out     DUMMY_WAIT06, al
code:1F52                 out     DUMMY_WAIT06, al
code:1F54                 out     DUMMY_WAIT06, al
code:1F56                 push    si
code:1F57                 mov     si, [cs:LAST_ADDR]
code:1F5C                 mov     [cs:OPN_BUF+si], al
code:1F61                 pop     si
code:1F62                 mov     dx, PC98_OPN_P0_DATA
code:1F65                 out     dx, al
code:1F66                 retn
code:1F66 endp            SGDAT
code:1F66 ; ---------------------------------------------------------------------------
code:1F67 aSettl          db '  SETTL  '
code:1F70 ; =============== S U B R O U T I N E =======================================
code:1F70 proc            SETTL near                                  ; CODE XREF: INIT_TRACKS+51↑p
code:1F70                                                             ; SOFTEV:is_fm↑p
code:1F70                                                             ; KEYON:is_fm_set_tl↓p
code:1F70                 cmp     [di+trackState.is_blocked], FALSE
code:1F74                 jz      short not_blocked
code:1F76                 retn
code:1F77 ; ---------------------------------------------------------------------------
code:1F77 not_blocked:                                                ; CODE XREF: SETTL+4↑j
code:1F77                 cmp     [di+trackState.output_channel], 3
code:1F7A                 jb      short is_fm_channel
code:1F7C                 retn
code:1F7D ; ---------------------------------------------------------------------------
code:1F7D is_fm_channel:                                              ; CODE XREF: SETTL+A↑j
code:1F7D                 call    STORE_VOL
code:1F80                 and     al, 00001111b
code:1F82                 mov     ah, 0
code:1F84                 add     ax, offset VOL_TBL
code:1F87                 mov     si, ax
code:1F89                 mov     ch, [si]
code:1F8B                 push    cx
code:1F8C                 mov     al, [di+trackState.fm_alg]
code:1F8F                 and     al, 00000111b
code:1F91                 mov     ah, 0
code:1F93                 mov     cl, 4
code:1F95                 mul     cl
code:1F97                 add     ax, offset TL_WRITE_MASK
code:1F9A                 mov     si, ax
code:1F9C                 pop     cx
code:1F9D                 mov     bx, trackState.op1_tl
code:1FA0                 mov     ah, OPN_TL_CH1_OP1
code:1FA2                 mov     cl, 4
code:1FA4 loop:                                                       ; CODE XREF: SETTL+4D↓j
code:1FA4                 push    cx
code:1FA5                 cmp     [byte ptr si], 0
code:1FA8                 jz      short cont
code:1FAA                 mov     al, [bx+di]
code:1FAC                 add     al, ch
code:1FAE                 jns     short do_write
code:1FB0                 mov     al, 7Fh
code:1FB2 do_write:                                                   ; CODE XREF: SETTL+3E↑j
code:1FB2                 call    WFMDAT                              ; AL=chan, AH=reg
code:1FB5 cont:                                                       ; CODE XREF: SETTL+38↑j
code:1FB5                 add     ah, 4
code:1FB8                 inc     bx
code:1FB9                 inc     si
code:1FBA                 pop     cx
code:1FBB                 dec     cl
code:1FBD                 jnz     short loop
code:1FBF                 retn
code:1FBF endp            SETTL
code:1FBF ; ---------------------------------------------------------------------------
code:1FC0 VOL_TBL         db   7Fh,  2Ah,  27h,  24h                  ; 0
code:1FC0                                                             ; DATA XREF: SETTL+14↑o
code:1FC4                 db   21h,  1Eh,  1Bh,  18h                  ; 4
code:1FC8                 db   15h,  12h,  0Fh,  0Ch                  ; 8
code:1FCC                 db   09h,  06h,  03h,  00h                  ; 12
code:1FD0 TL_WRITE_MASK   db   00h,  00h,  00h,  01h                  ; DATA XREF: SETTL+27↑o
code:1FD4                 db   00h,  00h,  00h,  01h
code:1FD8                 db   00h,  00h,  00h,  01h
code:1FDC                 db   00h,  00h,  00h,  01h
code:1FE0                 db   00h,  00h,  01h,  01h
code:1FE4                 db   00h,  01h,  01h,  01h
code:1FE8                 db   00h,  01h,  01h,  01h
code:1FEC                 db   01h,  01h,  01h,  01h
code:1FF0 aSetvol         db '  SETVOL  '
code:1FFA ; =============== S U B R O U T I N E =======================================
code:1FFA proc            SETVOL near                                 ; CODE XREF: INIT_TRACKS+49↑p
code:1FFA                                                             ; SOFTEV+91↑p
code:1FFA                                                             ; KEYON+76↓p
code:1FFA                 cmp     [di+trackState.is_blocked], 0
code:1FFE                 jz      short not_blocked
code:2000                 retn
code:2001 ; ---------------------------------------------------------------------------
code:2001 not_blocked:                                                ; CODE XREF: SETVOL+4↑j
code:2001                 cmp     [di+trackState.output_channel], 3
code:2004                 jnb     short chan_is_ssg
code:2006                 retn
code:2007 ; ---------------------------------------------------------------------------
code:2007 chan_is_ssg:                                                ; CODE XREF: SETVOL+A↑j
code:2007                 call    STORE_VOL
code:200A                 push    ax
code:200B                 mov     al, [di+trackState.output_channel]
code:200D                 add     al, SSG_TONE_C_COARSE               ; arg is 3+, so we get to vol registers
code:200F                 call    SSGADR
code:2012                 pop     ax
code:2013                 call    SSGDAT
code:2016                 retn
code:2016 endp            SETVOL
code:2017 ; =============== S U B R O U T I N E =======================================
code:2017 proc            STORE_VOL near                              ; CODE XREF: SETTL:is_fm_channel↑p
code:2017                                                             ; SETVOL:chan_is_ssg↑p
code:2017                 push    ax
code:2018                 and     al, 00001111b
code:201A                 push    si
code:201B                 push    ax
code:201C                 mov     al, [di+trackState.output_channel]
code:201E                 mov     ah, 00h
code:2020                 add     ax, offset CHAN_VOLUMES
code:2023                 mov     si, ax
code:2025                 pop     ax
code:2026                 mov     [si], al
code:2028                 cmp     [di+trackState.tick_cycled], FALSE
code:202C                 jnz     short skip
code:202E                 mov     [byte ptr si], 00h
code:2031 skip:                                                       ; CODE XREF: STORE_VOL+15↑j
code:2031                 pop     si
code:2032                 pop     ax
code:2033                 retn
code:2033 endp            STORE_VOL
code:2034 ; =============== S U B R O U T I N E =======================================
code:2034 proc            STORE_NOTE near                             ; CODE XREF: KEYON+2D↓p
code:2034                                                             ; KEYON+45↓p
code:2034                                                             ; KEYON+AA↓p
code:2034                 push    ax
code:2035                 push    si
code:2036                 push    ax
code:2037                 mov     al, [di+trackState.output_channel]
code:2039                 mov     ah, 00h
code:203B                 add     ax, offset CHAN_NOTES
code:203E                 mov     si, ax
code:2040                 pop     ax
code:2041                 mov     [si], al
code:2043                 cmp     [di+trackState.drum_enabled], FALSE
code:2047                 jz      short cont
code:2049                 mov     [byte ptr si], 00h
code:204C cont:                                                       ; CODE XREF: STORE_NOTE+13↑j
code:204C                 pop     si
code:204D                 pop     ax
code:204E                 retn
code:204E endp            STORE_NOTE
code:204E ; ---------------------------------------------------------------------------
code:204F aCalvol         db '  CALVOL  '
code:2059 ; =============== S U B R O U T I N E =======================================
code:2059 proc            CALVOL near                                 ; CODE XREF: SOFTEV+88↑p
code:2059                                                             ; KEYON+6E↓p
code:2059                 cmp     [di+trackState.note], 0
code:205D                 jnz     short is_note
code:205F                 mov     al, 00h
code:2061                 retn
code:2062 ; ---------------------------------------------------------------------------
code:2062 is_note:                                                    ; CODE XREF: CALVOL+4↑j
code:2062                 mov     al, [di+trackState.volume]
code:2065                 mov     si, [di+trackState.volume_env_pos]
code:2068                 mov     ah, [si]
code:206A                 xor     ah, 00001111b
code:206D                 sub     al, ah
code:206F                 jb      short overflow
code:2071                 cmp     [di+trackState.is_bgm_track], FALSE
code:2075                 jz      short is_sfx
code:2077                 sub     al, [FADE_VOL_MOD]
code:207B                 jb      short overflow
code:207D                 sub     al, [BGM_VOL_MOD]
code:2081                 jmp     short _
code:2083 ; ---------------------------------------------------------------------------
code:2083                 nop
code:2084 is_sfx:                                                     ; CODE XREF: CALVOL+1C↑j
code:2084                 sub     al, [SFX_VOL_MOD]
code:2088 _:                                                          ; CODE XREF: CALVOL+28↑j
code:2088                 jnb     short check_ssg_adjust
code:208A overflow:                                                   ; CODE XREF: CALVOL+16↑j
code:208A                                                             ; CALVOL+22↑j
code:208A                                                             ; CALVOL+3F↓j
code:208A                                                             ; CALVOL+4C↓j
code:208A                 mov     al, 00h
code:208C                 jmp     short done
code:208E ; ---------------------------------------------------------------------------
code:208E                 nop
code:208F check_ssg_adjust:                                           ; CODE XREF: CALVOL:_↑j
code:208F                 cmp     [di+trackState.output_channel], 3
code:2092                 jb      short need_fm_adj
code:2094                 sub     al, [SSG_VOL_MOD]
code:2098                 jb      short overflow
code:209A                 retn
code:209B ; ---------------------------------------------------------------------------
code:209B need_fm_adj:                                                ; CODE XREF: CALVOL+39↑j
code:209B                 cmp     [di+trackState.drum_enabled], FALSE
code:209F                 jnz     short done
code:20A1                 sub     al, [FM_ATTENUATION]
code:20A5                 jb      short overflow
code:20A7 done:                                                       ; CODE XREF: CALVOL+33↑j
code:20A7                                                             ; CALVOL+46↑j
code:20A7                 retn
code:20A7 endp            CALVOL
code:20A7 ; ---------------------------------------------------------------------------
code:20A8 aKeyoff         db '  KEYOFF  '
code:20B2 ; =============== S U B R O U T I N E =======================================
code:20B2 proc            KEYOFF near                                 ; CODE XREF: PLAY+30↑p
code:20B2                                                             ; PLAY+B2↑p
code:20B2                                                             ; PLAY+1E0↑p
code:20B2                                                             ; PLAY+279↑p
code:20B2                 cmp     [di+trackState.ssg_drum_mode], 0
code:20B6                 jz      short loc_20BB
code:20B8                 jmp     short loc_20DB
code:20BA ; ---------------------------------------------------------------------------
code:20BA                 nop
code:20BB loc_20BB:                                                   ; CODE XREF: KEYOFF+4↑j
code:20BB                 cmp     [di+trackState.legato_enabled], FALSE
code:20BF                 jnz     short locret_20DF
code:20C1                 cmp     [di+trackState.is_blocked], FALSE
code:20C5                 jnz     short loc_20DB
code:20C7                 cmp     [di+trackState.output_channel], 3
code:20CA                 jnb     short loc_20DB
code:20CC                 mov     al, OPN_KEY_ON_OFF
code:20CE                 call    SFMADR                              ; AL=OPN_REG
code:20D1                 mov     al, [di]
code:20D3                 and     al, 00000011b
code:20D5                 call    SFMDAT
code:20D8                 jmp     short loc_20DB
code:20DA ; ---------------------------------------------------------------------------
code:20DA                 nop
code:20DB loc_20DB:                                                   ; CODE XREF: KEYOFF+6↑j
code:20DB                                                             ; KEYOFF+13↑j
code:20DB                                                             ; KEYOFF+18↑j
code:20DB                                                             ; KEYOFF+26↑j
code:20DB                 mov     [di+trackState.tick_cycled], FALSE
code:20DF locret_20DF:                                                ; CODE XREF: KEYOFF+D↑j
code:20DF                 retn
code:20DF endp            KEYOFF
code:20DF ; ---------------------------------------------------------------------------
code:20E0 aPolyon         db '  POLYON  '
code:20EA ; =============== S U B R O U T I N E =======================================
code:20EA proc            POLYON near                                 ; CODE XREF: PLAY+1DB↑p
code:20EA                 dec     al
code:20EC                 jns     short al_nonzero
code:20EE                 retn
code:20EF ; ---------------------------------------------------------------------------
code:20EF al_nonzero:                                                 ; CODE XREF: POLYON+2↑j
code:20EF                 cmp     [di+trackState.is_blocked], FALSE
code:20F3                 jz      short track_usable
code:20F5                 retn
code:20F6 ; ---------------------------------------------------------------------------
code:20F6 track_usable:                                               ; CODE XREF: POLYON+9↑j
code:20F6                 cmp     [di+trackState.output_channel], 2
code:20F9                 jz      short is_fm3
code:20FB                 retn
code:20FC ; ---------------------------------------------------------------------------
code:20FC is_fm3:                                                     ; CODE XREF: POLYON+F↑j
code:20FC                 mov     [di+trackState.is_blocked], TRUE
code:2100                 add     al, [di+trackState.n_offset_abs]
code:2103                 add     al, [di+trackState.n_offset_abs_vcmd]
code:2106                 mov     [CUR_NOTE], al
code:2109                 mov     al, [FM3_OP2]
code:210C                 call    GET_FNUM                            ; BX=Fnum
code:210F                 mov     al, OPN_FNUM_H_BLOCK_CH1_OP2
code:2111                 call    SFMADR                              ; AL=OPN_REG
code:2114                 mov     al, bh
code:2116                 call    SFMDAT
code:2119                 mov     al, OPN_FNUM_L_CH3_OP2
code:211B                 call    SFMADR                              ; AL=OPN_REG
code:211E                 mov     al, bl
code:2120                 call    SFMDAT
code:2123                 mov     al, [FM3_OP3]
code:2126                 call    GET_FNUM                            ; BX=Fnum
code:2129                 mov     al, OPN_FNUM_H_BLOCK_CH1_OP3
code:212B                 call    SFMADR                              ; AL=OPN_REG
code:212E                 mov     al, bh
code:2130                 call    SFMDAT
code:2133                 mov     al, OPN_FNUM_L_CH3_OP3
code:2135                 call    SFMADR                              ; AL=OPN_REG
code:2138                 mov     al, bl
code:213A                 call    SFMDAT
code:213D                 mov     al, [FM3_OP1]
code:2140                 call    GET_FNUM                            ; BX=Fnum
code:2143                 mov     al, OPN_FNUM_H_BLOCK_CH1_OP1
code:2145                 call    SFMADR                              ; AL=OPN_REG
code:2148                 mov     al, bh
code:214A                 call    SFMDAT
code:214D                 mov     al, OPN_FNUM_L_CH3_OP1
code:214F                 call    SFMADR                              ; AL=OPN_REG
code:2152                 mov     al, bl
code:2154                 call    SFMDAT
code:2157                 mov     [di+trackState.is_blocked], FALSE
code:215B                 retn
code:215B endp            POLYON
code:215C ; =============== S U B R O U T I N E =======================================
code:215C ; BX=Fnum
code:215C proc            GET_FNUM near                               ; CODE XREF: POLYON+22↑p
code:215C                                                             ; POLYON+3C↑p
code:215C                                                             ; POLYON+56↑p
code:215C                 add     al, [CUR_NOTE]
code:2160                 and     al, 01111111b
code:2162                 call    FMFRQ
code:2165                 mov     bx, ax
code:2167                 retn
code:2167 endp            GET_FNUM
code:2167 ; ---------------------------------------------------------------------------
code:2168 aKeyon          db '  KEYON  '
code:2171 ; =============== S U B R O U T I N E =======================================
code:2171 proc            KEYON near                                  ; CODE XREF: PLAY+1E4↑p
code:2171                 cmp     [di+trackState.tick_cycled], FALSE
code:2175                 jz      short shoud_process
code:2177                 cmp     [di+trackState.legato_enabled], FALSE
code:217B                 jz      short shoud_process
code:217D                 jmp     finish
code:2180 ; ---------------------------------------------------------------------------
code:2180 shoud_process:                                              ; CODE XREF: KEYON+4↑j
code:2180                                                             ; KEYON+A↑j
code:2180                 mov     [NEED_VOL_UPDATE], TRUE
code:2185                 mov     [di+trackState.note], al
code:2188                 dec     al
code:218A                 jns     short _need_state_update            ; AL is running status,
code:218A                                                             ; unless it overflows, we don't retrigger KON
code:218C                 mov     al, 0
code:218E                 cmp     [di+trackState.output_channel], 3
code:2191                 jnb     short _is_ssg
code:2193                 jmp     short _just_store
code:2195 ; ---------------------------------------------------------------------------
code:2195                 nop
code:2196 _is_ssg:                                                    ; CODE XREF: KEYON+20↑j
code:2196                 call    SSGFRQ
code:2199 _just_store:                                                ; CODE XREF: KEYON+22↑j
code:2199                 mov     [di+trackState.frequency], ax
code:219C                 mov     al, 0
code:219E                 call    STORE_NOTE
code:21A1                 jmp     short exit
code:21A3 ; ---------------------------------------------------------------------------
code:21A3                 nop
code:21A4 _need_state_update:                                         ; CODE XREF: KEYON+19↑j
code:21A4                 mov     [di+trackState.volume_env_restart_pos], 0
code:21A8                 mov     [di+trackState.note_played_once], TRUE
code:21AC                 add     al, [di+trackState.n_offset_abs]
code:21AF                 add     al, [di+trackState.n_offset_abs_vcmd]
code:21B2                 and     al, 01111111b
code:21B4                 inc     al
code:21B6                 call    STORE_NOTE
code:21B9                 dec     al
code:21BB                 cmp     [di+trackState.output_channel], 3
code:21BE                 jnb     short is_ssg__
code:21C0                 call    FMFRQ
code:21C3                 jmp     short reset_env
code:21C5 ; ---------------------------------------------------------------------------
code:21C5                 nop
code:21C6 is_ssg__:                                                   ; CODE XREF: KEYON+4D↑j
code:21C6                 call    SSGFRQ
code:21C9 reset_env:                                                  ; CODE XREF: KEYON+52↑j
code:21C9                 mov     [di+trackState.frequency], ax
code:21CC                 mov     ax, [di+trackState.volume_env_ptr]
code:21CF                 mov     [di+trackState.volume_env_pos], ax
code:21D2                 mov     ax, [di+trackState.pitch_env_ptr]
code:21D5                 mov     [di+trackState.pitch_env_pos], ax
code:21D8                 mov     al, [di+trackState.is_blocked]
code:21DB                 and     al, al
code:21DD                 jnz     short adjust_tempo_tick
code:21DF                 call    CALVOL
code:21E2                 cmp     [di+trackState.output_channel], 3
code:21E5                 jb      short is_fm_set_tl
code:21E7                 call    SETVOL
code:21EA                 jmp     short adjust_tempo_tick
code:21EC ; ---------------------------------------------------------------------------
code:21EC                 nop
code:21ED is_fm_set_tl:                                               ; CODE XREF: KEYON+74↑j
code:21ED                 call    SETTL
code:21F0                 mov     al, OPN_KEY_ON_OFF
code:21F2                 call    SFMADR                              ; AL=OPN_REG
code:21F5                 mov     al, [di+trackState.output_channel]
code:21F7                 and     al, 00000011b
code:21F9                 or      al, 11110000b
code:21FB                 call    SFMDAT
code:21FE adjust_tempo_tick:                                          ; CODE XREF: KEYON+6C↑j
code:21FE                                                             ; KEYON+79↑j
code:21FE                 mov     [byte ptr di+0Dh], True
code:2202 exit:                                                       ; CODE XREF: KEYON+30↑j
code:2202                                                             ; KEYON+9E↓j
code:2202                 retn
code:2203 ; ---------------------------------------------------------------------------
code:2203 finish:                                                     ; CODE XREF: KEYON+C↑j
code:2203                 mov     [NEED_VOL_UPDATE], FALSE
code:2208                 mov     [di+trackState.note], al
code:220B                 dec     al
code:220D                 jns     short loc_2211
code:220F                 jmp     short exit
code:2211 ; ---------------------------------------------------------------------------
code:2211 loc_2211:                                                   ; CODE XREF: KEYON+9C↑j
code:2211                 add     al, [di+2Ah]
code:2214                 add     al, [di+trackState.n_offset_abs_vcmd]
code:2217                 and     al, 01111111b
code:2219                 inc     al
code:221B                 call    STORE_NOTE
code:221E                 dec     al
code:2220                 cmp     [di+trackState.output_channel], 3
code:2223                 jnb     short is_ssg
code:2225                 call    FMFRQ
code:2228                 jmp     short store_freq
code:222A ; ---------------------------------------------------------------------------
code:222A                 nop
code:222B is_ssg:                                                     ; CODE XREF: KEYON+B2↑j
code:222B                 call    SSGFRQ
code:222E store_freq:                                                 ; CODE XREF: KEYON+B7↑j
code:222E                 mov     [di+trackState.frequency], ax
code:2231                 retn
code:2231 endp            KEYON
code:2231 ; ---------------------------------------------------------------------------
code:2232 aAkeyof         db '  AKEYOF  '
code:223C ; =============== S U B R O U T I N E =======================================
code:223C proc            AKEYOF near                                 ; CODE XREF: INT_FUNC+174↑p
code:223C                                                             ; INT_FUNC+1AA↑p
code:223C                 mov     [SSG_MIXER_REG], not (SSG_R7_IOA_INPUT)
code:2241                 mov     al, SSG_MIXER_ENABLE
code:2243                 call    SGADR
code:2246                 mov     al, not (SSG_R7_IOA_INPUT)          ; Mutes SSG
code:2248                 call    SGDAT
code:224B                 mov     al, OPN_SL_RR_CH1_OP1
code:224D                 mov     cx, 10h                             ; write whole row with RR/SL registers
code:2250 loop:                                                       ; CODE XREF: AKEYOF+22↓j
code:2250                 push    cx
code:2251                 push    ax
code:2252                 call    SFMADR                              ; AL=OPN_REG
code:2255                 mov     al, 0FFh                            ; set rr to max
code:2257                 call    SFMDAT
code:225A                 pop     ax
code:225B                 pop     cx
code:225C                 inc     al
code:225E                 loop    loop
code:2260                 mov     al, OPN_KEY_ON_OFF
code:2262                 call    SFMADR                              ; AL=OPN_REG
code:2265                 mov     al, 0
code:2267                 call    SFMDAT
code:226A                 mov     al, 1
code:226C                 call    SFMDAT
code:226F                 mov     al, 2
code:2271                 call    SFMDAT
code:2274                 mov     al, SSG_LEVEL_A
code:2276                 call    SGADR
code:2279                 mov     al, 0
code:227B                 call    SGDAT
code:227E                 mov     al, SSG_LEVEL_B
code:2280                 call    SGADR
code:2283                 mov     al, 0
code:2285                 call    SGDAT
code:2288                 mov     al, SSG_LEVEL_C
code:228A                 call    SGADR
code:228D                 mov     al, 0
code:228F                 call    SGDAT
code:2292                 mov     [CUR_INSTS], 0FFh
code:2297                 mov     [CUR_INSTS+1], 0FFh
code:229C                 mov     [CUR_INSTS+2], 0FFh
code:22A1                 mov     [CUR_INSTS+3], 0FFh
code:22A6                 retn
code:22A6 endp            AKEYOF
code:22A6 ; ---------------------------------------------------------------------------
code:22A7 aAllclr         db '  ALLCLR  '
code:22B1 ; =============== S U B R O U T I N E =======================================
code:22B1 proc            ALLCLR near                                 ; CODE XREF: SYSINI+88↑p
code:22B1                 mov     [CUR_INSTS], 0FFh
code:22B6                 mov     [CUR_INSTS+1], 0FFh
code:22BB                 mov     [CUR_INSTS+2], 0FFh
code:22C0                 mov     [CUR_INSTS+3], 0FFh
code:22C5                 call    STPALL
code:22C8                 retn
code:22C8 endp            ALLCLR
code:22C8 ; ---------------------------------------------------------------------------
code:22C9 aVibadd         db '  VIBADD  '
code:22D3 ; =============== S U B R O U T I N E =======================================
code:22D3 proc            VIBADD near                                 ; CODE XREF: SOFTVB+1C↑p
code:22D3                 push    si
code:22D4                 mov     si, [di+trackState.pitch_env_pos]
code:22D7 loop:                                                       ; CODE XREF: VIBADD+16↓j
code:22D7                                                             ; VIBADD+1B↓j
code:22D7                 mov     al, [si]
code:22D9                 inc     si
code:22DA                 cmp     al, 80h
code:22DC                 jz      short _is_80h                       ; restart from the beginning or envelope
code:22DE                 cmp     al, 81h
code:22E0                 jnz     short _is_81h
code:22E2                 mov     al, [si]
code:22E4                 mov     ah, 0
code:22E6                 sub     si, ax
code:22E8                 dec     si
code:22E9                 jmp     short loop
code:22EB ; ---------------------------------------------------------------------------
code:22EB _is_80h:                                                    ; CODE XREF: VIBADD+9↑j
code:22EB                 mov     si, [di+trackState.pitch_env_ptr]   ; restart from the beginning or envelope
code:22EE                 jmp     short loop
code:22F0 ; ---------------------------------------------------------------------------
code:22F0 _is_81h:                                                    ; CODE XREF: VIBADD+D↑j
code:22F0                 mov     [di+trackState.pitch_env_pos], si
code:22F3                 mov     ah, 0
code:22F5                 and     al, al
code:22F7                 jz      short break
code:22F9                 jns     short do_proc                       ; don't set negative if env was positive
code:22FB                 mov     ah, -1
code:22FD do_proc:                                                    ; CODE XREF: VIBADD+26↑j
code:22FD                 push    cx
code:22FE                 push    dx
code:22FF                 mov     cl, [di+trackState.pitch_env_mult]
code:2302                 and     cl, cl
code:2304                 jz      short skip_multiply
code:2306                 mov     ch, 0
code:2308                 mul     cx
code:230A skip_multiply:                                              ; CODE XREF: VIBADD+31↑j
code:230A                 pop     dx
code:230B                 pop     cx
code:230C                 add     bx, ax
code:230E break:                                                      ; CODE XREF: VIBADD+24↑j
code:230E                 pop     si
code:230F                 mov     ax, bx
code:2311                 retn
code:2311 endp            VIBADD
code:2311 ; ---------------------------------------------------------------------------
code:2312 aStpbgm         db '  STPBGM  '
code:231C ; =============== S U B R O U T I N E =======================================
code:231C proc            STPBGM near                                 ; CODE XREF: INT_FUNC+8B↑p
code:231C                                                             ; INT_FUNC+124↑p
code:231C                                                             ; PLAY_INTERRUPT+C4↑p
code:231C                 mov     dl, 0
code:231E                 mov     di, offset TRACK01
code:2321                 mov     cx, 10h
code:2324 loop:                                                       ; CODE XREF: STPBGM+45↓j
code:2324                 push    cx
code:2325                 push    dx
code:2326                 push    di
code:2327                 cmp     [di+trackState.output_channel], 7
code:232A                 jnb     short is_sfx_chan
code:232C                 cmp     [di+trackState.is_bgm_track], FALSE
code:2330                 jz      short is_sfx_chan
code:2332                 mov     [di+trackState.track_flags], 00000000b
code:2336                 mov     [dummyHeader.output_channel], dl
code:233A                 mov     al, [di+trackState.instrument]
code:233D                 mov     [dummyHeader.unknown], al
code:2340                 mov     al, [di+trackState.output_channel]
code:2342                 mov     [byte ptr dummyHeader.sequence_start], al
code:2345                 mov     ah, 0
code:2347                 cmp     al, 3
code:2349                 jnb     short is_ssg
code:234B                 mov     ah, al
code:234D                 inc     al
code:234F is_ssg:                                                     ; CODE XREF: STPBGM+2D↑j
code:234F                 mov     [STP_CHAN_TMP], ah
code:2353                 mov     si, offset dummyHeader
code:2356                 call    INIT_TRACKS
code:2359 is_sfx_chan:                                                ; CODE XREF: STPBGM+E↑j
code:2359                                                             ; STPBGM+14↑j
code:2359                 pop     di
code:235A                 pop     dx
code:235B                 pop     cx
code:235C                 inc     dl
code:235E                 sub     di, trackStateSize
code:2361                 loop    loop
code:2363                 retn
code:2363 endp            STPBGM
code:2363 ; ---------------------------------------------------------------------------
code:2364 aStpall         db '  STPALL  '
code:236E ; =============== S U B R O U T I N E =======================================
code:236E proc            STPALL near                                 ; CODE XREF: INT_FUNC+13F↑p
code:236E                                                             ; ALLCLR+14↑p
code:236E                 mov     dl, 0
code:2370                 mov     di, offset TRACK01
code:2373                 mov     cx, 10h
code:2376 loop:                                                       ; CODE XREF: STPALL+39↓j
code:2376                 push    cx
code:2377                 push    dx
code:2378                 push    di
code:2379                 cmp     [di+trackState.output_channel], 7
code:237C                 jnb     short loc_239F
code:237E                 mov     [di+trackState.track_flags], 00000000b
code:2382                 mov     [dummyHeader.output_channel], dl
code:2386                 mov     al, [di+trackState.output_channel]
code:2388                 mov     [byte ptr dummyHeader.sequence_start], al
code:238B                 mov     ah, 0
code:238D                 cmp     al, 3
code:238F                 jnb     short loc_2395
code:2391                 mov     ah, al
code:2393                 inc     al
code:2395 loc_2395:                                                   ; CODE XREF: STPALL+21↑j
code:2395                 mov     [STP_CHAN_TMP], ah
code:2399                 mov     si, offset dummyHeader
code:239C                 call    INIT_TRACKS
code:239F loc_239F:                                                   ; CODE XREF: STPALL+E↑j
code:239F                 pop     di
code:23A0                 pop     dx
code:23A1                 pop     cx
code:23A2                 inc     dl
code:23A4                 sub     di, trackStateSize
code:23A7                 loop    loop
code:23A9                 retn
code:23A9 endp            STPALL
code:23A9 ; ---------------------------------------------------------------------------
code:23AA dummyHeader     db 1                                        ; output_track
code:23AA                                                             ; DATA XREF: STPBGM+37↑o
code:23AA                                                             ; STPALL+2B↑o
code:23AA                                                             ; STPBGM+1A↑w
code:23AA                                                             ; STPALL+14↑w
code:23AA                                                             ; STPBGM+26↑w
code:23AA                                                             ; STPALL+1A↑w
code:23AA                                                             ; STPBGM+21↑w
code:23AB                 db 0                                        ; output_channel
code:23AC                 db 0                                        ; track_volume
code:23AD                 db 0                                        ; volenv_num
code:23AE                 db 0                                        ; pitchenv_num
code:23AF                 db 0                                        ; note_offset
code:23B0                 db 0                                        ; tempo
code:23B1                 db 0                                        ; track_00
code:23B2                 dw 0AA00h                                   ; sequence_start
code:23B4                 db 8                                        ; fminst_num
code:23B5                 db 0                                        ; unknown
code:23B6 STP_CHAN_TMP    db 0                                        ; DATA XREF: STPBGM:is_ssg↑w
code:23B6                                                             ; STPALL:loc_2395↑w
code:23B7 aSettim         db '  SETTIM  '
code:23C1 ; =============== S U B R O U T I N E =======================================
code:23C1 proc            SETTIM near                                 ; CODE XREF: INT_FUNC+6C↑p
code:23C1                                                             ; INT_FUNC+228↑p
code:23C1                                                             ; INT_FUNC+236↑p
code:23C1                                                             ; SYSINI+7↑p
code:23C1                 push    ax
code:23C2                 mov     al, OPN_TIMER_A_H
code:23C4                 call    SFMADR                              ; AL=OPN_REG
code:23C7                 pop     ax
code:23C8                 push    ax
code:23C9                 ror     ax, 1
code:23CB                 ror     ax, 1
code:23CD                 call    SFMDAT
code:23D0                 mov     al, OPN_TIMER_A_L
code:23D2                 call    SFMADR                              ; AL=OPN_REG
code:23D5                 pop     ax
code:23D6                 and     al, 3
code:23D8                 call    SFMDAT
code:23DB                 mov     al, OPN_TIMER_CTRL
code:23DD                 call    SFMADR                              ; AL=OPN_REG
code:23E0                 mov     al, 35h
code:23E2                 call    SFMDAT
code:23E5                 retn
code:23E5 endp            SETTIM
code:23E6 ; =============== S U B R O U T I N E =======================================
code:23E6 proc            PARSE_ARGS near                             ; CODE XREF: ENTRYPOINT+B↓p
code:23E6 args = bx
code:23E6                 mov     [ORIG_DS], ds
code:23EA                 mov     [CMD_FLAGS], 0
code:23EF                 mov     ax, maxDataBuffer
code:23F2                 mov     [DATA_BUF_SIZE], ax
code:23F5                 call    sub_2495
code:23F8                 cmp     [PSP.cmdlen], 0
code:23FD                 jnz     short loc_2400
code:23FF                 retn
code:2400 ; ---------------------------------------------------------------------------
code:2400 loc_2400:                                                   ; CODE XREF: PARSE_ARGS+17↑j
code:2400                                                             ; PARSE_ARGS+45↓j
code:2400                                                             ; PARSE_ARGS+5A↓j
code:2400                 mov     args, offset PSP.cmd
code:2403                 mov     cl, [args-1]
code:2406                 mov     ch, 0
code:2408                 mov     ah, '/'
code:240A                 call    FIND_SWITCH
code:240D                 jnb     short loc_2410
code:240F                 retn
code:2410 ; ---------------------------------------------------------------------------
code:2410 loc_2410:                                                   ; CODE XREF: PARSE_ARGS+27↑j
code:2410                 mov     [byte ptr args], '-'
code:2413                 mov     al, [args+1]
code:2416                 mov     ah, 0
code:2418                 mov     di, offset aNnssbbii                ; "NnSsBbIi"
code:241B loc_241B:                                                   ; CODE XREF: PARSE_ARGS+4A↓j
code:241B                 cmp     al, [cs:di]
code:241E                 jz      short loc_2432
code:2420                 cmp     [byte ptr cs:di], 0FFh
code:2424                 jnz     short loc_242D
code:2426                 or      [CMD_FLAGS], cmd_buffer_size_set
code:242B                 jmp     short loc_2400
code:242D ; ---------------------------------------------------------------------------
code:242D loc_242D:                                                   ; CODE XREF: PARSE_ARGS+3E↑j
code:242D                 inc     ah
code:242F                 inc     di
code:2430                 jmp     short loc_241B
code:2432 ; ---------------------------------------------------------------------------
code:2432 loc_2432:                                                   ; CODE XREF: PARSE_ARGS+38↑j
code:2432                 mov     al, ah
code:2434                 sub     ah, ah
code:2436                 mov     di, offset off_244B
code:2439                 add     ax, ax
code:243B                 add     di, ax
code:243D                 call    [word ptr cs:di]
code:2440                 jmp     short loc_2400
code:2440 endp            PARSE_ARGS
code:2440 ; ---------------------------------------------------------------------------
code:2442 aNnssbbii       db 'NnSsBbIi'                               ; DATA XREF: PARSE_ARGS+32↑o
code:244A                 db 0FFh
code:244B off_244B        dw offset cmdSetQuiet                       ; DATA XREF: PARSE_ARGS+50↑o
code:244D                 dw offset cmdSetQuiet
code:244F                 dw offset cmdSetTestMode
code:2451                 dw offset cmdSetTestMode
code:2453                 dw offset cmdSetBufSizw
code:2455                 dw offset cmdSetBufSizw
code:2457                 dw offset loc_246B
code:2459                 dw offset loc_246B
code:245B                 db 4 dup(0FFh)
code:245F ; ---------------------------------------------------------------------------
code:245F cmdSetQuiet:                                                ; DATA XREF: code:off_244B↑o
code:245F                                                             ; code:244D↑o
code:245F                 or      [CMD_FLAGS], cmd_is_quiet
code:2464                 retn
code:2465 ; ---------------------------------------------------------------------------
code:2465 cmdSetTestMode:                                             ; DATA XREF: code:244F↑o
code:2465                                                             ; code:2451↑o
code:2465                 or      [CMD_FLAGS], cmd_check_mode
code:246A                 retn
code:246B ; ---------------------------------------------------------------------------
code:246B loc_246B:                                                   ; DATA XREF: code:2457↑o
code:246B                                                             ; code:2459↑o
code:246B                 or      [CMD_FLAGS], CMD_FLAGS_4
code:2470                 retn
code:2471 ; ---------------------------------------------------------------------------
code:2471 cmdSetBufSizw:                                              ; DATA XREF: code:2453↑o
code:2471                                                             ; code:2455↑o
code:2471                 add     bx, 2
code:2474                 call    PARSE_INT
code:2477                 mov     ah, al
code:2479                 sub     al, al
code:247B                 shl     ax, 2
code:247E                 cmp     ax, maxDataBuffer
code:2481                 jb      short loc_2491
code:2483                 mov     dx, offset aAIAe48k                 ; "データバッファサイズの指定がちがってるから････とりあえず48Kほど確保する"...
code:2486                 call    PRINT_STRING
code:2489                 or      [CMD_FLAGS], cmd_buffer_size_set
code:248E                 mov     ax, maxDataBuffer
code:2491 loc_2491:                                                   ; CODE XREF: code:2481↑j
code:2491                 mov     [DATA_BUF_SIZE], ax
code:2494                 retn
code:2495 ; =============== S U B R O U T I N E =======================================
code:2495 proc            sub_2495 near                               ; CODE XREF: PARSE_ARGS+F↑p
code:2495                 mov     al, [PSP.cmdlen]
code:2498                 and     al, al
code:249A                 jnz     short loc_249D
code:249C                 retn
code:249D ; ---------------------------------------------------------------------------
code:249D loc_249D:                                                   ; CODE XREF: sub_2495+5↑j
code:249D                 mov     ds, [ORIG_DS]
code:24A1 loc_24A1:
code:24A1                 mov     es, [ORIG_DS]
code:24A5                 mov     [byte_0119], 0
code:24AA                 mov     di, offset PSP.cmd
code:24AD                 mov     cl, al
code:24AF                 mov     ch, 0
code:24B1                 mov     si, di
code:24B3                 inc     si
code:24B4 loc_24B4:                                                   ; CODE XREF: sub_2495+39↓j
code:24B4                 mov     al, [di]
code:24B6                 cmp     al, '!'
code:24B8                 jnb     short loc_24C8
code:24BA                 push    cx
code:24BB                 push    si
code:24BC                 push    di
code:24BD                 cld
code:24BE                 rep movsb
code:24C0                 pop     di
code:24C1                 pop     si
code:24C2                 pop     cx
code:24C3                 dec     cx
code:24C4                 inc     [byte_0119]
code:24C8 loc_24C8:                                                   ; CODE XREF: sub_2495+23↑j
code:24C8                 inc     si
code:24C9                 inc     di
code:24CA                 and     cx, cx
code:24CC                 jz      short loc_24D0
code:24CE                 loop    loc_24B4
code:24D0 loc_24D0:                                                   ; CODE XREF: sub_2495+37↑j
code:24D0                 mov     al, [PSP.cmdlen]
code:24D3                 sub     al, [byte_0119]
code:24D7                 mov     [PSP.cmdlen], al
code:24DA                 retn
code:24DA endp            sub_2495
code:24DB ; =============== S U B R O U T I N E =======================================
code:24DB proc            FIND_SWITCH near                            ; CODE XREF: PARSE_ARGS+24↑p
code:24DB                                                             ; FIND_SWITCH+7↓j
code:24DB args = bx
code:24DB switch_char = ah
code:24DB                 mov     al, [args]
code:24DD                 cmp     switch_char, al
code:24DF                 jz      short is_switch
code:24E1                 inc     args
code:24E2                 loop    FIND_SWITCH
code:24E4                 stc
code:24E5                 retn
code:24E6 ; ---------------------------------------------------------------------------
code:24E6 is_switch:                                                  ; CODE XREF: FIND_SWITCH+4↑j
code:24E6                 clc
code:24E7                 retn
code:24E7 endp            FIND_SWITCH
code:24E8 ; =============== S U B R O U T I N E =======================================
code:24E8 proc            PARSE_INT near                              ; CODE XREF: code:2474↑p
code:24E8                                                             ; PARSE_INT+A↓j
code:24E8 string = bx
code:24E8                 mov     [CMD_INT_ARG], 0
code:24ED                 mov     al, [string]
code:24EF                 inc     string
code:24F0                 cmp     al, '0'
code:24F2                 jz      short PARSE_INT                     ; Skip leading zeroes
code:24F4                 call    CHAR_TO_INT                         ; returns: AL
code:24F7                 jz      short loc_24FD
code:24F9                 dec     string
code:24FA                 mov     al, 0
code:24FC                 retn
code:24FD ; ---------------------------------------------------------------------------
code:24FD loc_24FD:                                                   ; CODE XREF: PARSE_INT+F↑j
code:24FD                 mov     [CMD_INT_ARG], al
code:2500                 mov     al, [string]
code:2502                 call    CHAR_TO_INT                         ; returns: AL
code:2505                 jz      short loc_250B
code:2507                 mov     al, [CMD_INT_ARG]
code:250A                 retn
code:250B ; ---------------------------------------------------------------------------
code:250B loc_250B:                                                   ; CODE XREF: PARSE_INT+1D↑j
code:250B                 inc     string
code:250C                 mov     ch, ah
code:250E                 mov     al, 10
code:2510                 mul     [CMD_INT_ARG]
code:2514                 add     al, ch
code:2516                 mov     [CMD_INT_ARG], al
code:2519                 mov     al, [string]
code:251B                 call    CHAR_TO_INT                         ; returns: AL
code:251E                 jz      short loc_2524
code:2520                 mov     al, [CMD_INT_ARG]
code:2523                 retn
code:2524 ; ---------------------------------------------------------------------------
code:2524 loc_2524:                                                   ; CODE XREF: PARSE_INT+36↑j
code:2524                 inc     string
code:2525                 mov     ch, ah
code:2527                 mov     al, 10
code:2529                 mul     [CMD_INT_ARG]
code:252D                 add     al, ch
code:252F                 retn
code:252F endp            PARSE_INT
code:2530 ; =============== S U B R O U T I N E =======================================
code:2530 ; returns: AL
code:2530 proc            CHAR_TO_INT near                            ; CODE XREF: PARSE_INT+C↑p
code:2530                                                             ; PARSE_INT+1A↑p
code:2530                                                             ; PARSE_INT+33↑p
code:2530 value = al
code:2530 digits = si
code:2530                 sub     ah, ah
code:2532                 mov     digits, offset a0123456789          ; "0123456789"
code:2535                 mov     cx, 10
code:2538 loop:                                                       ; CODE XREF: CHAR_TO_INT+10↓j
code:2538                 cmp     value, [cs:digits]
code:253B                 jz      short found
code:253D                 inc     digits
code:253E                 inc     ah
code:2540                 loop    loop
code:2542 found:                                                      ; CODE XREF: CHAR_TO_INT+B↑j
code:2542                 mov     value, ah
code:2544                 retn
code:2544 endp            CHAR_TO_INT
code:2544 ; ---------------------------------------------------------------------------
code:2545 a0123456789     db '0123456789'                             ; DATA XREF: CHAR_TO_INT+2↑o
code:254F ; =============== S U B R O U T I N E =======================================
code:254F proc            PRINT_STRING near                           ; CODE XREF: code:2486↑p
code:254F                                                             ; ENTRYPOINT+16↓p
code:254F                                                             ; ENTRYPOINT+38↓p
code:254F                                                             ; ENTRYPOINT+54↓p
code:254F                                                             ; ENTRYPOINT+65↓p
code:254F                                                             ; ENTRYPOINT+6B↓p
code:254F                                                             ; ENTRYPOINT+7C↓p
code:254F                                                             ; ENTRYPOINT+8D↓p
code:254F                                                             ; ENTRYPOINT+DB↓p
code:254F                                                             ; ENTRYPOINT+13E↓p
code:254F                                                             ; ENTRYPOINT:loc_2955↓p
code:254F                                                             ; ENTRYPOINT+154↓p
code:254F                                                             ; ENTRYPOINT+165↓p
code:254F                                                             ; ENTRYPOINT+1EB↓p
code:254F                                                             ; ENTRYPOINT+23B↓p
code:254F                                                             ; ENTRYPOINT+246↓p
code:254F                                                             ; EASTER_EGG_0+2E↓p
code:254F                                                             ; EASTER_EGG_0+34↓p
code:254F                                                             ; EASTER_EGG_0+49↓p
code:254F                                                             ; EASTER_EGG_0+6B↓p
code:254F                 test    [CMD_FLAGS], cmd_is_quiet
code:2554                 jz      short loc_2557
code:2556                 retn
code:2557 ; ---------------------------------------------------------------------------
code:2557 loc_2557:                                                   ; CODE XREF: PRINT_STRING+5↑j
code:2557                 mov     ah, 9
code:2559                 int     21h                                 ; DOS - PRINT STRING
code:2559                                                             ; DS:DX -> string terminated by "$"
code:255B                 retn
code:255B endp            PRINT_STRING
code:255B ; ---------------------------------------------------------------------------
code:255C aONA            db 'オプションに誤りがあります･･･',0Dh,0Ah,'$'
code:257C aAI             db 'データバッファサイズ = $'
code:2594 aAIAe48k        db 'データバッファサイズの指定がちがってるから････とりあえず48Kほど確保するね。',0Dh,0Ah,'$'
code:2594                                                             ; DATA XREF: code:2483↑o
code:25E2 aA              db '常駐アドレス = $'
code:25F2 a0000h          db ':0000h-$'
code:25FA aInt            db '使用割り込み = INT$'
code:260D aHInt7fh        db 'h,INT7Fh',0Dh,0Ah,'$'
code:2618                 db 0
code:2619                 align 200h
code:2800 aTsr            db '  TSR  '
code:2807 ; =============== S U B R O U T I N E =======================================
code:2807 ; Attributes: noreturn
code:2807 proc            ENTRYPOINT near                             ; CODE XREF: code:0100↑j
code:2807                 cli
code:2808                 mov     ax, cs
code:280A                 mov     ds, ax
code:280C                 in      al, 0Ah                             ; ;;;
code:280E                 or      al, 10h
code:2810                 out     0Ah, al                             ; ;;;
code:2812                 call    PARSE_ARGS
code:2815                 mov     [ENTRYPOINT_FLAG], 0
code:281A                 mov     dx, offset aINTRO                   ; "\x1B[33m\r\n<FRS00FPLAY>  Sequencial so"...
code:281D                 call    PRINT_STRING
code:2820                 mov     ax, 0
code:2823                 mov     es, ax
code:2825                 assume es:code
code:2825                 cmp     [es:INT_HAND_OFFSET], offset INT_FUNC
code:282C                 jnz     short loc_283C
code:282E                 mov     ax, [word ptr es:PSP.reserved_16_2B+0Ch]
code:2832                 cmp     ax, [es:INT_HAND_SEGMENT]
code:2837                 jnz     short loc_283C
code:2839                 jmp     loc_2A4A
code:283C ; ---------------------------------------------------------------------------
code:283C loc_283C:                                                   ; CODE XREF: ENTRYPOINT+25↑j
code:283C                                                             ; ENTRYPOINT+30↑j
code:283C                 mov     dx, offset aSB_CHECKING             ; "\x1B[37m\r\nサウンドボードの有無を確認します。$"
code:283F                 call    PRINT_STRING
code:2842                 mov     cx, 3Ch
code:2845                 call    nullsub_2
code:2848                 mov     dx, PC98_OPN_P0_ADDR
code:284B                 mov     al, OPN_TEST
code:284D                 out     dx, al
code:284E                 mov     cx, 1000h
code:2851 loop:                                                       ; CODE XREF: ENTRYPOINT+4F↓j
code:2851                 in      al, dx
code:2852                 rol     al, 1
code:2854                 jnb     short opn_found
code:2856                 loop    loop
code:2858                 mov     dx, offset aSB_NOT_FOUND            ; "\x1B[35m\r\nサウンドボードが確認できませんでした。\r\n\x1B"...
code:285B                 call    PRINT_STRING
code:285E                 mov     cx, 78h
code:2861                 call    nullsub_2
code:2864                 mov     ax, 4C00h
code:2867                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:2867                                                             ; AL = exit code
code:2869 ; ---------------------------------------------------------------------------
code:2869 loc_2869:                                                   ; CODE XREF: ENTRYPOINT+A1↓j
code:2869                 mov     dx, offset aTSR_RM_FAIL             ; "\x1B[35m\r\n常駐に失敗しました。.\r\n\x1B[37m$"
code:286C                 call    PRINT_STRING
code:286F                 mov     dx, offset aSET_INT5                ; "\x1B[35m\r\n割込み設定をＩＮＴ５に変更してください。\x1B[37"...
code:2872                 call    PRINT_STRING
code:2875                 mov     cx, (offset PSP.cmd+33h)
code:2878                 call    nullsub_2
code:287B                 mov     ax, 4C00h
code:287E                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:287E                                                             ; AL = exit code
code:2880 ; ---------------------------------------------------------------------------
code:2880                 mov     dx, offset aTSR_RM_FAIL             ; "\x1B[35m\r\n常駐に失敗しました。.\r\n\x1B[37m$"
code:2883                 call    PRINT_STRING
code:2886                 mov     cx, 0B4h
code:2889                 call    nullsub_2
code:288C                 mov     ax, 4C00h
code:288F                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:288F                                                             ; AL = exit code
code:2891 ; ---------------------------------------------------------------------------
code:2891 opn_found:                                                  ; CODE XREF: ENTRYPOINT+4D↑j
code:2891                 mov     dx, offset aSB_FOUND                ; "\x1B[36m\r\nサウンドボードを確認しました。\r\n\x1B[37m"...
code:2894                 call    PRINT_STRING
code:2897                 cli
code:2898                 mov     dx, PC98_OPN_P0_ADDR
code:289B                 mov     al, SSG_IO_PORT_A
code:289D                 out     dx, al
code:289E                 mov     dx, PC98_OPN_P0_DATA
code:28A1                 in      al, dx
code:28A2                 and     al, SSG_R7_IOA_INPUT or SSG_R7_IOB_INPUT
code:28A4                 jz      short loc_28AA
code:28A6                 cmp     al, SSG_R7_IOA_INPUT or SSG_R7_IOB_INPUT
code:28A8                 jnz     short loc_2869
code:28AA loc_28AA:                                                   ; CODE XREF: ENTRYPOINT+9D↑j
code:28AA                 mov     [byte_0111], al
code:28AD                 mov     ax, 0
code:28B0                 mov     es, ax
code:28B2                 mov     ax, [word ptr es:PSP.reserved_2E_5B+22h]
code:28B6                 cmp     ax, offset PLAY_INTERRUPT
code:28B9                 jnz     short loc_28BE
code:28BB                 jmp     loc_29C4
code:28BE ; ---------------------------------------------------------------------------
code:28BE loc_28BE:                                                   ; CODE XREF: ENTRYPOINT+B2↑j
code:28BE                 mov     ax, [es:PSP.env_seg]
code:28C2                 cmp     ax, offset PLAY_INTERRUPT
code:28C5                 jnz     short loc_28CA
code:28C7                 jmp     loc_29C4
code:28CA ; ---------------------------------------------------------------------------
code:28CA loc_28CA:                                                   ; CODE XREF: ENTRYPOINT+BE↑j
code:28CA                 mov     ax, cs
code:28CC                 mov     es, ax
code:28CE                 mov     ah, 4Ah
code:28D0                 mov     bx, [DATA_BUF_SIZE]
code:28D4                 shr     bx, 4
code:28D7                 add     bx, 400h
code:28DB                 int     21h                                 ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
code:28DB                                                             ; ES = segment address of block to change
code:28DB                                                             ; BX = new size in paragraphs
code:28DD                 jnb     short loc_28EA
code:28DF                 mov     dx, offset aTSR_RM_FAIL             ; "\x1B[35m\r\n常駐に失敗しました。.\r\n\x1B[37m$"
code:28E2                 call    PRINT_STRING
code:28E5                 mov     ax, 4C00h
code:28E8                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:28E8                                                             ; AL = exit code
code:28EA ; ---------------------------------------------------------------------------
code:28EA loc_28EA:                                                   ; CODE XREF: ENTRYPOINT+D6↑j
code:28EA                 cli
code:28EB                 mov     ax, 0
code:28EE                 mov     es, ax
code:28F0                 mov     ax, [word ptr es:PSP.reserved_2E_5B+22h]
code:28F4                 mov     [word_0105], ax
code:28F7                 mov     ax, [word ptr es:PSP.reserved_2E_5B+24h]
code:28FB                 mov     [word_0107], ax
code:28FE                 mov     ax, [es:PSP.env_seg]
code:2902                 mov     [word_010D], ax
code:2905                 mov     ax, [word ptr es:PSP.reserved_2E_5B]
code:2909                 mov     [word_010F], ax
code:290C                 mov     ax, [es:INT_HAND_OFFSET]
code:2910                 mov     [word_0109], ax
code:2913                 mov     ax, [es:INT_HAND_SEGMENT]
code:2917                 mov     [word_010B], ax
code:291A                 push    di
code:291B                 mov     ax, cs
code:291D                 mov     di, (offset PSP.reserved_2E_5B+22h)
code:2920                 cmp     [byte_0111], 0
code:2925                 jnz     short loc_292A
code:2927                 mov     di, offset PSP.env_seg
code:292A loc_292A:                                                   ; CODE XREF: ENTRYPOINT+11E↑j
code:292A                 mov     [word ptr es:di], offset PLAY_INTERRUPT
code:292F                 mov     [word ptr es:di+2], cs
code:2933                 pop     di
code:2934                 mov     [es:INT_HAND_OFFSET], offset INT_FUNC
code:293B                 mov     [es:INT_HAND_SEGMENT], ax
code:293F                 call    SYSINI
code:2942                 mov     dx, offset a36mInt                  ; "\x1B[36m\r\nＩＮＴ$"
code:2945                 call    PRINT_STRING
code:2948                 mov     dx, offset a5                       ; "５$"
code:294B                 cmp     [byte_0111], 0
code:2950                 jnz     short loc_2955
code:2952                 mov     dx, offset a0                       ; "０$"
code:2955 loc_2955:                                                   ; CODE XREF: ENTRYPOINT+149↑j
code:2955                 call    PRINT_STRING
code:2958                 mov     dx, offset aTSR_SET_OK              ; "に常駐しました。\r\n割込みベクタ番号７ＦＨをサウンド用として占有します。"...
code:295B                 call    PRINT_STRING
code:295E                 mov     ah, 9
code:2960                 mov     dx, offset aSongDat                 ; "SONG.DAT"
code:2963                 int     7Fh                                 ; User our own loader routine
code:2965                 and     al, al
code:2967                 jnz     short _loadFail
code:2969                 mov     dx, offset aSONGDAT_LOADED          ; "\x1B[37m\r\nシーケンスデータＳＯＮＧ．ＤＡＴをロードしました。\r"...
code:296C                 call    PRINT_STRING
code:296F _loadFail:                                                  ; CODE XREF: ENTRYPOINT+160↑j
code:296F                 call    EASTER_EGG_0
code:2972                 mov     cx, 3Ch
code:2975                 call    nullsub_2
code:2978                 cli
code:2979                 mov     al, 0Bh
code:297B                 out     0, al
code:297D                 nop
code:297E                 in      al, 0
code:2980                 test    al, 10000000b
code:2982                 jnz     short loc_298B
code:2984 loc_2984:                                                   ; CODE XREF: ENTRYPOINT+191↓j
code:2984                 mov     al, 20h
code:2986                 out     0, al
code:2988                 jmp     short loc_299A                      ; ;;;
code:298A ; ---------------------------------------------------------------------------
code:298A                 nop
code:298B loc_298B:                                                   ; CODE XREF: ENTRYPOINT+17B↑j
code:298B                 mov     al, PIC_IR5
code:298D                 out     PC98_PIC_SLAVE_CMD, al              ; ;;;
code:298F                 mov     al, PIC_IR0 or PIC_IR1 or PIC_IR3
code:2991                 out     PC98_PIC_SLAVE_CMD, al              ; ;;;
code:2993                 nop
code:2994                 in      al, PC98_PIC_SLAVE_CMD              ; ;;;
code:2996                 or      al, al
code:2998                 jz      short loc_2984
code:299A loc_299A:                                                   ; CODE XREF: ENTRYPOINT+181↑j
code:299A                 in      al, 0Ah                             ; DMA controller, 8237A-5.
code:299A                                                             ; single mask bit register
code:299A                                                             ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
code:299A                                                             ; 2: 1=set mask for channel; 0=clear mask (enable)
code:299C                 and     al, PIC_IR0 or PIC_IR1 or PIC_IR2 or PIC_IR3 or PIC_IR5 or PIC_IR6 or PIC_IR7
code:299E                 out     0Ah, al                             ; ;;;
code:29A0                 mov     al, [byte_0111]
code:29A3                 or      al, al
code:29A5                 jnz     short loc_29B4
code:29A7                 in      al, 0Ah                             ; ;;;
code:29A9                 or      al, PIC_IR4
code:29AB                 out     0Ah, al                             ; ;;;
code:29AD                 nop
code:29AE                 in      al, 2                               ; ;;;
code:29B0                 and     al, 11110111b
code:29B2                 out     2, al                               ; ;;;
code:29B4 loc_29B4:                                                   ; CODE XREF: ENTRYPOINT+19E↑j
code:29B4                 mov     ax, 3102h
code:29B7                 mov     dx, [DATA_BUF_SIZE]
code:29BB                 shr     dx, 4
code:29BE                 add     dx, 400h
code:29C2                 int     21h                                 ; DOS - DOS 2+ - TERMINATE BUT STAY RESIDENT
code:29C2                                                             ; AL = exit code, DX = program size, in paragraphs
code:29C4 ; ---------------------------------------------------------------------------
code:29C4 loc_29C4:                                                   ; CODE XREF: ENTRYPOINT+B4↑j
code:29C4                                                             ; ENTRYPOINT+C0↑j
code:29C4                 test    [CMD_FLAGS], cmd_check_mode
code:29C9                 jz      short loc_29D0
code:29CB                 mov     ax, 4C02h
code:29CE                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:29CE                                                             ; AL = exit code
code:29D0 ; ---------------------------------------------------------------------------
code:29D0 loc_29D0:                                                   ; CODE XREF: ENTRYPOINT+1C2↑j
code:29D0                 cli
code:29D1                 call    SYSINI
code:29D4                 mov     ax, 0
code:29D7                 mov     es, ax
code:29D9                 push    ds
code:29DA                 mov     ds, [es:INT_HAND_SEGMENT]
code:29DF                 mov     ax, ds
code:29E1                 mov     es, ax
code:29E3                 mov     es, [es:PSP.env_seg]
code:29E8                 assume es:nothing
code:29E8                 mov     ah, 49h
code:29EA                 int     21h                                 ; DOS - 2+ - FREE MEMORY
code:29EA                                                             ; ES = segment address of area to be freed
code:29EC                 jnb     short loc_29FA
code:29EE loc_29EE:                                                   ; CODE XREF: ENTRYPOINT+1FB↓j
code:29EE                 pop     ds
code:29EF                 mov     dx, offset a35m37m                  ; "\x1B[35m\r\n常駐解除に失敗しました。\r\n\x1B[37m$"
code:29F2                 call    PRINT_STRING
code:29F5                 mov     ax, 4C01h
code:29F8                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:29F8                                                             ; AL = exit code
code:29FA ; ---------------------------------------------------------------------------
code:29FA loc_29FA:                                                   ; CODE XREF: ENTRYPOINT+1E5↑j
code:29FA                 mov     ax, ds
code:29FC                 mov     es, ax
code:29FE                 assume es:code
code:29FE                 mov     ah, 49h
code:2A00                 int     21h                                 ; DOS - 2+ - FREE MEMORY
code:2A00                                                             ; ES = segment address of area to be freed
code:2A02                 jb      short loc_29EE
code:2A04                 sub     ax, ax
code:2A06                 mov     es, ax
code:2A08                 mov     ax, [word_0109]
code:2A0B                 mov     [es:INT_HAND_OFFSET], ax
code:2A0F                 mov     ax, [word_010B]
code:2A12                 mov     [es:INT_HAND_SEGMENT], ax
code:2A16                 mov     ax, [word_0105]
code:2A19                 mov     [word ptr es:PSP.reserved_2E_5B+22h], ax
code:2A1D                 mov     ax, [word_0107]
code:2A20                 mov     [word ptr es:PSP.reserved_2E_5B+24h], ax
code:2A24                 mov     ax, [word_010D]
code:2A27                 mov     [es:PSP.env_seg], ax
code:2A2B                 mov     ax, [word_010F]
code:2A2E                 mov     [word ptr es:PSP.reserved_2E_5B], ax
code:2A32                 pop     ds
code:2A33                 in      al, 0Ah                             ; DMA controller, 8237A-5.
code:2A33                                                             ; single mask bit register
code:2A33                                                             ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
code:2A33                                                             ; 2: 1=set mask for channel; 0=clear mask (enable)
code:2A35                 or      al, 10h
code:2A37                 out     0Ah, al                             ; DMA controller, 8237A-5.
code:2A37                                                             ; single mask bit register
code:2A37                                                             ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
code:2A37                                                             ; 2: 1=set mask for channel; 0=clear mask (enable)
code:2A39                 in      al, 2                               ; DMA controller, 8237A-5.
code:2A39                                                             ; channel 1 current address
code:2A3B                 or      al, 8
code:2A3D                 out     2, al                               ; DMA controller, 8237A-5.
code:2A3D                                                             ; channel 1 base address
code:2A3D                                                             ; (also sets current address)
code:2A3F                 mov     dx, offset a36m37m                  ; "\x1B[36m\r\n常駐解除しました。\r\n\x1B[37m$"
code:2A42                 call    PRINT_STRING
code:2A45                 mov     ax, 4C00h
code:2A48                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:2A48                                                             ; AL = exit code
code:2A4A ; ---------------------------------------------------------------------------
code:2A4A loc_2A4A:                                                   ; CODE XREF: ENTRYPOINT+32↑j
code:2A4A                 mov     dx, offset a32mBplayI37m            ; "\x1B[32m\r\nすでにＢＰＬＡＹが常駐しています\x1B[37m\r"...
code:2A4D                 call    PRINT_STRING
code:2A50                 mov     cx, 3Ch
code:2A53                 call    nullsub_2
code:2A56                 mov     ax, 4C00h
code:2A59                 int     21h                                 ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
code:2A59                                                             ; AL = exit code
code:2A59 endp            ENTRYPOINT
code:2A59 ; ---------------------------------------------------------------------------
code:2A5B aINTRO          db 1Bh,'[33m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+13↑o
code:2A62                 db '<FRS00FPLAY>  Sequencial sound player FPLAY  Ver 2.11a',1Bh,'[36m',0Dh,0Ah
code:2A9F                 db 'Copyright  1990-1994 by COMPILE corp.',0Dh,0Ah
code:2AC6                 db 'Programmed 1990 by Maiko Tsukino',0Dh,0Ah
code:2AE8                 db '       and 1991 by Kyora Yumi',0Dh,0Ah
code:2B07                 db 'Improved   1991 by Mitsugi',0Dh,0Ah
code:2B23                 db '       and 1993-1995 by Tatsuki.K',1Bh,'[37m',0Dh,0Ah,'$'
code:2B4C aSB_CHECKING    db 1Bh,'[37m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT:loc_283C↑o
code:2B53                 db 'サウンドボードの有無を確認します。$'
code:2B76 aSB_NOT_FOUND   db 1Bh,'[35m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+51↑o
code:2B7D                 db 'サウンドボードが確認できませんでした。',0Dh,0Ah
code:2BA5                 db 1Bh,'[37m$'
code:2BAB aSET_INT5       db 1Bh,'[35m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+68↑o
code:2BB2                 db '割込み設定をＩＮＴ５に変更してください。',1Bh,'[37m$'
code:2BE0 aSB_FOUND       db 1Bh,'[36m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT:opn_found↑o
code:2BE7                 db 'サウンドボードを確認しました。',0Dh,0Ah
code:2C07                 db 1Bh,'[37m$'
code:2C0D a36mInt         db 1Bh,'[36m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+13B↑o
code:2C14                 db 'ＩＮＴ$'
code:2C1B aTSR_RM_FAIL    db 1Bh,'[35m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT:loc_2869↑o
code:2C1B                                                             ; ENTRYPOINT+79↑o
code:2C1B                                                             ; ENTRYPOINT+D8↑o
code:2C22                 db '常駐に失敗しました。.',0Dh,0Ah
code:2C39                 db 1Bh,'[37m$'
code:2C3F a36m37m         db 1Bh,'[36m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+238↑o
code:2C46                 db '常駐解除しました。',0Dh,0Ah
code:2C5A                 db 1Bh,'[37m$'
code:2C60 a35m37m         db 1Bh,'[35m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+1E8↑o
code:2C67                 db '常駐解除に失敗しました。',0Dh,0Ah
code:2C81                 db 1Bh,'[37m$'
code:2C87                 align 2
code:2C88 a32mBplayI37m   db 1Bh,'[32m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT:loc_2A4A↑o
code:2C8F                 db 'すでにＢＰＬＡＹが常駐しています',1Bh,'[37m',0Dh,0Ah,'$'
code:2CB7 aSONGDAT_LOADED db 1Bh,'[37m',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+162↑o
code:2CBE                 db 'シーケンスデータＳＯＮＧ．ＤＡＴをロードしました。',0Dh,0Ah
code:2CF2                 db 1Bh,'[37m$'
code:2CF8 a0              db '０$'                                     ; DATA XREF: ENTRYPOINT+14B↑o
code:2CFB a5              db '５$'                                     ; DATA XREF: ENTRYPOINT+141↑o
code:2CFE aTSR_SET_OK     db 'に常駐しました。',0Dh,0Ah                       ; DATA XREF: ENTRYPOINT+151↑o
code:2D10                 db '割込みベクタ番号７ＦＨをサウンド用として占有します。',0Dh,0Ah
code:2D46                 db 1Bh,'[37m$'
code:2D4C aSongDat        db 'SONG.DAT',0                             ; DATA XREF: ENTRYPOINT+159↑o
code:2D55 ; =============== S U B R O U T I N E =======================================
code:2D55 proc            nullsub_2 near                              ; CODE XREF: ENTRYPOINT+3E↑p
code:2D55                                                             ; ENTRYPOINT+5A↑p
code:2D55                                                             ; ENTRYPOINT+71↑p
code:2D55                                                             ; ENTRYPOINT+82↑p
code:2D55                                                             ; ENTRYPOINT+16E↑p
code:2D55                                                             ; ENTRYPOINT+24C↑p
code:2D55                                                             ; EASTER_EGG_0+71↓p
code:2D55                 retn
code:2D55 endp            nullsub_2
code:2D56 ; ---------------------------------------------------------------------------
code:2D56                 sti
code:2D57 EASTER_EGG:                                                 ; CODE XREF: code:2D67↓j
code:2D57                                                             ; code:2D69↓j
code:2D57                 push    cx
code:2D58                 mov     ah, 6
code:2D5A                 mov     dl, 0FFh
code:2D5C                 int     21h                                 ; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
code:2D5C                                                             ; DL = character <> FFh
code:2D5C                                                             ;  Return: ZF set = no character
code:2D5C                                                             ;   ZF clear = character recieved, AL = character
code:2D5E                 pop     cx
code:2D5F                 and     al, al
code:2D61                 jnz     short loc_2D6B
code:2D63                 in      al, PC98_GDC0_STATUS                ; 8042 keyboard controller data register
code:2D65                 and     al, 00100000b
code:2D67                 jz      short EASTER_EGG
code:2D69                 loop    EASTER_EGG
code:2D6B loc_2D6B:                                                   ; CODE XREF: code:2D61↑j
code:2D6B                 sti
code:2D6C                 retn
code:2D6D ; =============== S U B R O U T I N E =======================================
code:2D6D proc            EASTER_EGG_0 near                           ; CODE XREF: ENTRYPOINT:_loadFail↑p
code:2D6D                 cmp     [cs:PSP.cmdlen], 4
code:2D73                 jnb     short loc_2D76
code:2D75                 retn
code:2D76 ; ---------------------------------------------------------------------------
code:2D76 loc_2D76:                                                   ; CODE XREF: EASTER_EGG_0+6↑j
code:2D76                 mov     ax, cs
code:2D78                 mov     ds, ax
code:2D7A                 mov     ah, 2Ch
code:2D7C                 int     21h                                 ; DOS - GET CURRENT TIME
code:2D7C                                                             ; Return: CH = hours, CL = minutes, DH = seconds
code:2D7C                                                             ; DL = hundredths of seconds
code:2D7E                 mov     dx, cx
code:2D80                 mov     si, offset word_2DE2
code:2D83                 mov     cx, 0Ah
code:2D86 loc_2D86:                                                   ; CODE XREF: EASTER_EGG_0+23↓j
code:2D86                 mov     ax, [si]
code:2D88                 inc     si
code:2D89                 inc     si
code:2D8A                 cmp     dx, ax
code:2D8C                 jb      short loc_2D93
code:2D8E                 inc     si
code:2D8F                 inc     si
code:2D90                 loop    loc_2D86
code:2D92                 retn
code:2D93 ; ---------------------------------------------------------------------------
code:2D93 loc_2D93:                                                   ; CODE XREF: EASTER_EGG_0+1F↑j
code:2D93                 cmp     dx, 200h
code:2D97                 jz      short loc_2DA5
code:2D99                 mov     dx, [si]
code:2D9B                 call    PRINT_STRING
code:2D9E                 mov     dx, offset a37m                     ; "\x1B[37m $"
code:2DA1                 call    PRINT_STRING
code:2DA4                 retn
code:2DA5 ; ---------------------------------------------------------------------------
code:2DA5 loc_2DA5:                                                   ; CODE XREF: EASTER_EGG_0+2A↑j
code:2DA5                 mov     al, 0
code:2DA7                 out     PC98_GDC_PAL_INDEX, al              ; Interrupt Controller #2, 8259A
code:2DA9                 nop
code:2DAA                 out     PC98_GDC_PAL_G, al                  ; Interrupt Controller #2, 8259A
code:2DAC                 nop
code:2DAD                 out     PC98_GDC_PAL_B, al                  ; Interrupt Controller #2, 8259A
code:2DAF                 mov     al, 3
code:2DB1                 out     PC98_GDC_PAL_R, al                  ; Interrupt Controller #2, 8259A
code:2DB3                 mov     dx, offset a31mA                    ; "\x1B[31m\r\nきゃぁ〜！！\r\n$"
code:2DB6                 call    PRINT_STRING
code:2DB9                 mov     al, 00000110b
code:2DBB                 out     37h, al
code:2DBD                 mov     cx, 0
code:2DC0 loc_2DC0:                                                   ; CODE XREF: EASTER_EGG_0+5F↓j
code:2DC0                 push    cx
code:2DC1                 mov     al, 00000110b
code:2DC3                 out     37h, al
code:2DC5                 push    cx
code:2DC6                 pop     cx
code:2DC7                 mov     al, 7
code:2DC9                 out     37h, al
code:2DCB                 pop     cx
code:2DCC                 loop    loc_2DC0
code:2DCE                 mov     al, 0
code:2DD0                 out     PC98_GDC_PAL_INDEX, al              ; Interrupt Controller #2, 8259A
code:2DD2                 nop
code:2DD3                 out     PC98_GDC_PAL_R, al                  ; Interrupt Controller #2, 8259A
code:2DD5                 mov     dx, offset a37m                     ; "\x1B[37m $"
code:2DD8                 call    PRINT_STRING
code:2DDB                 mov     cx, 0B4h
code:2DDE                 call    nullsub_2
code:2DE1                 retn
code:2DE1 endp            EASTER_EGG_0
code:2DE1 ; ---------------------------------------------------------------------------
code:2DE2 word_2DE2       dw 100h                                     ; DATA XREF: EASTER_EGG_0+13↑o
code:2DE4                 dw offset a33mIO                            ; "\x1B[33m\r\nねむいよぉ〜\r\n$"
code:2DE6                 dw 200h
code:2DE8                 dw offset a35mNN                            ; "\x1B[35m\r\nなんかやなかんじ…\r\n$"
code:2DEA                 dw 201h
code:2DEC                 dw offset a37m                              ; "\x1B[37m $"
code:2DEE                 dw 300h
code:2DF0                 dw offset a36mNII                           ; "\x1B[36m\r\nこんな時間に起こさないでください！！\r\n$"
code:2DF2                 dw 400h
code:2DF4                 dw offset a33mA                             ; "\x1B[33m\r\nあなたもしかして不眠症？\r\n$"
code:2DF6                 dw 600h
code:2DF8                 dw offset a32mNE                            ; "\x1B[32m\r\nこんな時間に…暇ねぇ…\r\n$"
code:2DFA                 dw 800h
code:2DFC                 dw offset a36mOUINU                         ; "\x1B[36m\r\nお早ようございます！　ちゃんと朝御飯を食べましょう！"...
code:2DFE                 dw 1600h
code:2E00                 dw offset a37m                              ; "\x1B[37m $"
code:2E02                 dw 1700h
code:2E04                 dw offset a32mU                             ; "\x1B[32m\r\nそろそろ御休みになられたほうが…\r\n$"
code:2E06                 dw 1800h
code:2E08                 dw offset a35mUUO                           ; "\x1B[35m\r\nもうすぐ明日になっちゃうよぉ！\r\n$"
code:2E0A a33mIO          db 1Bh,'[33m',0Dh,0Ah                       ; DATA XREF: code:2DE4↑o
code:2E11                 db 'ねむいよぉ〜',0Dh,0Ah,'$'
code:2E20 a35mNN          db 1Bh,'[35m',0Dh,0Ah                       ; DATA XREF: code:2DE8↑o
code:2E27                 db 'なんかやなかんじ…',0Dh,0Ah,'$'
code:2E3C a36mNII         db 1Bh,'[36m',0Dh,0Ah                       ; DATA XREF: code:2DF0↑o
code:2E43                 db 'こんな時間に起こさないでください！！',0Dh,0Ah,'$'
code:2E6A a33mA           db 1Bh,'[33m',0Dh,0Ah                       ; DATA XREF: code:2DF4↑o
code:2E71                 db 'あなたもしかして不眠症？',0Dh,0Ah,'$'
code:2E8C a32mNE          db 1Bh,'[32m',0Dh,0Ah                       ; DATA XREF: code:2DF8↑o
code:2E93                 db 'こんな時間に…暇ねぇ…',0Dh,0Ah,'$'
code:2EAC a36mOUINU       db 1Bh,'[36m',0Dh,0Ah                       ; DATA XREF: code:2DFC↑o
code:2EB3                 db 'お早ようございます！　ちゃんと朝御飯を食べましょう！',0Dh,0Ah,'$'
code:2EEA a37m            db 1Bh,'[37m $'                             ; DATA XREF: EASTER_EGG_0+31↑o
code:2EEA                                                             ; EASTER_EGG_0+68↑o
code:2EEA                                                             ; code:2DEC↑o
code:2EEA                                                             ; code:2E00↑o
code:2EF1 a32mU           db 1Bh,'[32m',0Dh,0Ah                       ; DATA XREF: code:2E04↑o
code:2EF8                 db 'そろそろ御休みになられたほうが…',0Dh,0Ah,'$'
code:2F1B a35mUUO         db 1Bh,'[35m',0Dh,0Ah                       ; DATA XREF: code:2E08↑o
code:2F22                 db 'もうすぐ明日になっちゃうよぉ！',0Dh,0Ah,'$'
code:2F43 a31mA           db 1Bh,'[31m',0Dh,0Ah                       ; DATA XREF: EASTER_EGG_0+46↑o
code:2F4A                 db 'きゃぁ〜！！',0Dh,0Ah,'$'
code:2F59                 db '*',0Dh,0Ah,'$'
code:2F5D                 db 0FA1h dup(   0)                          ; But why...
code:3EFE LAST_ADDR       dw 0                                        ; DATA XREF: SFMADR+1C↑w
code:3EFE                                                             ; SFMDAT+1D↑r
code:3EFE                                                             ; SSGADR+24↑w
code:3EFE                                                             ; SSGDAT+23↑r
code:3EFE                                                             ; SGADR+1E↑w
code:3EFE                                                             ; SGDAT+1D↑r
code:3F00 OPN_BUF         db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F00                                                             ; DATA XREF: SFMDAT+22↑w
code:3F00                                                             ; SSGDAT+28↑w
code:3F00                                                             ; SGDAT+22↑w
code:3F10                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F20                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F30                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F40                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F50                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F60                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F70                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F80                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3F90                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3FA0                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3FB0                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3FC0                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3FD0                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3FE0                 db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
code:3FF0 CHAN_NOTES      db    0,   0,   0,   0,   0,   0,   0,   0  ; DATA XREF: STORE_NOTE+7↑o
code:3FF8 CHAN_VOLUMES    db    0,   0,   0,   0,   0,   0            ; DATA XREF: INT_FUNC:stopBgm↑w
code:3FF8                                                             ; INT_FUNC:stopAll↑w
code:3FF8                                                             ; PLAY+2B9↑o
code:3FF8                                                             ; STORE_VOL+9↑o
code:3FF8                                                             ; INT_FUNC+116↑w
code:3FF8                                                             ; INT_FUNC+131↑w
code:3FF8                                                             ; INT_FUNC+11D↑w
code:3FF8                                                             ; INT_FUNC+138↑w
code:3FFE                 db 0
code:3FFF ENTRYPOINT_FLAG db 0                                        ; DATA XREF: ENTRYPOINT+E↑w
code:4000 ptrFM_TONE_TBL  dw 0                                        ; DATA XREF: INT_FUNC+1BD↑o
code:4000                                                             ; SETTON+3A↑r
code:4002 ptrNOTE_LEN_TBL dw 0                                        ; DATA XREF: PLAY+1B3↑r
code:4004 ptrVOL_ENV_TBL  dw 0                                        ; DATA XREF: INIT_TRACKS+91↑r
code:4004                                                             ; PLAY+37C↑r
code:4006 ptrPITCH_ENV_TBL dw 0                                       ; DATA XREF: INIT_TRACKS+A8↑r
code:4006                                                             ; PLAY+357↑r
code:4008 ptrSNG_TBL_PTR  dw 0                                        ; DATA XREF: INT_FUNC+93↑r
code:4008                                                             ; INT_FUNC+BE↑r
code:4008                                                             ; SYSINI+74↑r
code:4008                                                             ; PLAY_INTERRUPT+1C6↑r
code:400A ptrSSG_TONE_TBL dw ?                                        ; DATA XREF: PLAY+ED↑r
code:400C                 db 4 dup(?)
code:400C ends            code
code:400C                 end
